
Micro LP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000304  00800100  000029ca  00002a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000073  00800404  00800404  00002d62  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000209a  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000952  00000000  00000000  00004f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017b2  00000000  00000000  000058bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00007070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000818  00000000  00000000  00007600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000180d  00000000  00000000  00007e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00009625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__vector_1>
       8:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__vector_4>
      14:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ec       	ldi	r30, 0xCA	; 202
      7c:	f9 e2       	ldi	r31, 0x29	; 41
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 30       	cpi	r26, 0x04	; 4
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	a4 e0       	ldi	r26, 0x04	; 4
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 37       	cpi	r26, 0x77	; 119
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 42 06 	call	0xc84	; 0xc84 <main>
      9e:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_init>:
	while(*cadena !=0x00){				//mientras el último valor de la cadena sea diferente a el caracter nulo
		UART_write(*cadena);			//transmite los caracteres de cadena
		cadena++;						//incrementa la ubicación de los caracteres en cadena
		//para enviar el siguiente caracter de cadena
	}
}
      a6:	51 9a       	sbi	0x0a, 1	; 10
      a8:	50 98       	cbi	0x0a, 0	; 10
      aa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      ae:	88 e9       	ldi	r24, 0x98	; 152
      b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
      b4:	86 e0       	ldi	r24, 0x06	; 6
      b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
      ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      be:	87 e6       	ldi	r24, 0x67	; 103
      c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      c4:	8f e3       	ldi	r24, 0x3F	; 63
      c6:	91 e0       	ldi	r25, 0x01	; 1
      c8:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <__iob+0x3>
      cc:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <__iob+0x2>
      d0:	08 95       	ret

000000d2 <UART_write>:
      d2:	e0 ec       	ldi	r30, 0xC0	; 192
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	90 81       	ld	r25, Z
      d8:	95 ff       	sbrs	r25, 5
      da:	fd cf       	rjmp	.-6      	; 0xd6 <UART_write+0x4>
      dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      e0:	08 95       	ret

000000e2 <USART_printCHAR>:
      e2:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_write>
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	08 95       	ret

000000ec <__vector_18>:
	
}



ISR(USART_RX_vect){
      ec:	1f 92       	push	r1
      ee:	0f 92       	push	r0
      f0:	0f b6       	in	r0, 0x3f	; 63
      f2:	0f 92       	push	r0
      f4:	11 24       	eor	r1, r1
      f6:	2f 93       	push	r18
      f8:	3f 93       	push	r19
      fa:	4f 93       	push	r20
      fc:	5f 93       	push	r21
      fe:	6f 93       	push	r22
     100:	7f 93       	push	r23
     102:	8f 93       	push	r24
     104:	9f 93       	push	r25
     106:	af 93       	push	r26
     108:	bf 93       	push	r27
     10a:	ef 93       	push	r30
     10c:	ff 93       	push	r31
	
	char dato = UDR0;
     10e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	if(recibiendo>0)
     112:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <recibiendo>
     116:	99 23       	and	r25, r25
     118:	b1 f1       	breq	.+108    	; 0x186 <__vector_18+0x9a>
	{
		if (dato != '>' && j == 0)
     11a:	8e 33       	cpi	r24, 0x3E	; 62
     11c:	59 f0       	breq	.+22     	; 0x134 <__vector_18+0x48>
     11e:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <j>
     122:	91 11       	cpse	r25, r1
     124:	25 c0       	rjmp	.+74     	; 0x170 <__vector_18+0x84>
		{
			serialCode = dato - '0';
     126:	80 53       	subi	r24, 0x30	; 48
     128:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <serialCode>
			j ++;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <j>
     132:	2e c0       	rjmp	.+92     	; 0x190 <__vector_18+0xa4>
		}
		else if(dato == '>')
		{
			
			RxBuffer[RxContador] = '\0';
     134:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <RxContador>
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	ef 5a       	subi	r30, 0xAF	; 175
     13c:	fb 4f       	sbci	r31, 0xFB	; 251
     13e:	10 82       	st	Z, r1
			RxContador = 0;
     140:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <RxContador>
			recibiendo = 0;
     144:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <recibiendo>
			j = 0;
     148:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <j>
			serialPulse = atol(RxBuffer);
     14c:	81 e5       	ldi	r24, 0x51	; 81
     14e:	94 e0       	ldi	r25, 0x04	; 4
     150:	0e 94 99 11 	call	0x2332	; 0x2332 <atol>
     154:	70 93 4e 04 	sts	0x044E, r23	; 0x80044e <serialPulse+0x1>
     158:	60 93 4d 04 	sts	0x044D, r22	; 0x80044d <serialPulse>
			newData ++;
     15c:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <newData>
     160:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <newData+0x1>
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <newData+0x1>
     16a:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <newData>
     16e:	10 c0       	rjmp	.+32     	; 0x190 <__vector_18+0xa4>
			
		}
		else
		{
			RxBuffer[RxContador++] = dato;
     170:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <RxContador>
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	9e 0f       	add	r25, r30
     178:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <RxContador>
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	ef 5a       	subi	r30, 0xAF	; 175
     180:	fb 4f       	sbci	r31, 0xFB	; 251
     182:	80 83       	st	Z, r24
     184:	05 c0       	rjmp	.+10     	; 0x190 <__vector_18+0xa4>
		}
	}
	else if(dato=='<')
     186:	8c 33       	cpi	r24, 0x3C	; 60
     188:	19 f4       	brne	.+6      	; 0x190 <__vector_18+0xa4>
	{
		recibiendo++;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <recibiendo>
	}
	
	
}
     190:	ff 91       	pop	r31
     192:	ef 91       	pop	r30
     194:	bf 91       	pop	r27
     196:	af 91       	pop	r26
     198:	9f 91       	pop	r25
     19a:	8f 91       	pop	r24
     19c:	7f 91       	pop	r23
     19e:	6f 91       	pop	r22
     1a0:	5f 91       	pop	r21
     1a2:	4f 91       	pop	r20
     1a4:	3f 91       	pop	r19
     1a6:	2f 91       	pop	r18
     1a8:	0f 90       	pop	r0
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	0f 90       	pop	r0
     1ae:	1f 90       	pop	r1
     1b0:	18 95       	reti

000001b2 <configPWM>:


void configPWM(void)
{
	//Config PWM0
	TCCR0A=0x03;	// 0000 0011 --- Operación normal, salidas PWM OC0A y OC0B desactivadas, PWM rápido
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	84 bd       	out	0x24, r24	; 36
	TCCR0B=0x02;    // 0000 0010 --- Escalador/8
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	85 bd       	out	0x25, r24	; 37
	
	//Config PWM1
	TCCR1A=0x01;    // 1010 0001 --- Operación normal, salida PWM OC1A desactivada, PWM rápido 
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B=0X0A;    // 0000 1010 --- Escalador/8
     1c0:	8a e0       	ldi	r24, 0x0A	; 10
     1c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1c6:	08 95       	ret

000001c8 <ActivarPWM_Lat>:
}

void ActivarPWM_Lat(uint8_t PWM, uint8_t encendido)
{
	OCR0A=PWM;				// Definir ancho de pulso
     1c8:	87 bd       	out	0x27, r24	; 39
	
	if (encendido==1)		// Si el motor debe encenderse o continuar encendido:
     1ca:	61 30       	cpi	r22, 0x01	; 1
     1cc:	61 f4       	brne	.+24     	; 0x1e6 <ActivarPWM_Lat+0x1e>
	{
		rel_lateral = 0; 
     1ce:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <rel_lateral+0x1>
     1d2:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <rel_lateral>
		TCCR0A |= (1<<7);   // TCCR0A = 0b10x00011 ----  10x0 0011  Modo no invertido, salida OC0A activada, PWM rápido
     1d6:	84 b5       	in	r24, 0x24	; 36
     1d8:	80 68       	ori	r24, 0x80	; 128
     1da:	84 bd       	out	0x24, r24	; 36
	    printf("Lat on \n");
     1dc:	8d e4       	ldi	r24, 0x4D	; 77
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     1e4:	08 95       	ret
	}
	else                    // Si no (el motor debe apagarse):
	{
		TCCR0A &=~ (1<<7); // TCCR0A = 0b00x00011 ----  00x0 0011  Operación normal, salida PWM OC0A desactivada, PWM rápido
     1e6:	84 b5       	in	r24, 0x24	; 36
     1e8:	8f 77       	andi	r24, 0x7F	; 127
     1ea:	84 bd       	out	0x24, r24	; 36
		rel_lateral = count_enc_lat;
     1ec:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <count_enc_lat>
     1f0:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <count_enc_lat+0x1>
     1f4:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <rel_lateral+0x1>
     1f8:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <rel_lateral>
		printf("Lat off \n");
     1fc:	85 e5       	ldi	r24, 0x55	; 85
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     204:	08 95       	ret

00000206 <ActivarPWM_Pul>:
	}
}

void ActivarPWM_Pul(uint8_t PWM, uint8_t encendido)
{
	OCR0B=PWM;				// Definir ancho de pulso
     206:	88 bd       	out	0x28, r24	; 40
	
	if (encendido==1)		// Si el motor debe encenderse o continuar encendido:
     208:	61 30       	cpi	r22, 0x01	; 1
     20a:	61 f4       	brne	.+24     	; 0x224 <ActivarPWM_Pul+0x1e>
	{
		rel_pulgar = 0;
     20c:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <rel_pulgar+0x1>
     210:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <rel_pulgar>
		TCCR0A |= (1<<5);   // TCCR0A = 0b10x00011 ----  10x0 0011  Modo no invertido, salida OC0B activada, PWM rápido
     214:	84 b5       	in	r24, 0x24	; 36
     216:	80 62       	ori	r24, 0x20	; 32
     218:	84 bd       	out	0x24, r24	; 36
		printf("Pul on \n");
     21a:	8e e5       	ldi	r24, 0x5E	; 94
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     222:	08 95       	ret
	}
	else                    // Si no (el motor debe apagarse):
	{
		TCCR0A &=~ (1<<5); // TCCR0A = 0b00x00011 ----  00x0 0011  Operación normal, salida PWM OC0B desactivada, PWM rápido
     224:	84 b5       	in	r24, 0x24	; 36
     226:	8f 7d       	andi	r24, 0xDF	; 223
     228:	84 bd       	out	0x24, r24	; 36
		rel_pulgar = count_enc_pul;
     22a:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <count_enc_pul>
     22e:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <count_enc_pul+0x1>
     232:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <rel_pulgar+0x1>
     236:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <rel_pulgar>
		printf("Pul off \n");
     23a:	86 e6       	ldi	r24, 0x66	; 102
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     242:	08 95       	ret

00000244 <ActivarPWM_Men>:
	}
}

void ActivarPWM_Men(uint8_t PWM, uint8_t encendido)
{
	OCR1A=PWM;				// Definir ancho de pulso
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     24a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	if (encendido==1)		// Si el motor debe encenderse o continuar encendido:
     24e:	61 30       	cpi	r22, 0x01	; 1
     250:	71 f4       	brne	.+28     	; 0x26e <ActivarPWM_Men+0x2a>
	{
		rel_menique = 0;
     252:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <rel_menique+0x1>
     256:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <rel_menique>
		TCCR1A |= (1<<7);   // TCCR0A = 0b10x00011 ----  10x0 0011  Modo no invertido, salida OC1A activada, PWM rápido
     25a:	e0 e8       	ldi	r30, 0x80	; 128
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	80 68       	ori	r24, 0x80	; 128
     262:	80 83       	st	Z, r24
	    printf("Men on \n");
     264:	8f e6       	ldi	r24, 0x6F	; 111
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     26c:	08 95       	ret
	}
	else                    // Si no (el motor debe apagarse):
	{
		TCCR1A &=~ (1<<7); // TCCR0A = 0b00x00011 ----  00x0 0011  Operación normal, salida PWM OC1A desactivada, PWM rápido
     26e:	e0 e8       	ldi	r30, 0x80	; 128
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	80 83       	st	Z, r24
		rel_menique = count_enc_men;
     278:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <count_enc_men>
     27c:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <count_enc_men+0x1>
     280:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <rel_menique+0x1>
     284:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <rel_menique>
		printf("Men off \n");
     288:	87 e7       	ldi	r24, 0x77	; 119
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     290:	08 95       	ret

00000292 <configADC>:
}


void configADC(void)
{
	ADMUX = 0b01000000;		// AVcc
     292:	80 e4       	ldi	r24, 0x40	; 64
     294:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b0000111;		// ADC apagado, preescalador=128 --> 16MHz/64=125KHz
     298:	87 e0       	ldi	r24, 0x07	; 7
     29a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0;				// Modo de carrera libre
     29e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     2a2:	08 95       	ret

000002a4 <ADC_GetData>:
	//DIDR0 |= ((1<<3)|(1<<4));		// Entrada digital (PC3/ADC3) y (PC4/ADC4) deshabilitada
}

int ADC_GetData(int canalADC)
{
	ADMUX &=~  0x0F;		// Limpiar selección de puertos ADC
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
     2aa:	90 7f       	andi	r25, 0xF0	; 240
     2ac:	90 83       	st	Z, r25
	ADMUX |=  canalADC;		// Selección de puerto ADC
     2ae:	90 81       	ld	r25, Z
     2b0:	89 2b       	or	r24, r25
     2b2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);	// Habilita ADC
     2b4:	ea e7       	ldi	r30, 0x7A	; 122
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	80 68       	ori	r24, 0x80	; 128
     2bc:	80 83       	st	Z, r24
	//	_delay_us(10);			// Tiempo de espera
	ADCSRA |= (1<<ADSC);	// Inicia conversión AD
     2be:	80 81       	ld	r24, Z
     2c0:	80 64       	ori	r24, 0x40	; 64
     2c2:	80 83       	st	Z, r24
	while (ADCSRA&(1<<ADSC));	// Esperar mientras se realiza la conversión
     2c4:	80 81       	ld	r24, Z
     2c6:	86 fd       	sbrc	r24, 6
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <ADC_GetData+0x20>
	ADCSRA &=~ (1<<ADEN);	// Desactiva el ADC
     2ca:	ea e7       	ldi	r30, 0x7A	; 122
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	8f 77       	andi	r24, 0x7F	; 127
     2d2:	80 83       	st	Z, r24
	return ADC;				// Retorna lectura del ADC
     2d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     2dc:	08 95       	ret

000002de <getSerialParams>:
}


void getSerialParams(void)
{
	if (newData == 1)
     2de:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <newData>
     2e2:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <newData+0x1>
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	09 f0       	breq	.+2      	; 0x2ec <getSerialParams+0xe>
     2ea:	24 c1       	rjmp	.+584    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
	{
		newData = 0;
     2ec:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <newData+0x1>
     2f0:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <newData>

		if(serialCode == 0)
     2f4:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     2f8:	81 11       	cpse	r24, r1
     2fa:	21 c0       	rjmp	.+66     	; 0x33e <getSerialParams+0x60>
		{
			dir_pul = 1;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <dir_pul>
			serial_pul = 1;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <serial_pul+0x1>
     30a:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <serial_pul>
			pulsos_pul = serialPulse;
     30e:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <serialPulse>
     312:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <serialPulse+0x1>
     316:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <pulsos_pul>
     31a:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <pulsos_pul+0x1>
			printf("Avanzar %d pulsos \n", pulsos_pul);
     31e:	9f 93       	push	r25
     320:	8f 93       	push	r24
     322:	80 e8       	ldi	r24, 0x80	; 128
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	9f 93       	push	r25
     328:	8f 93       	push	r24
     32a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
			printf("Abriendo pulgar \n");
     32e:	84 e9       	ldi	r24, 0x94	; 148
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
		}

		if(serialCode == 1)
     33e:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	a1 f4       	brne	.+40     	; 0x36e <getSerialParams+0x90>
		{
			dir_pul = 0;
     346:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <dir_pul>
			serial_pul = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <serial_pul+0x1>
     352:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <serial_pul>
			pulsos_pul = serialPulse;
     356:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <serialPulse>
     35a:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <serialPulse+0x1>
     35e:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <pulsos_pul+0x1>
     362:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <pulsos_pul>
			printf("Cerrando pulgar \n");
     366:	85 ea       	ldi	r24, 0xA5	; 165
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
		}

		if(serialCode == 2)
     36e:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	a9 f4       	brne	.+42     	; 0x3a0 <getSerialParams+0xc2>
		{
			dir_lat = 1;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <dir_lat>
			serial_lat = 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <serial_lat+0x1>
     384:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <serial_lat>
			pulsos_lat = serialPulse;
     388:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <serialPulse>
     38c:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <serialPulse+0x1>
     390:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <pulsos_lat+0x1>
     394:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <pulsos_lat>
			printf("Abriendo lat \n");
     398:	86 eb       	ldi	r24, 0xB6	; 182
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
		}

		if(serialCode == 3)
     3a0:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	a1 f4       	brne	.+40     	; 0x3d0 <getSerialParams+0xf2>
		{
			dir_lat = 0;
     3a8:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <dir_lat>
			serial_lat = 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <serial_lat+0x1>
     3b4:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <serial_lat>
			pulsos_lat = serialPulse;
     3b8:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <serialPulse>
     3bc:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <serialPulse+0x1>
     3c0:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <pulsos_lat+0x1>
     3c4:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <pulsos_lat>
			printf("Cerrando lat \n");
     3c8:	84 ec       	ldi	r24, 0xC4	; 196
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
		}
		
		if(serialCode == 4)
     3d0:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     3d4:	84 30       	cpi	r24, 0x04	; 4
     3d6:	a9 f4       	brne	.+42     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			dir_men = 1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <dir_men>
			serial_men = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <serial_men+0x1>
     3e6:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <serial_men>
			pulsos_men = serialPulse;
     3ea:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <serialPulse>
     3ee:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <serialPulse+0x1>
     3f2:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <pulsos_men+0x1>
     3f6:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <pulsos_men>
			printf("Abriendo men \n");
     3fa:	82 ed       	ldi	r24, 0xD2	; 210
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
		}

		if(serialCode == 5)
     402:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     406:	85 30       	cpi	r24, 0x05	; 5
     408:	a1 f4       	brne	.+40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		{
			dir_men = 0;
     40a:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <dir_men>
			serial_men = 1;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <serial_men+0x1>
     416:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <serial_men>
			pulsos_men = serialPulse;
     41a:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <serialPulse>
     41e:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <serialPulse+0x1>
     422:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <pulsos_men+0x1>
     426:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <pulsos_men>
			printf("Cerrando men \n");
     42a:	80 ee       	ldi	r24, 0xE0	; 224
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
		}
		
		if(serialCode == 6)
     432:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     436:	86 30       	cpi	r24, 0x06	; 6
     438:	f1 f4       	brne	.+60     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		{
			fsr_pul = ADC_GetData(FSRpin_pul);
     43a:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <FSRpin_pul>
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     444:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <fsr_pul>
     448:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <fsr_pul+0x1>
			printf("FSR pul: %d \n", fsr_pul);
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	8e ee       	ldi	r24, 0xEE	; 238
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	9f 93       	push	r25
     456:	8f 93       	push	r24
     458:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45c:	2f ef       	ldi	r18, 0xFF	; 255
     45e:	86 e7       	ldi	r24, 0x76	; 118
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	21 50       	subi	r18, 0x01	; 1
     464:	80 40       	sbci	r24, 0x00	; 0
     466:	90 40       	sbci	r25, 0x00	; 0
     468:	e1 f7       	brne	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     46c:	00 00       	nop
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
			_delay_ms(30);
		}
		
		if(serialCode == 7)
     476:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     47a:	87 30       	cpi	r24, 0x07	; 7
     47c:	f1 f4       	brne	.+60     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		{
			fsr_men = ADC_GetData(FSRpin_men);
     47e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_men>
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     488:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <fsr_men>
     48c:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <fsr_men+0x1>
			printf("FSR men: %d \n", fsr_men);
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	8c ef       	ldi	r24, 0xFC	; 252
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	86 e7       	ldi	r24, 0x76	; 118
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	80 40       	sbci	r24, 0x00	; 0
     4aa:	90 40       	sbci	r25, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4b0:	00 00       	nop
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
			_delay_ms(30);
		}
		
		if(serialCode == 8)
     4ba:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	f1 f4       	brne	.+60     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		{
			ir_pul = ADC_GetData(IRpin);
     4c2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <IRpin>
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     4cc:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <ir_pul>
     4d0:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <ir_pul+0x1>
			printf("IR pul: %d \n", ir_pul);
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	8a e0       	ldi	r24, 0x0A	; 10
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	9f 93       	push	r25
     4de:	8f 93       	push	r24
     4e0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
     4e4:	2f ef       	ldi	r18, 0xFF	; 255
     4e6:	86 e7       	ldi	r24, 0x76	; 118
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	21 50       	subi	r18, 0x01	; 1
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	90 40       	sbci	r25, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f4:	00 00       	nop
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
			_delay_ms(30);
		}
		
		if(serialCode == 9)
     4fe:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
     502:	89 30       	cpi	r24, 0x09	; 9
     504:	b9 f4       	brne	.+46     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
		{
			iniciar_sis = 0;
     506:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <iniciar_sis>
			printf("Inicio %d \n", iniciar_sis);
     50a:	1f 92       	push	r1
     50c:	1f 92       	push	r1
     50e:	87 e1       	ldi	r24, 0x17	; 23
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	86 e7       	ldi	r24, 0x76	; 118
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	21 50       	subi	r18, 0x01	; 1
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	90 40       	sbci	r25, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     528:	00 c0       	rjmp	.+0      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     52a:	00 00       	nop
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	08 95       	ret

00000536 <configInterrupt>:



void configInterrupt(void)
{
	EICRA |= (1<<ISC00);    // INT0 configurado = Flanco de subida (11) // Cualquier flanco (01) // ((1<<ISC01)|(1<<ISC00))
     536:	e9 e6       	ldi	r30, 0x69	; 105
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	81 60       	ori	r24, 0x01	; 1
     53e:	80 83       	st	Z, r24
	EICRA &=~ (1<<ISC01);
     540:	80 81       	ld	r24, Z
     542:	8d 7f       	andi	r24, 0xFD	; 253
     544:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);		// INT0 activado
     546:	e8 9a       	sbi	0x1d, 0	; 29
	
	EICRA |= (1<<ISC10);    // INT1 configurado = Flanco de subida (11) // Cualquier flanco (01) // ((1<<ISC11)|(1<<ISC10))
     548:	80 81       	ld	r24, Z
     54a:	84 60       	ori	r24, 0x04	; 4
     54c:	80 83       	st	Z, r24
	EICRA &=~ (1<<ISC11);
     54e:	80 81       	ld	r24, Z
     550:	87 7f       	andi	r24, 0xF7	; 247
     552:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1);		// INT1 activado
     554:	e9 9a       	sbi	0x1d, 1	; 29
	
	PCICR |= (1 << PCIE2);		 // Activa PCIE2 para activar grupo PCMSK2
     556:	e8 e6       	ldi	r30, 0x68	; 104
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	84 60       	ori	r24, 0x04	; 4
     55e:	80 83       	st	Z, r24
	PCMSK2 |= ((1 << PCINT20));  // Configura PCINT20 (Encoder meñique) para activar interrupciones PCINTx
     560:	ad e6       	ldi	r26, 0x6D	; 109
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	8c 91       	ld	r24, X
     566:	80 61       	ori	r24, 0x10	; 16
     568:	8c 93       	st	X, r24
	
	PCICR |= (1 << PCIE1);		 // Activa PCIE1 para activar grupo PCMSK1
     56a:	80 81       	ld	r24, Z
     56c:	82 60       	ori	r24, 0x02	; 2
     56e:	80 83       	st	Z, r24
	PCMSK1 |= ((1 << PCINT11));  // Configura PCINT11 (FC) para activar interrupciones PCINTx
     570:	ec e6       	ldi	r30, 0x6C	; 108
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	88 60       	ori	r24, 0x08	; 8
     578:	80 83       	st	Z, r24
     57a:	08 95       	ret

0000057c <calibrar>:
     57c:	2f ef       	ldi	r18, 0xFF	; 255
     57e:	84 e3       	ldi	r24, 0x34	; 52
     580:	9c e0       	ldi	r25, 0x0C	; 12
     582:	21 50       	subi	r18, 0x01	; 1
     584:	80 40       	sbci	r24, 0x00	; 0
     586:	90 40       	sbci	r25, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <calibrar+0x6>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <calibrar+0x10>
     58c:	00 00       	nop

void calibrar(void)
{
	//PORTC &= ~ (1<<pin_pul_listo);  // Poner en bajo señal de pulgar listo
	_delay_ms(250);
	printf("Iniciar calib \n");
     58e:	83 e2       	ldi	r24, 0x23	; 35
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     596:	2f ef       	ldi	r18, 0xFF	; 255
     598:	84 e3       	ldi	r24, 0x34	; 52
     59a:	9c e0       	ldi	r25, 0x0C	; 12
     59c:	21 50       	subi	r18, 0x01	; 1
     59e:	80 40       	sbci	r24, 0x00	; 0
     5a0:	90 40       	sbci	r25, 0x00	; 0
     5a2:	e1 f7       	brne	.-8      	; 0x59c <calibrar+0x20>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <calibrar+0x2a>
     5a6:	00 00       	nop
	_delay_ms(250);
	ir_pul = ADC_GetData(IRpin);
     5a8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <IRpin>
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     5b2:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <ir_pul+0x1>
     5b6:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <ir_pul>
     5ba:	2f ef       	ldi	r18, 0xFF	; 255
     5bc:	84 e3       	ldi	r24, 0x34	; 52
     5be:	9c e0       	ldi	r25, 0x0C	; 12
     5c0:	21 50       	subi	r18, 0x01	; 1
     5c2:	80 40       	sbci	r24, 0x00	; 0
     5c4:	90 40       	sbci	r25, 0x00	; 0
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <calibrar+0x44>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <calibrar+0x4e>
     5ca:	00 00       	nop
	_delay_ms(250);
	pulsos_pul = 3000;				// Para evitar que interrupción de encoder apague pwm
     5cc:	88 eb       	ldi	r24, 0xB8	; 184
     5ce:	9b e0       	ldi	r25, 0x0B	; 11
     5d0:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <pulsos_pul+0x1>
     5d4:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <pulsos_pul>
     5d8:	2f ef       	ldi	r18, 0xFF	; 255
     5da:	84 e3       	ldi	r24, 0x34	; 52
     5dc:	9c e0       	ldi	r25, 0x0C	; 12
     5de:	21 50       	subi	r18, 0x01	; 1
     5e0:	80 40       	sbci	r24, 0x00	; 0
     5e2:	90 40       	sbci	r25, 0x00	; 0
     5e4:	e1 f7       	brne	.-8      	; 0x5de <calibrar+0x62>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <calibrar+0x6c>
     5e8:	00 00       	nop
	_delay_ms(250);
	if (ir_pul < 245)   // 480 - valor original
     5ea:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <ir_pul>
     5ee:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <ir_pul+0x1>
     5f2:	85 3f       	cpi	r24, 0xF5	; 245
     5f4:	91 05       	cpc	r25, r1
     5f6:	0c f0       	brlt	.+2      	; 0x5fa <calibrar+0x7e>
     5f8:	5e c0       	rjmp	.+188    	; 0x6b6 <calibrar+0x13a>
	{
		dir_pul = 0;
     5fa:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <dir_pul>
		pwm_pul = 100;
     5fe:	84 e6       	ldi	r24, 0x64	; 100
     600:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <pwm_pul>
		onoff_pul = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <onoff_pul>
		PORTD &= ~(1<<dirpin_pul);
     60a:	2b b1       	in	r18, 0x0b	; 11
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <dirpin_pul>
     614:	02 c0       	rjmp	.+4      	; 0x61a <calibrar+0x9e>
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	0a 94       	dec	r0
     61c:	e2 f7       	brpl	.-8      	; 0x616 <calibrar+0x9a>
     61e:	80 95       	com	r24
     620:	82 23       	and	r24, r18
     622:	8b b9       	out	0x0b, r24	; 11
     624:	8f e3       	ldi	r24, 0x3F	; 63
     626:	9c e9       	ldi	r25, 0x9C	; 156
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <calibrar+0xac>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <calibrar+0xb2>
     62e:	00 00       	nop
		_delay_ms(10);
		ActivarPWM_Pul(pwm_pul, onoff_pul);
     630:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
     634:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
     638:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
     63c:	8f e3       	ldi	r24, 0x3F	; 63
     63e:	9c e9       	ldi	r25, 0x9C	; 156
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <calibrar+0xc4>
     644:	00 c0       	rjmp	.+0      	; 0x646 <calibrar+0xca>
     646:	00 00       	nop
     648:	04 c0       	rjmp	.+8      	; 0x652 <calibrar+0xd6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64a:	9a e6       	ldi	r25, 0x6A	; 106
     64c:	9a 95       	dec	r25
     64e:	f1 f7       	brne	.-4      	; 0x64c <calibrar+0xd0>
     650:	00 c0       	rjmp	.+0      	; 0x652 <calibrar+0xd6>
		_delay_ms(10);
		while((ADC_GetData(IRpin)) <= 245 )
     652:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <IRpin>
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     65c:	86 3f       	cpi	r24, 0xF6	; 246
     65e:	91 05       	cpc	r25, r1
     660:	a4 f3       	brlt	.-24     	; 0x64a <calibrar+0xce>
		{
			_delay_us(20);
		}
		ActivarPWM_Pul(0, 0);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
		pwm_pul = 0;
     66a:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <pwm_pul>
		onoff_pul = 0;
     66e:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <onoff_pul>
		pulgar_listo = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <pulgar_listo>
		
		PORTC |= (1<<pin_pul_listo);	// Poner pin en 1
     678:	28 b1       	in	r18, 0x08	; 8
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <pin_pul_listo>
     682:	02 c0       	rjmp	.+4      	; 0x688 <calibrar+0x10c>
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <calibrar+0x108>
     68c:	82 2b       	or	r24, r18
     68e:	88 b9       	out	0x08, r24	; 8
		count_enc_pul = 0;
     690:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <count_enc_pul+0x1>
     694:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <count_enc_pul>
		pulsos_pul = 0;         // Para evitar que interrupción de encoder apague pwm - resetear a 0
     698:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <pulsos_pul+0x1>
     69c:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <pulsos_pul>
		printf("Pul listo \n");
     6a0:	82 e3       	ldi	r24, 0x32	; 50
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a8:	8f e1       	ldi	r24, 0x1F	; 31
     6aa:	9e e4       	ldi	r25, 0x4E	; 78
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <calibrar+0x130>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <calibrar+0x136>
     6b2:	00 00       	nop
     6b4:	10 c0       	rjmp	.+32     	; 0x6d6 <calibrar+0x15a>
		_delay_ms(5);
	}
	else
	{
		PORTC |= (1<<pin_pul_listo);
     6b6:	28 b1       	in	r18, 0x08	; 8
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <pin_pul_listo>
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <calibrar+0x14a>
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	0a 94       	dec	r0
     6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <calibrar+0x146>
     6ca:	82 2b       	or	r24, r18
     6cc:	88 b9       	out	0x08, r24	; 8
		printf("Pul listo \n");
     6ce:	82 e3       	ldi	r24, 0x32	; 50
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
	}
	
	fc_lat = PINC & (1 << FC_pin); 
     6d6:	26 b1       	in	r18, 0x06	; 6
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <FC_pin>
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <calibrar+0x16a>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	0a 94       	dec	r0
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <calibrar+0x166>
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	82 23       	and	r24, r18
     6ee:	93 23       	and	r25, r19
     6f0:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <fc_lat+0x1>
     6f4:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <fc_lat>
	pulsos_lat = 7000; // Para evitar que interrupción apague pwm
     6f8:	28 e5       	ldi	r18, 0x58	; 88
     6fa:	3b e1       	ldi	r19, 0x1B	; 27
     6fc:	30 93 0b 04 	sts	0x040B, r19	; 0x80040b <pulsos_lat+0x1>
     700:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <pulsos_lat>
	if (fc_lat == 0)
     704:	89 2b       	or	r24, r25
     706:	e1 f5       	brne	.+120    	; 0x780 <calibrar+0x204>
	{
		dir_lat = 0;
     708:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <dir_lat>
		pwm_lat = 110;
     70c:	8e e6       	ldi	r24, 0x6E	; 110
     70e:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <pwm_lat>
		onoff_lat = 1;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <onoff_lat>
		PORTB &= ~(1 << dirpin_lat);
     718:	25 b1       	in	r18, 0x05	; 5
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	00 90 32 04 	lds	r0, 0x0432	; 0x800432 <dirpin_lat>
     722:	02 c0       	rjmp	.+4      	; 0x728 <calibrar+0x1ac>
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	0a 94       	dec	r0
     72a:	e2 f7       	brpl	.-8      	; 0x724 <calibrar+0x1a8>
     72c:	80 95       	com	r24
     72e:	82 23       	and	r24, r18
     730:	85 b9       	out	0x05, r24	; 5
		ActivarPWM_Lat(pwm_lat, onoff_lat);
     732:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
     736:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
     73a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
		
		while((PINC & (1 << PINC3)) == 0)
     73e:	33 99       	sbic	0x06, 3	; 6
     740:	05 c0       	rjmp	.+10     	; 0x74c <calibrar+0x1d0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     742:	90 ea       	ldi	r25, 0xA0	; 160
     744:	9a 95       	dec	r25
     746:	f1 f7       	brne	.-4      	; 0x744 <calibrar+0x1c8>
     748:	33 9b       	sbis	0x06, 3	; 6
     74a:	fb cf       	rjmp	.-10     	; 0x742 <calibrar+0x1c6>
		{
			// La interrupción del final de carrera se encarga de apagar motor
			_delay_us(30);
		}
		ActivarPWM_Lat(0, 0);
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
		pwm_pul = 0;
     754:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <pwm_pul>
		onoff_pul = 0;
     758:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <onoff_pul>
		
		count_enc_lat = 0;
     75c:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <count_enc_lat+0x1>
     760:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <count_enc_lat>
		pulsos_lat = 0;         // Para evitar que interrupción de encoder apague pwm - resetear a 0
     764:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <pulsos_lat+0x1>
     768:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <pulsos_lat>
		printf("Lat listo \n");
     76c:	8d e3       	ldi	r24, 0x3D	; 61
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     774:	8f e1       	ldi	r24, 0x1F	; 31
     776:	9e e4       	ldi	r25, 0x4E	; 78
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <calibrar+0x1fc>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <calibrar+0x202>
     77e:	00 00       	nop
		_delay_ms(5);
	}
	
	fsr_men = ADC_GetData(FSRpin_men);
     780:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_men>
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     78a:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <fsr_men+0x1>
     78e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <fsr_men>
	pulsos_men = 3000;         // Para evitar que interrupción de encoder apague pwm 
     792:	28 eb       	ldi	r18, 0xB8	; 184
     794:	3b e0       	ldi	r19, 0x0B	; 11
     796:	30 93 09 04 	sts	0x0409, r19	; 0x800409 <pulsos_men+0x1>
     79a:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <pulsos_men>
	if (fsr_men <= 30)
     79e:	4f 97       	sbiw	r24, 0x1f	; 31
     7a0:	e4 f5       	brge	.+120    	; 0x81a <calibrar+0x29e>
	{
		dir_men = 0;
     7a2:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <dir_men>
		pwm_men = 90;
     7a6:	8a e5       	ldi	r24, 0x5A	; 90
     7a8:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <pwm_men>
		onoff_men = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <onoff_men>
		PORTB &= ~(1 << dirpin_men);
     7b2:	25 b1       	in	r18, 0x05	; 5
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_men>
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <calibrar+0x246>
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	0a 94       	dec	r0
     7c4:	e2 f7       	brpl	.-8      	; 0x7be <calibrar+0x242>
     7c6:	80 95       	com	r24
     7c8:	82 23       	and	r24, r18
     7ca:	85 b9       	out	0x05, r24	; 5
		ActivarPWM_Men(pwm_men, onoff_men);
     7cc:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
     7d0:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
     7d4:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
		
		while(ADC_GetData(FSRpin_men) <= 30)
     7d8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_men>
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     7e2:	4f 97       	sbiw	r24, 0x1f	; 31
     7e4:	cc f3       	brlt	.-14     	; 0x7d8 <calibrar+0x25c>
		{
	
		}
		
		ActivarPWM_Men(0, 0);
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
		pwm_men = 0;
     7ee:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <pwm_men>
		onoff_men = 0;
     7f2:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <onoff_men>
		count_enc_men = 0;
     7f6:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <count_enc_men+0x1>
     7fa:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <count_enc_men>
		pulsos_men = 0;         // Para evitar que interrupción de encoder apague pwm - resetear a 0
     7fe:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <pulsos_men+0x1>
     802:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <pulsos_men>
		printf("Men listo \n");
     806:	88 e4       	ldi	r24, 0x48	; 72
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     80e:	8f e1       	ldi	r24, 0x1F	; 31
     810:	9e e4       	ldi	r25, 0x4E	; 78
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <calibrar+0x296>
     816:	00 c0       	rjmp	.+0      	; 0x818 <calibrar+0x29c>
     818:	00 00       	nop
		_delay_ms(5);
	}
	
	abs_lateral = 0;
     81a:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <abs_lateral+0x1>
     81e:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <abs_lateral>
	abs_pulgar = 0;
     822:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <abs_pulgar+0x1>
     826:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <abs_pulgar>
	abs_menique = 0;
     82a:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <abs_menique+0x1>
     82e:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <abs_menique>
	
	pul_ready = 0;
     832:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <pul_ready>
	lat_ready = 0;
     836:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <lat_ready>
	men_ready = 0;
     83a:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <men_ready>
     83e:	08 95       	ret

00000840 <getIDMov>:

*/


int getIDMov(void)
{
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
	uint8_t id_move = 0;
	
	// Obtiene los estados de los pines de control
	if (((PINB & (1 << PINB3)) >> PINB3) == 1)
	{
		clave_mov[0] = 1;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	1b 9b       	sbis	0x03, 3	; 3
     848:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		clave_mov[0] = 0;
	}
	
	if (((PINB & (1 << PINB4)) >> PINB4) == 1)
     84a:	1c 99       	sbic	0x03, 4	; 3
     84c:	02 c0       	rjmp	.+4      	; 0x852 <getIDMov+0x12>
	{
		clave_mov[1] = 2;
	}
	else
	{
		clave_mov[1] = 0;
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	01 c0       	rjmp	.+2      	; 0x854 <getIDMov+0x14>
		clave_mov[0] = 0;
	}
	
	if (((PINB & (1 << PINB4)) >> PINB4) == 1)
	{
		clave_mov[1] = 2;
     852:	22 e0       	ldi	r18, 0x02	; 2
	else
	{
		clave_mov[1] = 0;
	}
	
	if (((PINB & (1 << PINB5)) >> PINB5) == 1)
     854:	1d 99       	sbic	0x03, 5	; 3
     856:	02 c0       	rjmp	.+4      	; 0x85c <getIDMov+0x1c>
	{
		clave_mov[2] = 4;
	}
	else
	{
		clave_mov[2] = 0;
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	01 c0       	rjmp	.+2      	; 0x85e <getIDMov+0x1e>
		clave_mov[1] = 0;
	}
	
	if (((PINB & (1 << PINB5)) >> PINB5) == 1)
	{
		clave_mov[2] = 4;
     85c:	94 e0       	ldi	r25, 0x04	; 4
	{
		clave_mov[2] = 0;
	}
	
	id_move = clave_mov[0] + clave_mov[1] + clave_mov[2];
	printf("ID Mov: %d \n", id_move);
     85e:	82 0f       	add	r24, r18
     860:	89 0f       	add	r24, r25
     862:	c8 2f       	mov	r28, r24
     864:	d0 e0       	ldi	r29, 0x00	; 0
     866:	1f 92       	push	r1
     868:	8f 93       	push	r24
     86a:	83 e5       	ldi	r24, 0x53	; 83
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	9f 93       	push	r25
     870:	8f 93       	push	r24
     872:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>

	return(id_move);
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
}
     87e:	ce 01       	movw	r24, r28
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <getPulsosMov>:


void getPulsosMov(void)
{
	
	if (abs_pulgar < pulgar[id_mov])
     886:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <id_mov>
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ec 5d       	subi	r30, 0xDC	; 220
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	80 81       	ld	r24, Z
     896:	91 81       	ldd	r25, Z+1	; 0x01
     898:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <abs_pulgar>
     89c:	30 91 26 04 	lds	r19, 0x0426	; 0x800426 <abs_pulgar+0x1>
     8a0:	28 17       	cp	r18, r24
     8a2:	39 07       	cpc	r19, r25
     8a4:	fc f4       	brge	.+62     	; 0x8e4 <getPulsosMov+0x5e>
	{
		pulsos_pul = pulgar[id_mov] - abs_pulgar;
     8a6:	82 1b       	sub	r24, r18
     8a8:	93 0b       	sbc	r25, r19
     8aa:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <pulsos_pul+0x1>
     8ae:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <pulsos_pul>
		dir_pul = 1;
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	20 93 34 04 	sts	0x0434, r18	; 0x800434 <dir_pul>
		signo_pul = 1;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <signo_pul+0x1>
     8c0:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <signo_pul>
		pwm_pul = 100;
     8c4:	34 e6       	ldi	r19, 0x64	; 100
     8c6:	30 93 37 04 	sts	0x0437, r19	; 0x800437 <pwm_pul>
		onoff_pul = 1;
     8ca:	20 93 3a 04 	sts	0x043A, r18	; 0x80043a <onoff_pul>
		PORTD |= (1<<dirpin_pul);	// Dirección del movimiento
     8ce:	2b b1       	in	r18, 0x0b	; 11
     8d0:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <dirpin_pul>
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <getPulsosMov+0x54>
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	0a 94       	dec	r0
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <getPulsosMov+0x50>
     8de:	82 2b       	or	r24, r18
     8e0:	8b b9       	out	0x0b, r24	; 11
     8e2:	45 c0       	rjmp	.+138    	; 0x96e <__stack+0x6f>
	}
	else if (abs_pulgar > pulgar[id_mov])
     8e4:	82 17       	cp	r24, r18
     8e6:	93 07       	cpc	r25, r19
     8e8:	44 f5       	brge	.+80     	; 0x93a <__stack+0x3b>
	{
		pulsos_pul = abs(pulgar[id_mov] - abs_pulgar);
     8ea:	82 1b       	sub	r24, r18
     8ec:	93 0b       	sbc	r25, r19
     8ee:	9c 01       	movw	r18, r24
     8f0:	22 f4       	brpl	.+8      	; 0x8fa <getPulsosMov+0x74>
     8f2:	22 27       	eor	r18, r18
     8f4:	33 27       	eor	r19, r19
     8f6:	28 1b       	sub	r18, r24
     8f8:	39 0b       	sbc	r19, r25
     8fa:	30 93 0d 04 	sts	0x040D, r19	; 0x80040d <pulsos_pul+0x1>
     8fe:	20 93 0c 04 	sts	0x040C, r18	; 0x80040c <pulsos_pul>
		dir_pul = 0;
     902:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <dir_pul>
		signo_pul = -1;
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	9f ef       	ldi	r25, 0xFF	; 255
     90a:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <signo_pul+0x1>
     90e:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <signo_pul>
		pwm_pul = 100;
     912:	84 e6       	ldi	r24, 0x64	; 100
     914:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <pwm_pul>
		onoff_pul = 1;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <onoff_pul>
		PORTD &= ~(1<<dirpin_pul);		// Dirección del movimiento
     91e:	2b b1       	in	r18, 0x0b	; 11
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <dirpin_pul>
     928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0x2f>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	0a 94       	dec	r0
     930:	e2 f7       	brpl	.-8      	; 0x92a <__stack+0x2b>
     932:	80 95       	com	r24
     934:	82 23       	and	r24, r18
     936:	8b b9       	out	0x0b, r24	; 11
     938:	1a c0       	rjmp	.+52     	; 0x96e <__stack+0x6f>
	}
	else if (abs_pulgar == pulgar[id_mov])
     93a:	82 17       	cp	r24, r18
     93c:	93 07       	cpc	r25, r19
     93e:	b9 f4       	brne	.+46     	; 0x96e <__stack+0x6f>
	{
		pulsos_pul = 0;
     940:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <pulsos_pul+0x1>
     944:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <pulsos_pul>
		dir_pul = 0;
     948:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <dir_pul>
		pwm_pul = 0;
     94c:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <pwm_pul>
		onoff_pul = 0;
     950:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <onoff_pul>
		PORTD &= ~(1<<dirpin_pul);		// Dirección del movimiento
     954:	2b b1       	in	r18, 0x0b	; 11
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <dirpin_pul>
     95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	0a 94       	dec	r0
     966:	e2 f7       	brpl	.-8      	; 0x960 <__stack+0x61>
     968:	80 95       	com	r24
     96a:	82 23       	and	r24, r18
     96c:	8b b9       	out	0x0b, r24	; 11
	}
	
	
	if (abs_lateral < lateral[id_mov])
     96e:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <id_mov>
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	ee 0f       	add	r30, r30
     976:	ff 1f       	adc	r31, r31
     978:	ee 5e       	subi	r30, 0xEE	; 238
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	20 91 27 04 	lds	r18, 0x0427	; 0x800427 <abs_lateral>
     984:	30 91 28 04 	lds	r19, 0x0428	; 0x800428 <abs_lateral+0x1>
     988:	28 17       	cp	r18, r24
     98a:	39 07       	cpc	r19, r25
     98c:	fc f4       	brge	.+62     	; 0x9cc <__stack+0xcd>
	{
		pulsos_lat = lateral[id_mov] - abs_lateral;
     98e:	82 1b       	sub	r24, r18
     990:	93 0b       	sbc	r25, r19
     992:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <pulsos_lat+0x1>
     996:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <pulsos_lat>
		dir_lat = 1;
     99a:	21 e0       	ldi	r18, 0x01	; 1
     99c:	20 93 35 04 	sts	0x0435, r18	; 0x800435 <dir_lat>
		signo_lat = 1;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <signo_lat+0x1>
     9a8:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <signo_lat>
		pwm_lat = 150;
     9ac:	36 e9       	ldi	r19, 0x96	; 150
     9ae:	30 93 38 04 	sts	0x0438, r19	; 0x800438 <pwm_lat>
		onoff_lat = 1;
     9b2:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <onoff_lat>
		PORTB |= (1<<dirpin_lat);	// Dirección del movimiento
     9b6:	25 b1       	in	r18, 0x05	; 5
     9b8:	00 90 32 04 	lds	r0, 0x0432	; 0x800432 <dirpin_lat>
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__stack+0xc3>
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	0a 94       	dec	r0
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <__stack+0xbf>
     9c6:	82 2b       	or	r24, r18
     9c8:	85 b9       	out	0x05, r24	; 5
     9ca:	45 c0       	rjmp	.+138    	; 0xa56 <__stack+0x157>
	}
	else if (abs_lateral > lateral[id_mov])
     9cc:	82 17       	cp	r24, r18
     9ce:	93 07       	cpc	r25, r19
     9d0:	44 f5       	brge	.+80     	; 0xa22 <__stack+0x123>
	{
		pulsos_lat = abs(lateral[id_mov] - abs_lateral);
     9d2:	82 1b       	sub	r24, r18
     9d4:	93 0b       	sbc	r25, r19
     9d6:	9c 01       	movw	r18, r24
     9d8:	22 f4       	brpl	.+8      	; 0x9e2 <__stack+0xe3>
     9da:	22 27       	eor	r18, r18
     9dc:	33 27       	eor	r19, r19
     9de:	28 1b       	sub	r18, r24
     9e0:	39 0b       	sbc	r19, r25
     9e2:	30 93 0b 04 	sts	0x040B, r19	; 0x80040b <pulsos_lat+0x1>
     9e6:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <pulsos_lat>
		dir_lat = 0;
     9ea:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <dir_lat>
		signo_lat = -1;
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	9f ef       	ldi	r25, 0xFF	; 255
     9f2:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <signo_lat+0x1>
     9f6:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <signo_lat>
		pwm_lat = 150;
     9fa:	86 e9       	ldi	r24, 0x96	; 150
     9fc:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <pwm_lat>
		onoff_lat = 1;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <onoff_lat>
		PORTB &= ~(1<<dirpin_lat);		// Dirección del movimiento
     a06:	25 b1       	in	r18, 0x05	; 5
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	00 90 32 04 	lds	r0, 0x0432	; 0x800432 <dirpin_lat>
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <__stack+0x117>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	0a 94       	dec	r0
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <__stack+0x113>
     a1a:	80 95       	com	r24
     a1c:	82 23       	and	r24, r18
     a1e:	85 b9       	out	0x05, r24	; 5
     a20:	1a c0       	rjmp	.+52     	; 0xa56 <__stack+0x157>
	}
	else if (abs_lateral == lateral[id_mov])
     a22:	82 17       	cp	r24, r18
     a24:	93 07       	cpc	r25, r19
     a26:	b9 f4       	brne	.+46     	; 0xa56 <__stack+0x157>
	{
		pulsos_lat = 0;
     a28:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <pulsos_lat+0x1>
     a2c:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <pulsos_lat>
		dir_lat = 0;
     a30:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <dir_lat>
		pwm_lat = 0;
     a34:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <pwm_lat>
		onoff_lat = 0;
     a38:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <onoff_lat>
		PORTB &= ~(1<<dirpin_lat);		// Dirección del movimiento
     a3c:	25 b1       	in	r18, 0x05	; 5
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	00 90 32 04 	lds	r0, 0x0432	; 0x800432 <dirpin_lat>
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <__stack+0x14d>
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	0a 94       	dec	r0
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <__stack+0x149>
     a50:	80 95       	com	r24
     a52:	82 23       	and	r24, r18
     a54:	85 b9       	out	0x05, r24	; 5
	}
	
	if (abs_menique < menique[id_mov])
     a56:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <id_mov>
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	e0 50       	subi	r30, 0x00	; 0
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	80 81       	ld	r24, Z
     a66:	91 81       	ldd	r25, Z+1	; 0x01
     a68:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <abs_menique>
     a6c:	30 91 24 04 	lds	r19, 0x0424	; 0x800424 <abs_menique+0x1>
     a70:	28 17       	cp	r18, r24
     a72:	39 07       	cpc	r19, r25
     a74:	fc f4       	brge	.+62     	; 0xab4 <__stack+0x1b5>
	{
		pulsos_men = menique[id_mov] - abs_menique;
     a76:	82 1b       	sub	r24, r18
     a78:	93 0b       	sbc	r25, r19
     a7a:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <pulsos_men+0x1>
     a7e:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <pulsos_men>
		dir_men = 1;
     a82:	21 e0       	ldi	r18, 0x01	; 1
     a84:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <dir_men>
		signo_men = 1;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <signo_men+0x1>
     a90:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <signo_men>
		pwm_men = 100;
     a94:	34 e6       	ldi	r19, 0x64	; 100
     a96:	30 93 36 04 	sts	0x0436, r19	; 0x800436 <pwm_men>
		onoff_men = 1;
     a9a:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <onoff_men>
		PORTB |= (1<<dirpin_men);	// Dirección del movimiento
     a9e:	25 b1       	in	r18, 0x05	; 5
     aa0:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_men>
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <__stack+0x1ab>
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	0a 94       	dec	r0
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <__stack+0x1a7>
     aae:	82 2b       	or	r24, r18
     ab0:	85 b9       	out	0x05, r24	; 5
     ab2:	45 c0       	rjmp	.+138    	; 0xb3e <__stack+0x23f>
	}
	else if (abs_menique > menique[id_mov])
     ab4:	82 17       	cp	r24, r18
     ab6:	93 07       	cpc	r25, r19
     ab8:	44 f5       	brge	.+80     	; 0xb0a <__stack+0x20b>
	{
		pulsos_men = abs(menique[id_mov] - abs_menique);
     aba:	82 1b       	sub	r24, r18
     abc:	93 0b       	sbc	r25, r19
     abe:	9c 01       	movw	r18, r24
     ac0:	22 f4       	brpl	.+8      	; 0xaca <__stack+0x1cb>
     ac2:	22 27       	eor	r18, r18
     ac4:	33 27       	eor	r19, r19
     ac6:	28 1b       	sub	r18, r24
     ac8:	39 0b       	sbc	r19, r25
     aca:	30 93 09 04 	sts	0x0409, r19	; 0x800409 <pulsos_men+0x1>
     ace:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <pulsos_men>
		dir_men = 0;
     ad2:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <dir_men>
		signo_men = -1;
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
     ada:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <signo_men+0x1>
     ade:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <signo_men>
		pwm_men = 100;
     ae2:	84 e6       	ldi	r24, 0x64	; 100
     ae4:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <pwm_men>
		onoff_men = 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <onoff_men>
		PORTB &= ~(1<<dirpin_men);		// Dirección del movimiento
     aee:	25 b1       	in	r18, 0x05	; 5
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_men>
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__stack+0x1ff>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	0a 94       	dec	r0
     b00:	e2 f7       	brpl	.-8      	; 0xafa <__stack+0x1fb>
     b02:	80 95       	com	r24
     b04:	82 23       	and	r24, r18
     b06:	85 b9       	out	0x05, r24	; 5
     b08:	1a c0       	rjmp	.+52     	; 0xb3e <__stack+0x23f>
	}
	else if (abs_menique == menique[id_mov])
     b0a:	82 17       	cp	r24, r18
     b0c:	93 07       	cpc	r25, r19
     b0e:	b9 f4       	brne	.+46     	; 0xb3e <__stack+0x23f>
	{
		pulsos_men = 0;
     b10:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <pulsos_men+0x1>
     b14:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <pulsos_men>
		dir_men = 0;
     b18:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <dir_men>
		pwm_men = 0;
     b1c:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <pwm_men>
		onoff_men = 0;
     b20:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <onoff_men>
		PORTB &= ~(1<<dirpin_men);		// Dirección del movimiento
     b24:	25 b1       	in	r18, 0x05	; 5
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_men>
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <__stack+0x235>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	0a 94       	dec	r0
     b36:	e2 f7       	brpl	.-8      	; 0xb30 <__stack+0x231>
     b38:	80 95       	com	r24
     b3a:	82 23       	and	r24, r18
     b3c:	85 b9       	out	0x05, r24	; 5
	}
	
	printf("PP: %d \n", pulsos_pul);
     b3e:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <pulsos_pul+0x1>
     b42:	8f 93       	push	r24
     b44:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsos_pul>
     b48:	8f 93       	push	r24
     b4a:	80 e6       	ldi	r24, 0x60	; 96
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	9f 93       	push	r25
     b50:	8f 93       	push	r24
     b52:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
     b56:	8f e1       	ldi	r24, 0x1F	; 31
     b58:	9e e4       	ldi	r25, 0x4E	; 78
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <__stack+0x25b>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <__stack+0x261>
     b60:	00 00       	nop
	_delay_ms(5);
	printf("PL: %d \n", pulsos_lat);
     b62:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <pulsos_lat+0x1>
     b66:	8f 93       	push	r24
     b68:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <pulsos_lat>
     b6c:	8f 93       	push	r24
     b6e:	89 e6       	ldi	r24, 0x69	; 105
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	9f 93       	push	r25
     b74:	8f 93       	push	r24
     b76:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
     b7a:	8f e1       	ldi	r24, 0x1F	; 31
     b7c:	9e e4       	ldi	r25, 0x4E	; 78
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <__stack+0x27f>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <__stack+0x285>
     b84:	00 00       	nop
	_delay_ms(5);
	printf("PM: %d \n", pulsos_men);
     b86:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <pulsos_men+0x1>
     b8a:	8f 93       	push	r24
     b8c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <pulsos_men>
     b90:	8f 93       	push	r24
     b92:	82 e7       	ldi	r24, 0x72	; 114
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	9f 93       	push	r25
     b98:	8f 93       	push	r24
     b9a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
     b9e:	8f e1       	ldi	r24, 0x1F	; 31
     ba0:	9e e4       	ldi	r25, 0x4E	; 78
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <__stack+0x2a3>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <__stack+0x2a9>
     ba8:	00 00       	nop
	_delay_ms(5);
	
	pul_ready = 0;
     baa:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <pul_ready>
	lat_ready = 0;
     bae:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <lat_ready>
	men_ready = 0;
     bb2:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <men_ready>
}
     bb6:	8d b7       	in	r24, 0x3d	; 61
     bb8:	9e b7       	in	r25, 0x3e	; 62
     bba:	0c 96       	adiw	r24, 0x0c	; 12
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	9e bf       	out	0x3e, r25	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	8d bf       	out	0x3d, r24	; 61
     bc6:	08 95       	ret

00000bc8 <pulgarCero>:

void pulgarCero(void)
{
	ir_pul = ADC_GetData(IRpin);
     bc8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <IRpin>
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     bd2:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <ir_pul+0x1>
     bd6:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <ir_pul>
	pulsos_pul = 1000;				// Para evitar que interrupción de encoder apague pwm
     bda:	28 ee       	ldi	r18, 0xE8	; 232
     bdc:	33 e0       	ldi	r19, 0x03	; 3
     bde:	30 93 0d 04 	sts	0x040D, r19	; 0x80040d <pulsos_pul+0x1>
     be2:	20 93 0c 04 	sts	0x040C, r18	; 0x80040c <pulsos_pul>
	if (ir_pul < 245)
     be6:	85 3f       	cpi	r24, 0xF5	; 245
     be8:	91 05       	cpc	r25, r1
     bea:	0c f0       	brlt	.+2      	; 0xbee <pulgarCero+0x26>
     bec:	3f c0       	rjmp	.+126    	; 0xc6c <pulgarCero+0xa4>
	{
		dir_pul = 0;
     bee:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <dir_pul>
		pwm_pul = 100;
     bf2:	84 e6       	ldi	r24, 0x64	; 100
     bf4:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <pwm_pul>
		onoff_pul = 1;						// Para activar motor
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <onoff_pul>
		PORTD &= ~(1<<dirpin_pul);			// Dirección del motor
     bfe:	2b b1       	in	r18, 0x0b	; 11
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <dirpin_pul>
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <pulgarCero+0x46>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	0a 94       	dec	r0
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <pulgarCero+0x42>
     c12:	80 95       	com	r24
     c14:	82 23       	and	r24, r18
     c16:	8b b9       	out	0x0b, r24	; 11
		ActivarPWM_Pul(pwm_pul, onoff_pul);
     c18:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
     c1c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
     c20:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c24:	85 e3       	ldi	r24, 0x35	; 53
     c26:	8a 95       	dec	r24
     c28:	f1 f7       	brne	.-4      	; 0xc26 <pulgarCero+0x5e>
     c2a:	00 00       	nop
     c2c:	03 c0       	rjmp	.+6      	; 0xc34 <pulgarCero+0x6c>
     c2e:	80 e5       	ldi	r24, 0x50	; 80
     c30:	8a 95       	dec	r24
     c32:	f1 f7       	brne	.-4      	; 0xc30 <pulgarCero+0x68>
		_delay_us(10);
		while((ADC_GetData(IRpin)) <= 245)
     c34:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <IRpin>
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     c3e:	86 3f       	cpi	r24, 0xF6	; 246
     c40:	91 05       	cpc	r25, r1
     c42:	ac f3       	brlt	.-22     	; 0xc2e <pulgarCero+0x66>
		{
			_delay_us(15);
		}
		ActivarPWM_Pul(0, 0);
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
		pwm_pul = 0;
     c4c:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <pwm_pul>
		onoff_pul = 0;
     c50:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <onoff_pul>
		pulgar_listo = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <pulgar_listo>
		abs_pulgar = 0;
     c5a:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <abs_pulgar+0x1>
     c5e:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <abs_pulgar>
		//printf("CH 3 \n");
		//_delay_ms(5);
		//PORTC |= (1<<pin_pul_listo);	// Enviar señal de pulgar listo
		count_enc_pul = 0;
     c62:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <count_enc_pul+0x1>
     c66:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <count_enc_pul>
     c6a:	08 95       	ret
		//_delay_ms(250);
	}
	else
	{
		pulgar_listo = 1;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <pulgar_listo>
		//PORTC |= (1<<pin_pul_listo);	// Enviar señal de pulgar listo
		count_enc_pul = 0;
     c72:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <count_enc_pul+0x1>
     c76:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <count_enc_pul>
		abs_pulgar = 0;
     c7a:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <abs_pulgar+0x1>
     c7e:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <abs_pulgar>
     c82:	08 95       	ret

00000c84 <main>:
uint8_t moda = 0;


int main(void)
{
    cli();
     c84:	f8 94       	cli
	
	DDRC = 0x10;   // 0001 0000 (PC0-FSR_pul, PC1-IR_pul, PC2-FSR_men),(PC3-FC_lat), (PC4-pulgar_list), (PC5-ima_listo)
     c86:	80 e1       	ldi	r24, 0x10	; 16
     c88:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xE2;   // 1110 0010 (PD0-PD1-UART), (PD2-Enc_pul, PD3-Enc_lat, PD4-Enc_men), (PD5-PWM_pul, PD6-PWM_lat), (PD7-Dir_pul)
     c8a:	82 ee       	ldi	r24, 0xE2	; 226
     c8c:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x07;   // 0000 0111 (PB0-Dir_lat, PB2-Dir_men), (PB1-PWM_men), (PB3:5-Control), (PB7-PB7-Clock)
     c8e:	87 e0       	ldi	r24, 0x07	; 7
     c90:	84 b9       	out	0x04, r24	; 4
	
	PORTC |= (1<<3);	// Activar resistencia pull-up para PC3
     c92:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1<<5);	// Activar resistencia pull-up para PC5
     c94:	45 9a       	sbi	0x08, 5	; 8
	PORTB |= ((1<<3) | (1<<4) | (1<<5));	// Activar resistencia pull-up para PB3, PB4 y PB5
     c96:	85 b1       	in	r24, 0x05	; 5
     c98:	88 63       	ori	r24, 0x38	; 56
     c9a:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1<<4);	// Poner en bajo PC4
     c9c:	44 98       	cbi	0x08, 4	; 8
	PORTD |= ((1<<2) | (1<<3) | (1<<4));	// Activar resistencia pull-up para PD2, PD3 y PD4
     c9e:	8b b1       	in	r24, 0x0b	; 11
     ca0:	8c 61       	ori	r24, 0x1C	; 28
     ca2:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~((1<<5) | (1<<6) | (1<<7));	// Poner en bajo PD5, PD6, PD7
     ca4:	8b b1       	in	r24, 0x0b	; 11
     ca6:	8f 71       	andi	r24, 0x1F	; 31
     ca8:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~((1<<0) | (1<<1) | (1<<2));	// Poner en bajo PB0, PB1, PB2
     caa:	85 b1       	in	r24, 0x05	; 5
     cac:	88 7f       	andi	r24, 0xF8	; 248
     cae:	85 b9       	out	0x05, r24	; 5
	
	configADC();   // Configura ADC
     cb0:	0e 94 49 01 	call	0x292	; 0x292 <configADC>
	configPWM();   // Configura PWM
     cb4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <configPWM>
	configInterrupt();   // Configura interrupciones de encoders y FC
     cb8:	0e 94 9b 02 	call	0x536	; 0x536 <configInterrupt>
    UART_init();
     cbc:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
	

	
    sei();
     cc0:	78 94       	sei
			_delay_ms(5);
			//getIDMov();			// Obtener el código del movimiento deseado, leer señales de control
			
			///////////////// Sección en prueba //////////////////////////////////////
			
			lectura[0] = getIDMov();
     cc2:	c5 e0       	ldi	r28, 0x05	; 5
     cc4:	d4 e0       	ldi	r29, 0x04	; 4
				ActivarPWM_Lat(0,0);
				ActivarPWM_Men(0,0);
				pulgarCero();		// Mover pulgar a cero para evitar que choque con los demás dedos
				getPulsosMov();		// Obtener el número de pulsos para alcanzar la posición
				
				PORTC |= (1<<pin_pul_listo);	// Poner pin en alto
     cc6:	88 24       	eor	r8, r8
     cc8:	83 94       	inc	r8
     cca:	91 2c       	mov	r9, r1
				plm_listo = 1;
				
				//////////////////// Sección en prueba ///////////////////////////////
				////////// Reporte de posición de motores y fuerza aplicada //////////
				
				printf("Pulgar: %d \n", abs_pulgar);
     ccc:	0f 2e       	mov	r0, r31
     cce:	f9 e2       	ldi	r31, 0x29	; 41
     cd0:	6f 2e       	mov	r6, r31
     cd2:	f3 e0       	ldi	r31, 0x03	; 3
     cd4:	7f 2e       	mov	r7, r31
     cd6:	f0 2d       	mov	r31, r0
				printf("Lateral: %d \n", abs_lateral);
     cd8:	0f 2e       	mov	r0, r31
     cda:	f6 e3       	ldi	r31, 0x36	; 54
     cdc:	4f 2e       	mov	r4, r31
     cde:	f3 e0       	ldi	r31, 0x03	; 3
     ce0:	5f 2e       	mov	r5, r31
     ce2:	f0 2d       	mov	r31, r0
				printf("Menique: %d \n", abs_menique);
     ce4:	0f 2e       	mov	r0, r31
     ce6:	f4 e4       	ldi	r31, 0x44	; 68
     ce8:	2f 2e       	mov	r2, r31
     cea:	f3 e0       	ldi	r31, 0x03	; 3
     cec:	3f 2e       	mov	r3, r31
     cee:	f0 2d       	mov	r31, r0
				
				printf("Fuerza Pul: %d \n", ADC_GetData(FSRpin_pul));
     cf0:	0f 2e       	mov	r0, r31
     cf2:	f2 e5       	ldi	r31, 0x52	; 82
     cf4:	cf 2e       	mov	r12, r31
     cf6:	f3 e0       	ldi	r31, 0x03	; 3
     cf8:	df 2e       	mov	r13, r31
     cfa:	f0 2d       	mov	r31, r0
				printf("Fuerza Men: %d \n", ADC_GetData(FSRpin_men));
     cfc:	0f 2e       	mov	r0, r31
     cfe:	f3 e6       	ldi	r31, 0x63	; 99
     d00:	af 2e       	mov	r10, r31
     d02:	f3 e0       	ldi	r31, 0x03	; 3
     d04:	bf 2e       	mov	r11, r31
     d06:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d08:	2f ef       	ldi	r18, 0xFF	; 255
     d0a:	34 e3       	ldi	r19, 0x34	; 52
     d0c:	4c e0       	ldi	r20, 0x0C	; 12
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	30 40       	sbci	r19, 0x00	; 0
     d12:	40 40       	sbci	r20, 0x00	; 0
     d14:	e1 f7       	brne	.-8      	; 0xd0e <main+0x8a>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <main+0x94>
     d18:	00 00       	nop
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	94 e3       	ldi	r25, 0x34	; 52
     d1e:	2c e0       	ldi	r18, 0x0C	; 12
     d20:	81 50       	subi	r24, 0x01	; 1
     d22:	90 40       	sbci	r25, 0x00	; 0
     d24:	20 40       	sbci	r18, 0x00	; 0
     d26:	e1 f7       	brne	.-8      	; 0xd20 <main+0x9c>
     d28:	00 c0       	rjmp	.+0      	; 0xd2a <main+0xa6>
     d2a:	00 00       	nop
	
    while (1)
    {
		_delay_ms(250);
		_delay_ms(250);
		getSerialParams();
     d2c:	0e 94 6f 01 	call	0x2de	; 0x2de <getSerialParams>
     d30:	3f ef       	ldi	r19, 0xFF	; 255
     d32:	44 e3       	ldi	r20, 0x34	; 52
     d34:	8c e0       	ldi	r24, 0x0C	; 12
     d36:	31 50       	subi	r19, 0x01	; 1
     d38:	40 40       	sbci	r20, 0x00	; 0
     d3a:	80 40       	sbci	r24, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <main+0xb2>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <main+0xbc>
     d40:	00 00       	nop
		_delay_ms(250);
		
		// Paso 1: Calibración inicial
		
		if(iniciar_sis == 0 && count_event == 0)
     d42:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <iniciar_sis>
     d46:	81 11       	cpse	r24, r1
     d48:	9a c0       	rjmp	.+308    	; 0xe7e <main+0x1fa>
     d4a:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <count_event>
     d4e:	81 11       	cpse	r24, r1
     d50:	96 c0       	rjmp	.+300    	; 0xe7e <main+0x1fa>
     d52:	84 e1       	ldi	r24, 0x14	; 20
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	2f ef       	ldi	r18, 0xFF	; 255
     d58:	34 e3       	ldi	r19, 0x34	; 52
     d5a:	4c e0       	ldi	r20, 0x0C	; 12
     d5c:	21 50       	subi	r18, 0x01	; 1
     d5e:	30 40       	sbci	r19, 0x00	; 0
     d60:	40 40       	sbci	r20, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <main+0xd8>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <main+0xe2>
     d66:	00 00       	nop
     d68:	01 97       	sbiw	r24, 0x01	; 1
		{
			for (int t=0; t<20; t++)
     d6a:	a9 f7       	brne	.-22     	; 0xd56 <main+0xd2>
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	94 e3       	ldi	r25, 0x34	; 52
     d70:	2c e0       	ldi	r18, 0x0C	; 12
     d72:	81 50       	subi	r24, 0x01	; 1
     d74:	90 40       	sbci	r25, 0x00	; 0
     d76:	20 40       	sbci	r18, 0x00	; 0
     d78:	e1 f7       	brne	.-8      	; 0xd72 <main+0xee>
     d7a:	00 c0       	rjmp	.+0      	; 0xd7c <main+0xf8>
     d7c:	00 00       	nop
     d7e:	3f ef       	ldi	r19, 0xFF	; 255
     d80:	44 e3       	ldi	r20, 0x34	; 52
     d82:	8c e0       	ldi	r24, 0x0C	; 12
     d84:	31 50       	subi	r19, 0x01	; 1
     d86:	40 40       	sbci	r20, 0x00	; 0
     d88:	80 40       	sbci	r24, 0x00	; 0
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <main+0x100>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <main+0x10a>
     d8e:	00 00       	nop
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	24 e3       	ldi	r18, 0x34	; 52
     d94:	3c e0       	ldi	r19, 0x0C	; 12
     d96:	91 50       	subi	r25, 0x01	; 1
     d98:	20 40       	sbci	r18, 0x00	; 0
     d9a:	30 40       	sbci	r19, 0x00	; 0
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <main+0x112>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <main+0x11c>
     da0:	00 00       	nop
     da2:	4f ef       	ldi	r20, 0xFF	; 255
     da4:	84 e3       	ldi	r24, 0x34	; 52
     da6:	9c e0       	ldi	r25, 0x0C	; 12
     da8:	41 50       	subi	r20, 0x01	; 1
     daa:	80 40       	sbci	r24, 0x00	; 0
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <main+0x124>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <main+0x12e>
     db2:	00 00       	nop
			{
				_delay_ms(250);				// Espera 
			}
			//PORTC &= ~ (1<<pin_pul_listo);  // Poner en bajo señal enviada 
			
			printf("Hola usuario \n ");
     db4:	8b e7       	ldi	r24, 0x7B	; 123
     db6:	92 e0       	ldi	r25, 0x02	; 2
     db8:	9f 93       	push	r25
     dba:	8f 93       	push	r24
     dbc:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
     dc0:	2f ef       	ldi	r18, 0xFF	; 255
     dc2:	34 e3       	ldi	r19, 0x34	; 52
     dc4:	4c e0       	ldi	r20, 0x0C	; 12
     dc6:	21 50       	subi	r18, 0x01	; 1
     dc8:	30 40       	sbci	r19, 0x00	; 0
     dca:	40 40       	sbci	r20, 0x00	; 0
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <main+0x142>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <main+0x14c>
     dd0:	00 00       	nop
			_delay_ms(250);
			printf("Vamos a calibrar \n");
     dd2:	8b e8       	ldi	r24, 0x8B	; 139
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	94 e3       	ldi	r25, 0x34	; 52
     dde:	2c e0       	ldi	r18, 0x0C	; 12
     de0:	81 50       	subi	r24, 0x01	; 1
     de2:	90 40       	sbci	r25, 0x00	; 0
     de4:	20 40       	sbci	r18, 0x00	; 0
     de6:	e1 f7       	brne	.-8      	; 0xde0 <main+0x15c>
     de8:	00 c0       	rjmp	.+0      	; 0xdea <main+0x166>
     dea:	00 00       	nop
			_delay_ms(250);
			calibrar();
     dec:	0e 94 be 02 	call	0x57c	; 0x57c <calibrar>
			
			iniciar_sis = 1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <iniciar_sis>
			id_mov_ant = 8;
     df6:	88 e0       	ldi	r24, 0x08	; 8
     df8:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <id_mov_ant>
     dfc:	3f ef       	ldi	r19, 0xFF	; 255
     dfe:	44 e3       	ldi	r20, 0x34	; 52
     e00:	8c e0       	ldi	r24, 0x0C	; 12
     e02:	31 50       	subi	r19, 0x01	; 1
     e04:	40 40       	sbci	r20, 0x00	; 0
     e06:	80 40       	sbci	r24, 0x00	; 0
     e08:	e1 f7       	brne	.-8      	; 0xe02 <main+0x17e>
     e0a:	00 c0       	rjmp	.+0      	; 0xe0c <main+0x188>
     e0c:	00 00       	nop
			_delay_ms(250);
			
			printf("W 1 \n");
     e0e:	8d e9       	ldi	r24, 0x9D	; 157
     e10:	92 e0       	ldi	r25, 0x02	; 2
     e12:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
			PORTC &= ~(1<<pin_pul_listo);       // Poner pin en cero 
     e16:	98 b1       	in	r25, 0x08	; 8
     e18:	94 01       	movw	r18, r8
     e1a:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <pin_pul_listo>
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <main+0x1a0>
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <main+0x19c>
     e28:	82 2f       	mov	r24, r18
     e2a:	80 95       	com	r24
     e2c:	89 23       	and	r24, r25
     e2e:	88 b9       	out	0x08, r24	; 8
     e30:	a4 01       	movw	r20, r8
     e32:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <pin_pul_listo>
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <main+0x1b8>
     e38:	44 0f       	add	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <main+0x1b4>
     e40:	b4 01       	movw	r22, r8
     e42:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <pin_ima_listo>
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <main+0x1c8>
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <main+0x1c4>
			while (count_event != 1)
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
			{
				if ( ((PINC & (1 << pin_pul_listo)) == 0) && ((PINC & (1 << pin_ima_listo)) != 0) )
				{
					count_event = 1;
     e54:	31 e0       	ldi	r19, 0x01	; 1
			id_mov_ant = 8;
			_delay_ms(250);
			
			printf("W 1 \n");
			PORTC &= ~(1<<pin_pul_listo);       // Poner pin en cero 
			while (count_event != 1)
     e56:	0e c0       	rjmp	.+28     	; 0xe74 <main+0x1f0>
			{
				if ( ((PINC & (1 << pin_pul_listo)) == 0) && ((PINC & (1 << pin_ima_listo)) != 0) )
     e58:	86 b1       	in	r24, 0x06	; 6
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	84 23       	and	r24, r20
     e5e:	95 23       	and	r25, r21
     e60:	89 2b       	or	r24, r25
     e62:	51 f4       	brne	.+20     	; 0xe78 <main+0x1f4>
     e64:	86 b1       	in	r24, 0x06	; 6
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	86 23       	and	r24, r22
     e6a:	97 23       	and	r25, r23
     e6c:	89 2b       	or	r24, r25
     e6e:	21 f0       	breq	.+8      	; 0xe78 <main+0x1f4>
				{
					count_event = 1;
     e70:	30 93 41 04 	sts	0x0441, r19	; 0x800441 <count_event>
			id_mov_ant = 8;
			_delay_ms(250);
			
			printf("W 1 \n");
			PORTC &= ~(1<<pin_pul_listo);       // Poner pin en cero 
			while (count_event != 1)
     e74:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <count_event>
     e78:	21 30       	cpi	r18, 0x01	; 1
     e7a:	71 f7       	brne	.-36     	; 0xe58 <main+0x1d4>
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <main+0x204>
	//	printf("E1 \n");
	// Fin de paso 1
	
	// Paso 2: Detección de movimientos
	// if(count_event == 1)
		while(count_event == 1)    // While en prueba
     e7e:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <count_event>
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	09 f0       	breq	.+2      	; 0xe88 <main+0x204>
     e86:	bf c7       	rjmp	.+3966   	; 0x1e06 <main+0x1182>
						pwm_pul = 0;
						pul_ready = 1;
						printf("Pul come \n");
						
						abs_pulgar = 0;  //abs_pulgar + (signo_pul * rel_pulgar);
						printf("Pul en pos: %d \n", abs_pulgar);
     e88:	0b ed       	ldi	r16, 0xDB	; 219
     e8a:	12 e0       	ldi	r17, 0x02	; 2
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						
						abs_lateral = 0; // abs_lateral + (signo_lat * rel_lateral);
						printf("Lat en pos: %d \n", abs_lateral);
     e8c:	0f 2e       	mov	r0, r31
     e8e:	fa ec       	ldi	r31, 0xCA	; 202
     e90:	ef 2e       	mov	r14, r31
     e92:	f2 e0       	ldi	r31, 0x02	; 2
     e94:	ff 2e       	mov	r15, r31
     e96:	f0 2d       	mov	r31, r0
	
	// Paso 2: Detección de movimientos
	// if(count_event == 1)
		while(count_event == 1)    // While en prueba
		{
			printf("In 1 \n");
     e98:	82 ea       	ldi	r24, 0xA2	; 162
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     ea0:	8f e1       	ldi	r24, 0x1F	; 31
     ea2:	9e e4       	ldi	r25, 0x4E	; 78
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <main+0x220>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <main+0x226>
     eaa:	00 00       	nop
			_delay_ms(5);
			//getIDMov();			// Obtener el código del movimiento deseado, leer señales de control
			
			///////////////// Sección en prueba //////////////////////////////////////
			
			lectura[0] = getIDMov();
     eac:	0e 94 20 04 	call	0x840	; 0x840 <getIDMov>
     eb0:	88 83       	st	Y, r24
			lectura[1] = getIDMov();
     eb2:	0e 94 20 04 	call	0x840	; 0x840 <getIDMov>
     eb6:	89 83       	std	Y+1, r24	; 0x01
			lectura[2] = getIDMov();
     eb8:	0e 94 20 04 	call	0x840	; 0x840 <getIDMov>
     ebc:	8a 83       	std	Y+2, r24	; 0x02
			
			if((lectura[0] == lectura[1]) && (lectura[0] == lectura[2]))
     ebe:	98 81       	ld	r25, Y
     ec0:	29 81       	ldd	r18, Y+1	; 0x01
     ec2:	92 13       	cpse	r25, r18
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <main+0x252>
     ec6:	89 13       	cpse	r24, r25
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <main+0x24c>
			{
				moda = lectura[0];
     eca:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__data_end>
     ece:	0e c0       	rjmp	.+28     	; 0xeec <main+0x268>
			}
			else if((lectura[0] == lectura[1]) && (lectura[0] != lectura[2]))
			{
				moda = lectura[0];
     ed0:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__data_end>
     ed4:	0b c0       	rjmp	.+22     	; 0xeec <main+0x268>
			}
			else if((lectura[0] != lectura[1]) && (lectura[0] == lectura[2]))
     ed6:	89 13       	cpse	r24, r25
     ed8:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <main+0x13d2>
			{
				moda = lectura[0];
     edc:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__data_end>
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <main+0x268>
			}
			else if((lectura[1] == lectura[2]) && (lectura[0] != lectura[1]))
			{
				moda = lectura[1];
     ee2:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__data_end>
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <main+0x268>
			}
			else
			{
				moda = lectura[1];
     ee8:	20 93 04 04 	sts	0x0404, r18	; 0x800404 <__data_end>
			}
			
			id_mov = moda;
     eec:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__data_end>
     ef0:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <id_mov>
			
			///////////////// Fin de sección de prueba ///////////////////////////////
			
			if(id_mov == id_mov_ant)
     ef4:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <id_mov_ant>
     ef8:	89 17       	cp	r24, r25
     efa:	09 f4       	brne	.+2      	; 0xefe <main+0x27a>
     efc:	79 c7       	rjmp	.+3826   	; 0x1df0 <main+0x116c>
			{
				// No hacer nada y salir del if principal para volver a leer señales de control
			}
			else if (((id_mov_ant == 1 || id_mov_ant == 3 || id_mov_ant == 4) && (id_mov != 0)) || ((id_mov == 1 || id_mov == 3 || id_mov == 4) && (id_mov_ant != 0)) )
     efe:	91 30       	cpi	r25, 0x01	; 1
     f00:	21 f0       	breq	.+8      	; 0xf0a <main+0x286>
     f02:	2d ef       	ldi	r18, 0xFD	; 253
     f04:	29 0f       	add	r18, r25
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	18 f4       	brcc	.+6      	; 0xf10 <main+0x28c>
     f0a:	81 11       	cpse	r24, r1
     f0c:	71 c7       	rjmp	.+3810   	; 0x1df0 <main+0x116c>
     f0e:	07 c0       	rjmp	.+14     	; 0xf1e <main+0x29a>
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	19 f0       	breq	.+6      	; 0xf1a <main+0x296>
     f14:	83 50       	subi	r24, 0x03	; 3
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	10 f4       	brcc	.+4      	; 0xf1e <main+0x29a>
     f1a:	91 11       	cpse	r25, r1
     f1c:	69 c7       	rjmp	.+3794   	; 0x1df0 <main+0x116c>
				// Ó si la posición acutual es agarre pero la posición anterior no es descanso,
				// salir del if principal para esperar a que el usuario indicque descanso y luego agarre.
			}
			else
			{
				printf("In m \n");
     f1e:	88 ea       	ldi	r24, 0xA8	; 168
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     f26:	8f e1       	ldi	r24, 0x1F	; 31
     f28:	9e e4       	ldi	r25, 0x4E	; 78
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <main+0x2a6>
     f2e:	00 c0       	rjmp	.+0      	; 0xf30 <main+0x2ac>
     f30:	00 00       	nop
				_delay_ms(5);
				id_mov_ant = id_mov;
     f32:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <id_mov>
     f36:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <id_mov_ant>
				
				ActivarPWM_Pul(0,0);
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
				ActivarPWM_Lat(0,0);
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
				ActivarPWM_Men(0,0);
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
				pulgarCero();		// Mover pulgar a cero para evitar que choque con los demás dedos
     f52:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <pulgarCero>
				getPulsosMov();		// Obtener el número de pulsos para alcanzar la posición
     f56:	0e 94 43 04 	call	0x886	; 0x886 <getPulsosMov>
				
				PORTC |= (1<<pin_pul_listo);	// Poner pin en alto
     f5a:	28 b1       	in	r18, 0x08	; 8
     f5c:	c4 01       	movw	r24, r8
     f5e:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <pin_pul_listo>
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <main+0x2e4>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <main+0x2e0>
     f6c:	82 2b       	or	r24, r18
     f6e:	88 b9       	out	0x08, r24	; 8
     f70:	94 01       	movw	r18, r8
     f72:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <pin_pul_listo>
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <main+0x2f8>
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <main+0x2f4>
     f80:	a4 01       	movw	r20, r8
     f82:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <pin_ima_listo>
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <main+0x308>
     f88:	44 0f       	add	r20, r20
     f8a:	55 1f       	adc	r21, r21
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <main+0x304>

				while (count_event != 2) // While en prueba
				{
					if ( ((PINC & (1 << pin_pul_listo)) != 0) && ((PINC & (1 << pin_ima_listo)) == 0) )
					{
						count_event = 2;
     f90:	72 e0       	ldi	r23, 0x02	; 2
				pulgarCero();		// Mover pulgar a cero para evitar que choque con los demás dedos
				getPulsosMov();		// Obtener el número de pulsos para alcanzar la posición
				
				PORTC |= (1<<pin_pul_listo);	// Poner pin en alto

				while (count_event != 2) // While en prueba
     f92:	0e c0       	rjmp	.+28     	; 0xfb0 <main+0x32c>
				{
					if ( ((PINC & (1 << pin_pul_listo)) != 0) && ((PINC & (1 << pin_ima_listo)) == 0) )
     f94:	86 b1       	in	r24, 0x06	; 6
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	82 23       	and	r24, r18
     f9a:	93 23       	and	r25, r19
     f9c:	89 2b       	or	r24, r25
     f9e:	51 f0       	breq	.+20     	; 0xfb4 <main+0x330>
     fa0:	86 b1       	in	r24, 0x06	; 6
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	84 23       	and	r24, r20
     fa6:	95 23       	and	r25, r21
     fa8:	89 2b       	or	r24, r25
     faa:	21 f4       	brne	.+8      	; 0xfb4 <main+0x330>
					{
						count_event = 2;
     fac:	70 93 41 04 	sts	0x0441, r23	; 0x800441 <count_event>
				pulgarCero();		// Mover pulgar a cero para evitar que choque con los demás dedos
				getPulsosMov();		// Obtener el número de pulsos para alcanzar la posición
				
				PORTC |= (1<<pin_pul_listo);	// Poner pin en alto

				while (count_event != 2) // While en prueba
     fb0:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <count_event>
     fb4:	62 30       	cpi	r22, 0x02	; 2
     fb6:	71 f7       	brne	.-36     	; 0xf94 <main+0x310>
					{
						count_event = 2;
					}
				}
				
				printf("If \n");
     fb8:	8e ea       	ldi	r24, 0xAE	; 174
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     fc0:	8f e1       	ldi	r24, 0x1F	; 31
     fc2:	9e e4       	ldi	r25, 0x4E	; 78
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <main+0x340>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <main+0x346>
     fca:	00 00       	nop
				_delay_ms(5);
				
				/////////////////////////////////////////////////////////////////////////////////////////
				if (id_mov == 0)			// Rutina para movimiento de descanso
     fcc:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <id_mov>
     fd0:	81 11       	cpse	r24, r1
     fd2:	d1 c0       	rjmp	.+418    	; 0x1176 <main+0x4f2>
				{
					printf("Mov 0 \n");
     fd4:	82 eb       	ldi	r24, 0xB2	; 178
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
     fdc:	8f e3       	ldi	r24, 0x3F	; 63
     fde:	9c e9       	ldi	r25, 0x9C	; 156
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <main+0x35c>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <main+0x362>
     fe6:	00 00       	nop
					_delay_ms(10);
					if (pulsos_men != 0)
     fe8:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <pulsos_men>
     fec:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <pulsos_men+0x1>
     ff0:	89 2b       	or	r24, r25
     ff2:	e1 f1       	breq	.+120    	; 0x106c <main+0x3e8>
					{
						ActivarPWM_Men(pwm_men, onoff_men);
     ff4:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
     ff8:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
     ffc:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						while(men_ready != 1)
    1000:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <men_ready>
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	69 f0       	breq	.+26     	; 0x1022 <main+0x39e>
    1008:	9f ef       	ldi	r25, 0xFF	; 255
    100a:	29 ef       	ldi	r18, 0xF9	; 249
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	91 50       	subi	r25, 0x01	; 1
    1010:	20 40       	sbci	r18, 0x00	; 0
    1012:	30 40       	sbci	r19, 0x00	; 0
    1014:	e1 f7       	brne	.-8      	; 0x100e <main+0x38a>
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <main+0x394>
    1018:	00 00       	nop
    101a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <men_ready>
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	99 f7       	brne	.-26     	; 0x1008 <main+0x384>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_menique = abs_menique + (signo_men * rel_menique);
    1022:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <signo_men>
    1026:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <signo_men+0x1>
    102a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <rel_menique>
    102e:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <rel_menique+0x1>
    1032:	48 9f       	mul	r20, r24
    1034:	90 01       	movw	r18, r0
    1036:	49 9f       	mul	r20, r25
    1038:	30 0d       	add	r19, r0
    103a:	58 9f       	mul	r21, r24
    103c:	30 0d       	add	r19, r0
    103e:	11 24       	eor	r1, r1
    1040:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <abs_menique>
    1044:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <abs_menique+0x1>
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <abs_menique+0x1>
    1050:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <abs_menique>
						printf("Men en pos: %d \n", abs_menique);
    1054:	9f 93       	push	r25
    1056:	8f 93       	push	r24
    1058:	89 eb       	ldi	r24, 0xB9	; 185
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	9f 93       	push	r25
    105e:	8f 93       	push	r24
    1060:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
					}
					
					if (pulsos_lat != 0)
    106c:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <pulsos_lat>
    1070:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <pulsos_lat+0x1>
    1074:	89 2b       	or	r24, r25
    1076:	d1 f1       	breq	.+116    	; 0x10ec <main+0x468>
					{
						ActivarPWM_Lat(pwm_lat, onoff_lat);
    1078:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    107c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    1080:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
						while(lat_ready != 1)
    1084:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	69 f0       	breq	.+26     	; 0x10a6 <main+0x422>
    108c:	4f ef       	ldi	r20, 0xFF	; 255
    108e:	89 ef       	ldi	r24, 0xF9	; 249
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	41 50       	subi	r20, 0x01	; 1
    1094:	80 40       	sbci	r24, 0x00	; 0
    1096:	90 40       	sbci	r25, 0x00	; 0
    1098:	e1 f7       	brne	.-8      	; 0x1092 <main+0x40e>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <main+0x418>
    109c:	00 00       	nop
    109e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	99 f7       	brne	.-26     	; 0x108c <main+0x408>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_lateral = abs_lateral + (signo_lat * rel_lateral);
    10a6:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <signo_lat>
    10aa:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <signo_lat+0x1>
    10ae:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rel_lateral>
    10b2:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <rel_lateral+0x1>
    10b6:	48 9f       	mul	r20, r24
    10b8:	90 01       	movw	r18, r0
    10ba:	49 9f       	mul	r20, r25
    10bc:	30 0d       	add	r19, r0
    10be:	58 9f       	mul	r21, r24
    10c0:	30 0d       	add	r19, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <abs_lateral>
    10c8:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <abs_lateral+0x1>
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <abs_lateral+0x1>
    10d4:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <abs_lateral>
						printf("Lat en pos: %d \n", abs_lateral);
    10d8:	9f 93       	push	r25
    10da:	8f 93       	push	r24
    10dc:	ff 92       	push	r15
    10de:	ef 92       	push	r14
    10e0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
					}
					
					if (pulsos_pul != 0)
    10ec:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsos_pul>
    10f0:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsos_pul+0x1>
    10f4:	89 2b       	or	r24, r25
    10f6:	d1 f1       	breq	.+116    	; 0x116c <main+0x4e8>
					{
						ActivarPWM_Pul(pwm_pul, onoff_pul);
    10f8:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    10fc:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    1100:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						while(pul_ready != 1)
    1104:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	69 f0       	breq	.+26     	; 0x1126 <main+0x4a2>
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	39 ef       	ldi	r19, 0xF9	; 249
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	30 40       	sbci	r19, 0x00	; 0
    1116:	40 40       	sbci	r20, 0x00	; 0
    1118:	e1 f7       	brne	.-8      	; 0x1112 <main+0x48e>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <main+0x498>
    111c:	00 00       	nop
    111e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	99 f7       	brne	.-26     	; 0x110c <main+0x488>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_pulgar = abs_pulgar + (signo_pul * rel_pulgar);
    1126:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <signo_pul>
    112a:	50 91 1a 04 	lds	r21, 0x041A	; 0x80041a <signo_pul+0x1>
    112e:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <rel_pulgar>
    1132:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <rel_pulgar+0x1>
    1136:	48 9f       	mul	r20, r24
    1138:	90 01       	movw	r18, r0
    113a:	49 9f       	mul	r20, r25
    113c:	30 0d       	add	r19, r0
    113e:	58 9f       	mul	r21, r24
    1140:	30 0d       	add	r19, r0
    1142:	11 24       	eor	r1, r1
    1144:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <abs_pulgar>
    1148:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <abs_pulgar+0x1>
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <abs_pulgar+0x1>
    1154:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <abs_pulgar>
						printf("Pul en pos: %d \n", abs_pulgar);
    1158:	9f 93       	push	r25
    115a:	8f 93       	push	r24
    115c:	1f 93       	push	r17
    115e:	0f 93       	push	r16
    1160:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
					}
					
					printf("PLM listo \n");
    116c:	8c ee       	ldi	r24, 0xEC	; 236
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
    1174:	a0 c5       	rjmp	.+2880   	; 0x1cb6 <main+0x1032>
					//PORTC |= (1<<pin_pul_listo);	// Avisar a Micro IMA que Micro PLM está en posición deseada
					//plm_listo = 1;					// Bandera: Indica que Micro PLM está en posición deseada
				}
				////////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 1)			// Rutina para agarre cilíndrico (de fuerza) ///////////////
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	09 f0       	breq	.+2      	; 0x117c <main+0x4f8>
    117a:	d7 c0       	rjmp	.+430    	; 0x132a <main+0x6a6>
				{		
					if (pulsos_men != 0)				// Si la posición actual es distinta de la deseada
    117c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <pulsos_men>
    1180:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <pulsos_men+0x1>
    1184:	89 2b       	or	r24, r25
    1186:	09 f4       	brne	.+2      	; 0x118a <main+0x506>
    1188:	4b c0       	rjmp	.+150    	; 0x1220 <main+0x59c>
					{
						ActivarPWM_Men(pwm_men, onoff_men);
    118a:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
    118e:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
    1192:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						while(men_ready != 1)		// Mientras no alcance la posición guardada (límite)
    1196:	1b c0       	rjmp	.+54     	; 0x11ce <main+0x54a>
						{
							if ((ADC_GetData(FSRpin_men)) > 100)  // Evaluar FSR, si FSR en contacto con objeto:
    1198:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_men>
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    11a2:	85 36       	cpi	r24, 0x65	; 101
    11a4:	91 05       	cpc	r25, r1
    11a6:	9c f0       	brlt	.+38     	; 0x11ce <main+0x54a>
							{									 // apagar motor e indicar que está en posición
								ActivarPWM_Men(0,0);
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
								count_enc_men = 0;
    11b0:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <count_enc_men+0x1>
    11b4:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <count_enc_men>
								onoff_men = 0;
    11b8:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <onoff_men>
								pwm_men = 0;
    11bc:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <pwm_men>
								men_ready = 1;	
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <men_ready>
								printf("Men come \n");
    11c6:	87 ef       	ldi	r24, 0xF7	; 247
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
				else if (id_mov == 1)			// Rutina para agarre cilíndrico (de fuerza) ///////////////
				{		
					if (pulsos_men != 0)				// Si la posición actual es distinta de la deseada
					{
						ActivarPWM_Men(pwm_men, onoff_men);
						while(men_ready != 1)		// Mientras no alcance la posición guardada (límite)
    11ce:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <men_ready>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	09 f7       	brne	.-62     	; 0x1198 <main+0x514>
								men_ready = 1;	
								printf("Men come \n");
							}
						}
						
						abs_menique = abs_menique + (signo_men * rel_menique);
    11d6:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <signo_men>
    11da:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <signo_men+0x1>
    11de:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <rel_menique>
    11e2:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <rel_menique+0x1>
    11e6:	48 9f       	mul	r20, r24
    11e8:	90 01       	movw	r18, r0
    11ea:	49 9f       	mul	r20, r25
    11ec:	30 0d       	add	r19, r0
    11ee:	58 9f       	mul	r21, r24
    11f0:	30 0d       	add	r19, r0
    11f2:	11 24       	eor	r1, r1
    11f4:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <abs_menique>
    11f8:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <abs_menique+0x1>
    11fc:	82 0f       	add	r24, r18
    11fe:	93 1f       	adc	r25, r19
    1200:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <abs_menique+0x1>
    1204:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <abs_menique>
						printf("Men en pos: %d \n", abs_menique);
    1208:	9f 93       	push	r25
    120a:	8f 93       	push	r24
    120c:	89 eb       	ldi	r24, 0xB9	; 185
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	9f 93       	push	r25
    1212:	8f 93       	push	r24
    1214:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
					}
					
					if (pulsos_lat != 0)
    1220:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <pulsos_lat>
    1224:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <pulsos_lat+0x1>
    1228:	89 2b       	or	r24, r25
    122a:	d1 f1       	breq	.+116    	; 0x12a0 <main+0x61c>
					{
						ActivarPWM_Lat(pwm_lat, onoff_lat);
    122c:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    1230:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    1234:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
						while(lat_ready != 1)		// Mientras no alcance la posición guardada (límite)
    1238:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	69 f0       	breq	.+26     	; 0x125a <main+0x5d6>
    1240:	9f ef       	ldi	r25, 0xFF	; 255
    1242:	29 ef       	ldi	r18, 0xF9	; 249
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	91 50       	subi	r25, 0x01	; 1
    1248:	20 40       	sbci	r18, 0x00	; 0
    124a:	30 40       	sbci	r19, 0x00	; 0
    124c:	e1 f7       	brne	.-8      	; 0x1246 <main+0x5c2>
    124e:	00 c0       	rjmp	.+0      	; 0x1250 <main+0x5cc>
    1250:	00 00       	nop
    1252:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	99 f7       	brne	.-26     	; 0x1240 <main+0x5bc>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						
						abs_lateral = abs_lateral + (signo_lat * rel_lateral);
    125a:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <signo_lat>
    125e:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <signo_lat+0x1>
    1262:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rel_lateral>
    1266:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <rel_lateral+0x1>
    126a:	48 9f       	mul	r20, r24
    126c:	90 01       	movw	r18, r0
    126e:	49 9f       	mul	r20, r25
    1270:	30 0d       	add	r19, r0
    1272:	58 9f       	mul	r21, r24
    1274:	30 0d       	add	r19, r0
    1276:	11 24       	eor	r1, r1
    1278:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <abs_lateral>
    127c:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <abs_lateral+0x1>
    1280:	82 0f       	add	r24, r18
    1282:	93 1f       	adc	r25, r19
    1284:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <abs_lateral+0x1>
    1288:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <abs_lateral>
						printf("Lat en pos: %d \n", abs_lateral);
    128c:	9f 93       	push	r25
    128e:	8f 93       	push	r24
    1290:	ff 92       	push	r15
    1292:	ef 92       	push	r14
    1294:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
					}
					
					if (pulsos_pul != 0)
    12a0:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsos_pul>
    12a4:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsos_pul+0x1>
    12a8:	89 2b       	or	r24, r25
    12aa:	d1 f1       	breq	.+116    	; 0x1320 <main+0x69c>
					{
						ActivarPWM_Pul(pwm_pul, onoff_pul);
    12ac:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    12b0:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    12b4:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						while(pul_ready != 1)
    12b8:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	69 f0       	breq	.+26     	; 0x12da <main+0x656>
    12c0:	4f ef       	ldi	r20, 0xFF	; 255
    12c2:	89 ef       	ldi	r24, 0xF9	; 249
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	41 50       	subi	r20, 0x01	; 1
    12c8:	80 40       	sbci	r24, 0x00	; 0
    12ca:	90 40       	sbci	r25, 0x00	; 0
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <main+0x642>
    12ce:	00 c0       	rjmp	.+0      	; 0x12d0 <main+0x64c>
    12d0:	00 00       	nop
    12d2:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	99 f7       	brne	.-26     	; 0x12c0 <main+0x63c>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						
						abs_pulgar = abs_pulgar + (signo_pul * rel_pulgar);
    12da:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <signo_pul>
    12de:	50 91 1a 04 	lds	r21, 0x041A	; 0x80041a <signo_pul+0x1>
    12e2:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <rel_pulgar>
    12e6:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <rel_pulgar+0x1>
    12ea:	48 9f       	mul	r20, r24
    12ec:	90 01       	movw	r18, r0
    12ee:	49 9f       	mul	r20, r25
    12f0:	30 0d       	add	r19, r0
    12f2:	58 9f       	mul	r21, r24
    12f4:	30 0d       	add	r19, r0
    12f6:	11 24       	eor	r1, r1
    12f8:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <abs_pulgar>
    12fc:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <abs_pulgar+0x1>
    1300:	82 0f       	add	r24, r18
    1302:	93 1f       	adc	r25, r19
    1304:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <abs_pulgar+0x1>
    1308:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <abs_pulgar>
						printf("Pul en pos: %d \n", abs_pulgar); 
    130c:	9f 93       	push	r25
    130e:	8f 93       	push	r24
    1310:	1f 93       	push	r17
    1312:	0f 93       	push	r16
    1314:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
					}
					
					printf("PLM listo \n");
    1320:	8c ee       	ldi	r24, 0xEC	; 236
    1322:	92 e0       	ldi	r25, 0x02	; 2
    1324:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
    1328:	c6 c4       	rjmp	.+2444   	; 0x1cb6 <main+0x1032>
					//PORTC |= (1<<pin_pul_listo);	// Avisar a Micro IMA que Micro PLM está en posición deseada
					//plm_listo = 1;					// Bandera: Indica que Micro PLM está en posición deseada
				}
				
				////////////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 2)			// Rutina para puño/agarre lateral ///////////////
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	09 f0       	breq	.+2      	; 0x1330 <main+0x6ac>
    132e:	c2 c0       	rjmp	.+388    	; 0x14b4 <main+0x830>
				{
					if (pulsos_men != 0)				// Si la posición actual es distinta de la deseada
    1330:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <pulsos_men>
    1334:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <pulsos_men+0x1>
    1338:	89 2b       	or	r24, r25
    133a:	b1 f1       	breq	.+108    	; 0x13a8 <main+0x724>
					{
						pulsos_men = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0 
    133c:	20 ed       	ldi	r18, 0xD0	; 208
    133e:	37 e0       	ldi	r19, 0x07	; 7
    1340:	30 93 09 04 	sts	0x0409, r19	; 0x800409 <pulsos_men+0x1>
    1344:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <pulsos_men>
						ActivarPWM_Men(pwm_men, onoff_men);
    1348:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
    134c:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
    1350:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						while(ADC_GetData(FSRpin_men) < 35)		// Mientras los sensores no toquen la palma
    1354:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_men>
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    135e:	83 97       	sbiw	r24, 0x23	; 35
    1360:	cc f3       	brlt	.-14     	; 0x1354 <main+0x6d0>
						{
						}
						ActivarPWM_Men(0,0);
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						count_enc_men = 0;
    136a:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <count_enc_men+0x1>
    136e:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <count_enc_men>
						onoff_men = 0;
    1372:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <onoff_men>
						pwm_men = 0;
    1376:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <pwm_men>
						men_ready = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <men_ready>
						printf("Men come \n");
    1380:	87 ef       	ldi	r24, 0xF7	; 247
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
						
						abs_menique = 0; // abs_menique + (signo_men * rel_menique);
    1388:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <abs_menique+0x1>
    138c:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <abs_menique>
						printf("Men en pos: %d \n", abs_menique);
    1390:	1f 92       	push	r1
    1392:	1f 92       	push	r1
    1394:	89 eb       	ldi	r24, 0xB9	; 185
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	9f 93       	push	r25
    139a:	8f 93       	push	r24
    139c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
					}
			
					
					if (pulsos_lat != 0)		// Si la posición actual es distinta de la deseada
    13a8:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <pulsos_lat>
    13ac:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <pulsos_lat+0x1>
    13b0:	89 2b       	or	r24, r25
    13b2:	59 f1       	breq	.+86     	; 0x140a <main+0x786>
					{
						pulsos_lat = 5000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    13b4:	88 e8       	ldi	r24, 0x88	; 136
    13b6:	93 e1       	ldi	r25, 0x13	; 19
    13b8:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <pulsos_lat+0x1>
    13bc:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <pulsos_lat>
						ActivarPWM_Lat(pwm_lat, onoff_lat);
    13c0:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    13c4:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    13c8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
						while(lat_ready != 1)		// Mientras no alcance la posición guardada (límite)
    13cc:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	69 f0       	breq	.+26     	; 0x13ee <main+0x76a>
    13d4:	9f ef       	ldi	r25, 0xFF	; 255
    13d6:	29 ef       	ldi	r18, 0xF9	; 249
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	91 50       	subi	r25, 0x01	; 1
    13dc:	20 40       	sbci	r18, 0x00	; 0
    13de:	30 40       	sbci	r19, 0x00	; 0
    13e0:	e1 f7       	brne	.-8      	; 0x13da <main+0x756>
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <main+0x760>
    13e4:	00 00       	nop
    13e6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	99 f7       	brne	.-26     	; 0x13d4 <main+0x750>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						
						abs_lateral = 0; // abs_lateral + (signo_lat * rel_lateral);
    13ee:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <abs_lateral+0x1>
    13f2:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <abs_lateral>
						printf("Lat en pos: %d \n", abs_lateral);
    13f6:	1f 92       	push	r1
    13f8:	1f 92       	push	r1
    13fa:	ff 92       	push	r15
    13fc:	ef 92       	push	r14
    13fe:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
					}
					
					
					if (pulsos_pul != 0)		// Si la posición actual es distinta de la deseada
    140a:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsos_pul>
    140e:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsos_pul+0x1>
    1412:	89 2b       	or	r24, r25
    1414:	09 f4       	brne	.+2      	; 0x1418 <main+0x794>
    1416:	49 c0       	rjmp	.+146    	; 0x14aa <main+0x826>
					{
						ActivarPWM_Pul(pwm_pul, onoff_pul);
    1418:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    141c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    1420:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						while(pul_ready != 1)
    1424:	1b c0       	rjmp	.+54     	; 0x145c <main+0x7d8>
						{
							if (ADC_GetData(FSRpin_pul) > 70)
    1426:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <FSRpin_pul>
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1430:	87 34       	cpi	r24, 0x47	; 71
    1432:	91 05       	cpc	r25, r1
    1434:	9c f0       	brlt	.+38     	; 0x145c <main+0x7d8>
							{
								ActivarPWM_Pul(0,0);
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
								count_enc_pul = 0;
    143e:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <count_enc_pul+0x1>
    1442:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <count_enc_pul>
								onoff_pul = 0;
    1446:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <onoff_pul>
								pwm_pul = 0;
    144a:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <pwm_pul>
								pul_ready = 1;
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	40 93 31 04 	sts	0x0431, r20	; 0x800431 <pul_ready>
								printf("Pul come \n");
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	93 e0       	ldi	r25, 0x03	; 3
    1458:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
					
					
					if (pulsos_pul != 0)		// Si la posición actual es distinta de la deseada
					{
						ActivarPWM_Pul(pwm_pul, onoff_pul);
						while(pul_ready != 1)
    145c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	09 f7       	brne	.-62     	; 0x1426 <main+0x7a2>
								pul_ready = 1;
								printf("Pul come \n");
							}
						}
						
						abs_pulgar = abs_pulgar + (signo_pul * rel_pulgar);
    1464:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <signo_pul>
    1468:	50 91 1a 04 	lds	r21, 0x041A	; 0x80041a <signo_pul+0x1>
    146c:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <rel_pulgar>
    1470:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <rel_pulgar+0x1>
    1474:	48 9f       	mul	r20, r24
    1476:	90 01       	movw	r18, r0
    1478:	49 9f       	mul	r20, r25
    147a:	30 0d       	add	r19, r0
    147c:	58 9f       	mul	r21, r24
    147e:	30 0d       	add	r19, r0
    1480:	11 24       	eor	r1, r1
    1482:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <abs_pulgar>
    1486:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <abs_pulgar+0x1>
    148a:	82 0f       	add	r24, r18
    148c:	93 1f       	adc	r25, r19
    148e:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <abs_pulgar+0x1>
    1492:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <abs_pulgar>
						printf("Pul en pos: %d \n", abs_pulgar);
    1496:	9f 93       	push	r25
    1498:	8f 93       	push	r24
    149a:	1f 93       	push	r17
    149c:	0f 93       	push	r16
    149e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
					}
					
					
					printf("PLM listo \n");
    14aa:	8c ee       	ldi	r24, 0xEC	; 236
    14ac:	92 e0       	ldi	r25, 0x02	; 2
    14ae:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
    14b2:	01 c4       	rjmp	.+2050   	; 0x1cb6 <main+0x1032>
					//PORTC |= (1<<pin_pul_listo);	// Avisar a Micro IMA que Micro PLM está en posición deseada
					//plm_listo = 1;					// Bandera: Indica que Micro PLM está en posición deseada
				}
				
				////////////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 3)			// Rutina para pinza ///////////////
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	09 f0       	breq	.+2      	; 0x14ba <main+0x836>
    14b8:	d1 c0       	rjmp	.+418    	; 0x165c <main+0x9d8>
				{
					if (pulsos_men != 0)				// Si la posición actual es distinta de la deseada
    14ba:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <pulsos_men>
    14be:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <pulsos_men+0x1>
    14c2:	89 2b       	or	r24, r25
    14c4:	b1 f1       	breq	.+108    	; 0x1532 <main+0x8ae>
					{
						pulsos_men = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0 
    14c6:	80 ed       	ldi	r24, 0xD0	; 208
    14c8:	97 e0       	ldi	r25, 0x07	; 7
    14ca:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <pulsos_men+0x1>
    14ce:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <pulsos_men>
						ActivarPWM_Men(pwm_men, onoff_men);
    14d2:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
    14d6:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
    14da:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						while(ADC_GetData(FSRpin_men) < 35)		// Mientras no toque la palma
    14de:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_men>
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    14e8:	83 97       	sbiw	r24, 0x23	; 35
    14ea:	cc f3       	brlt	.-14     	; 0x14de <main+0x85a>
						{
						}
						ActivarPWM_Men(0,0);
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						count_enc_men = 0;
    14f4:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <count_enc_men+0x1>
    14f8:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <count_enc_men>
						onoff_men = 0;
    14fc:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <onoff_men>
						pwm_men = 0;
    1500:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <pwm_men>
						men_ready = 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <men_ready>
						printf("Men come \n");
    150a:	87 ef       	ldi	r24, 0xF7	; 247
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
						
						abs_menique = 0; // abs_menique + (signo_men * rel_menique);
    1512:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <abs_menique+0x1>
    1516:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <abs_menique>
						printf("Men en pos: %d \n", abs_menique);
    151a:	1f 92       	push	r1
    151c:	1f 92       	push	r1
    151e:	89 eb       	ldi	r24, 0xB9	; 185
    1520:	92 e0       	ldi	r25, 0x02	; 2
    1522:	9f 93       	push	r25
    1524:	8f 93       	push	r24
    1526:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
					}
					
					if (pulsos_lat != 0)		// Si la posición actual es distinta de la deseada
    1532:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <pulsos_lat>
    1536:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <pulsos_lat+0x1>
    153a:	89 2b       	or	r24, r25
    153c:	d1 f1       	breq	.+116    	; 0x15b2 <main+0x92e>
					{
						ActivarPWM_Lat(pwm_lat, onoff_lat);
    153e:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    1542:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    1546:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
						while(lat_ready != 1)		// Mientras no alcance la posición guardada (límite)
    154a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	69 f0       	breq	.+26     	; 0x156c <main+0x8e8>
    1552:	9f ef       	ldi	r25, 0xFF	; 255
    1554:	29 ef       	ldi	r18, 0xF9	; 249
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	91 50       	subi	r25, 0x01	; 1
    155a:	20 40       	sbci	r18, 0x00	; 0
    155c:	30 40       	sbci	r19, 0x00	; 0
    155e:	e1 f7       	brne	.-8      	; 0x1558 <main+0x8d4>
    1560:	00 c0       	rjmp	.+0      	; 0x1562 <main+0x8de>
    1562:	00 00       	nop
    1564:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	99 f7       	brne	.-26     	; 0x1552 <main+0x8ce>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						
						abs_lateral = abs_lateral + (signo_lat * rel_lateral);
    156c:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <signo_lat>
    1570:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <signo_lat+0x1>
    1574:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rel_lateral>
    1578:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <rel_lateral+0x1>
    157c:	48 9f       	mul	r20, r24
    157e:	90 01       	movw	r18, r0
    1580:	49 9f       	mul	r20, r25
    1582:	30 0d       	add	r19, r0
    1584:	58 9f       	mul	r21, r24
    1586:	30 0d       	add	r19, r0
    1588:	11 24       	eor	r1, r1
    158a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <abs_lateral>
    158e:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <abs_lateral+0x1>
    1592:	82 0f       	add	r24, r18
    1594:	93 1f       	adc	r25, r19
    1596:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <abs_lateral+0x1>
    159a:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <abs_lateral>
						printf("Lat en pos: %d \n", abs_lateral);
    159e:	9f 93       	push	r25
    15a0:	8f 93       	push	r24
    15a2:	ff 92       	push	r15
    15a4:	ef 92       	push	r14
    15a6:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
					}
					
					if (pulsos_pul != 0)		// Si la posición actual es distinta de la deseada
    15b2:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsos_pul>
    15b6:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsos_pul+0x1>
    15ba:	89 2b       	or	r24, r25
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <main+0x93c>
    15be:	49 c0       	rjmp	.+146    	; 0x1652 <main+0x9ce>
					{
						ActivarPWM_Pul(pwm_pul, onoff_pul);
    15c0:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    15c4:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    15c8:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						while(pul_ready != 1)
    15cc:	1b c0       	rjmp	.+54     	; 0x1604 <main+0x980>
						{		
							if (ADC_GetData(FSRpin_pul) > 70)
    15ce:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <FSRpin_pul>
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    15d8:	87 34       	cpi	r24, 0x47	; 71
    15da:	91 05       	cpc	r25, r1
    15dc:	9c f0       	brlt	.+38     	; 0x1604 <main+0x980>
							{
								ActivarPWM_Pul(0,0);
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
								count_enc_pul = 0;
    15e6:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <count_enc_pul+0x1>
    15ea:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <count_enc_pul>
								onoff_pul = 0;
    15ee:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <onoff_pul>
								pwm_pul = 0;
    15f2:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <pwm_pul>
								pul_ready = 1;
    15f6:	41 e0       	ldi	r20, 0x01	; 1
    15f8:	40 93 31 04 	sts	0x0431, r20	; 0x800431 <pul_ready>
								printf("Pul come \n");
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	93 e0       	ldi	r25, 0x03	; 3
    1600:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
					}
					
					if (pulsos_pul != 0)		// Si la posición actual es distinta de la deseada
					{
						ActivarPWM_Pul(pwm_pul, onoff_pul);
						while(pul_ready != 1)
    1604:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f7       	brne	.-62     	; 0x15ce <main+0x94a>
								pul_ready = 1;
								printf("Pul come \n");
							}
						}
						
						abs_pulgar = abs_pulgar + (signo_pul * rel_pulgar);
    160c:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <signo_pul>
    1610:	50 91 1a 04 	lds	r21, 0x041A	; 0x80041a <signo_pul+0x1>
    1614:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <rel_pulgar>
    1618:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <rel_pulgar+0x1>
    161c:	48 9f       	mul	r20, r24
    161e:	90 01       	movw	r18, r0
    1620:	49 9f       	mul	r20, r25
    1622:	30 0d       	add	r19, r0
    1624:	58 9f       	mul	r21, r24
    1626:	30 0d       	add	r19, r0
    1628:	11 24       	eor	r1, r1
    162a:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <abs_pulgar>
    162e:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <abs_pulgar+0x1>
    1632:	82 0f       	add	r24, r18
    1634:	93 1f       	adc	r25, r19
    1636:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <abs_pulgar+0x1>
    163a:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <abs_pulgar>
						printf("Pul en pos: %d \n", abs_pulgar);
    163e:	9f 93       	push	r25
    1640:	8f 93       	push	r24
    1642:	1f 93       	push	r17
    1644:	0f 93       	push	r16
    1646:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
					}
					
					printf("PLM listo \n");
    1652:	8c ee       	ldi	r24, 0xEC	; 236
    1654:	92 e0       	ldi	r25, 0x02	; 2
    1656:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
    165a:	2d c3       	rjmp	.+1626   	; 0x1cb6 <main+0x1032>
					//PORTC |= (1<<pin_pul_listo);	// Avisar a Micro IMA que Micro PLM está en posición deseada
					//plm_listo = 1;					// Bandera: Indica que Micro PLM está en posición deseada
				}
				
				////////////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 4)			// Rutina para like ///////////////
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	09 f0       	breq	.+2      	; 0x1662 <main+0x9de>
    1660:	bc c0       	rjmp	.+376    	; 0x17da <main+0xb56>
				{
					if (pulsos_men != 0)				// Si la posición actual es distinta de la deseada
    1662:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <pulsos_men>
    1666:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <pulsos_men+0x1>
    166a:	89 2b       	or	r24, r25
    166c:	09 f4       	brne	.+2      	; 0x1670 <main+0x9ec>
    166e:	4a c0       	rjmp	.+148    	; 0x1704 <main+0xa80>
					{
						//pulsos_men = 1000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
						ActivarPWM_Men(pwm_men, onoff_men);
    1670:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
    1674:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
    1678:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						while(men_ready != 1)		// Mientras no esté en posición límite
    167c:	1a c0       	rjmp	.+52     	; 0x16b2 <main+0xa2e>
						{
							if (ADC_GetData(FSRpin_men) > 30)
    167e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_men>
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1688:	4f 97       	sbiw	r24, 0x1f	; 31
    168a:	9c f0       	brlt	.+38     	; 0x16b2 <main+0xa2e>
							{
								ActivarPWM_Men(0,0);
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
								count_enc_men = 0;
    1694:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <count_enc_men+0x1>
    1698:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <count_enc_men>
								onoff_men = 0;
    169c:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <onoff_men>
								pwm_men = 0;
    16a0:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <pwm_men>
								men_ready = 1;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <men_ready>
								printf("Men come \n");
    16aa:	87 ef       	ldi	r24, 0xF7	; 247
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
				{
					if (pulsos_men != 0)				// Si la posición actual es distinta de la deseada
					{
						//pulsos_men = 1000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
						ActivarPWM_Men(pwm_men, onoff_men);
						while(men_ready != 1)		// Mientras no esté en posición límite
    16b2:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <men_ready>
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	11 f7       	brne	.-60     	; 0x167e <main+0x9fa>
								men_ready = 1;
								printf("Men come \n");
							}
						}
						
						abs_menique = abs_menique + (signo_men * rel_menique);
    16ba:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <signo_men>
    16be:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <signo_men+0x1>
    16c2:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <rel_menique>
    16c6:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <rel_menique+0x1>
    16ca:	48 9f       	mul	r20, r24
    16cc:	90 01       	movw	r18, r0
    16ce:	49 9f       	mul	r20, r25
    16d0:	30 0d       	add	r19, r0
    16d2:	58 9f       	mul	r21, r24
    16d4:	30 0d       	add	r19, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <abs_menique>
    16dc:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <abs_menique+0x1>
    16e0:	82 0f       	add	r24, r18
    16e2:	93 1f       	adc	r25, r19
    16e4:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <abs_menique+0x1>
    16e8:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <abs_menique>
						printf("Men en pos: %d \n", abs_menique);
    16ec:	9f 93       	push	r25
    16ee:	8f 93       	push	r24
    16f0:	89 eb       	ldi	r24, 0xB9	; 185
    16f2:	92 e0       	ldi	r25, 0x02	; 2
    16f4:	9f 93       	push	r25
    16f6:	8f 93       	push	r24
    16f8:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
					}
					
					if (pulsos_lat != 0)		// Si la posición actual es distinta de la deseada
    1704:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <pulsos_lat>
    1708:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <pulsos_lat+0x1>
    170c:	89 2b       	or	r24, r25
    170e:	29 f1       	breq	.+74     	; 0x175a <main+0xad6>
					{
						pulsos_lat = 5000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1710:	28 e8       	ldi	r18, 0x88	; 136
    1712:	33 e1       	ldi	r19, 0x13	; 19
    1714:	30 93 0b 04 	sts	0x040B, r19	; 0x80040b <pulsos_lat+0x1>
    1718:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <pulsos_lat>
						ActivarPWM_Lat(pwm_lat, onoff_lat);
    171c:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    1720:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    1724:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
						while(lat_ready != 1)		// Mientras no alcance la posición guardada (límite) || (PINC & (1 << PINC3)) == 0
    1728:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	39 f0       	breq	.+14     	; 0x173e <main+0xaba>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1730:	30 ea       	ldi	r19, 0xA0	; 160
    1732:	3a 95       	dec	r19
    1734:	f1 f7       	brne	.-4      	; 0x1732 <main+0xaae>
    1736:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	c9 f7       	brne	.-14     	; 0x1730 <main+0xaac>
						{		// Espera indicación de motor listo para salir del loop
							_delay_us(30);
						}
						
						abs_lateral = 0; // abs_lateral + (signo_lat * rel_lateral);
    173e:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <abs_lateral+0x1>
    1742:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <abs_lateral>
						printf("Lat en pos: %d \n", abs_lateral);
    1746:	1f 92       	push	r1
    1748:	1f 92       	push	r1
    174a:	ff 92       	push	r15
    174c:	ef 92       	push	r14
    174e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
					}
					
					if (pulsos_pul != 0)		// Si la posición actual es distinta de la deseada
    175a:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsos_pul>
    175e:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsos_pul+0x1>
    1762:	89 2b       	or	r24, r25
    1764:	a9 f1       	breq	.+106    	; 0x17d0 <main+0xb4c>
					{
						pulsos_pul = 2000; 
    1766:	80 ed       	ldi	r24, 0xD0	; 208
    1768:	97 e0       	ldi	r25, 0x07	; 7
    176a:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <pulsos_pul+0x1>
    176e:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <pulsos_pul>
						ActivarPWM_Pul(pwm_pul, onoff_pul);
    1772:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    1776:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    177a:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						
						while(ADC_GetData(IRpin) < 245)
    177e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <IRpin>
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1788:	85 3f       	cpi	r24, 0xF5	; 245
    178a:	91 05       	cpc	r25, r1
    178c:	c4 f3       	brlt	.-16     	; 0x177e <main+0xafa>
						{		// Espera que lo detecte el sensor IR para salir de loop
						}
						
						ActivarPWM_Pul(0,0);
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						count_enc_pul = 0;
    1796:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <count_enc_pul+0x1>
    179a:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <count_enc_pul>
						onoff_pul = 0;
    179e:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <onoff_pul>
						pwm_pul = 0;
    17a2:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <pwm_pul>
						pul_ready = 1;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <pul_ready>
						printf("Pul come \n");
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	93 e0       	ldi	r25, 0x03	; 3
    17b0:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
						
						abs_pulgar = 0;  //abs_pulgar + (signo_pul * rel_pulgar);
    17b4:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <abs_pulgar+0x1>
    17b8:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <abs_pulgar>
						printf("Pul en pos: %d \n", abs_pulgar);
    17bc:	1f 92       	push	r1
    17be:	1f 92       	push	r1
    17c0:	1f 93       	push	r17
    17c2:	0f 93       	push	r16
    17c4:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
					}
					
					printf("PLM listo \n");
    17d0:	8c ee       	ldi	r24, 0xEC	; 236
    17d2:	92 e0       	ldi	r25, 0x02	; 2
    17d4:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
    17d8:	6e c2       	rjmp	.+1244   	; 0x1cb6 <main+0x1032>
					//PORTC |= (1<<pin_pul_listo);	// Avisar a Micro IMA que Micro PLM está en posición deseada
					//plm_listo = 1;					// Bandera: Indica que Micro PLM está en posición deseada
				}
				
				/////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 5)			// Rutina para movimiento de cuernos
    17da:	85 30       	cpi	r24, 0x05	; 5
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <main+0xb5c>
    17de:	c7 c0       	rjmp	.+398    	; 0x196e <main+0xcea>
				{
					if (pulsos_men != 0)
    17e0:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <pulsos_men>
    17e4:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <pulsos_men+0x1>
    17e8:	89 2b       	or	r24, r25
    17ea:	e1 f1       	breq	.+120    	; 0x1864 <main+0xbe0>
					{
						ActivarPWM_Men(pwm_men, onoff_men);
    17ec:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
    17f0:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
    17f4:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						while(men_ready != 1)
    17f8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <men_ready>
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	69 f0       	breq	.+26     	; 0x181a <main+0xb96>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1800:	9f ef       	ldi	r25, 0xFF	; 255
    1802:	29 ef       	ldi	r18, 0xF9	; 249
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	91 50       	subi	r25, 0x01	; 1
    1808:	20 40       	sbci	r18, 0x00	; 0
    180a:	30 40       	sbci	r19, 0x00	; 0
    180c:	e1 f7       	brne	.-8      	; 0x1806 <main+0xb82>
    180e:	00 c0       	rjmp	.+0      	; 0x1810 <main+0xb8c>
    1810:	00 00       	nop
    1812:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <men_ready>
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	99 f7       	brne	.-26     	; 0x1800 <main+0xb7c>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_menique = abs_menique + (signo_men * rel_menique);
    181a:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <signo_men>
    181e:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <signo_men+0x1>
    1822:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <rel_menique>
    1826:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <rel_menique+0x1>
    182a:	48 9f       	mul	r20, r24
    182c:	90 01       	movw	r18, r0
    182e:	49 9f       	mul	r20, r25
    1830:	30 0d       	add	r19, r0
    1832:	58 9f       	mul	r21, r24
    1834:	30 0d       	add	r19, r0
    1836:	11 24       	eor	r1, r1
    1838:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <abs_menique>
    183c:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <abs_menique+0x1>
    1840:	82 0f       	add	r24, r18
    1842:	93 1f       	adc	r25, r19
    1844:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <abs_menique+0x1>
    1848:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <abs_menique>
						printf("Men en pos: %d \n", abs_menique);
    184c:	9f 93       	push	r25
    184e:	8f 93       	push	r24
    1850:	89 eb       	ldi	r24, 0xB9	; 185
    1852:	92 e0       	ldi	r25, 0x02	; 2
    1854:	9f 93       	push	r25
    1856:	8f 93       	push	r24
    1858:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
					}
					
					if (pulsos_lat != 0)
    1864:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <pulsos_lat>
    1868:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <pulsos_lat+0x1>
    186c:	89 2b       	or	r24, r25
    186e:	d1 f1       	breq	.+116    	; 0x18e4 <main+0xc60>
					{
						ActivarPWM_Lat(pwm_lat, onoff_lat);
    1870:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    1874:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    1878:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
						while(lat_ready != 1)
    187c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	69 f0       	breq	.+26     	; 0x189e <main+0xc1a>
    1884:	4f ef       	ldi	r20, 0xFF	; 255
    1886:	89 ef       	ldi	r24, 0xF9	; 249
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	41 50       	subi	r20, 0x01	; 1
    188c:	80 40       	sbci	r24, 0x00	; 0
    188e:	90 40       	sbci	r25, 0x00	; 0
    1890:	e1 f7       	brne	.-8      	; 0x188a <main+0xc06>
    1892:	00 c0       	rjmp	.+0      	; 0x1894 <main+0xc10>
    1894:	00 00       	nop
    1896:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	99 f7       	brne	.-26     	; 0x1884 <main+0xc00>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_lateral = abs_lateral + (signo_lat * rel_lateral);
    189e:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <signo_lat>
    18a2:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <signo_lat+0x1>
    18a6:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rel_lateral>
    18aa:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <rel_lateral+0x1>
    18ae:	48 9f       	mul	r20, r24
    18b0:	90 01       	movw	r18, r0
    18b2:	49 9f       	mul	r20, r25
    18b4:	30 0d       	add	r19, r0
    18b6:	58 9f       	mul	r21, r24
    18b8:	30 0d       	add	r19, r0
    18ba:	11 24       	eor	r1, r1
    18bc:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <abs_lateral>
    18c0:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <abs_lateral+0x1>
    18c4:	82 0f       	add	r24, r18
    18c6:	93 1f       	adc	r25, r19
    18c8:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <abs_lateral+0x1>
    18cc:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <abs_lateral>
						printf("Lat en pos: %d \n", abs_lateral);
    18d0:	9f 93       	push	r25
    18d2:	8f 93       	push	r24
    18d4:	ff 92       	push	r15
    18d6:	ef 92       	push	r14
    18d8:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
					}
					
					if (pulsos_pul != 0)
    18e4:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsos_pul>
    18e8:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsos_pul+0x1>
    18ec:	89 2b       	or	r24, r25
    18ee:	d1 f1       	breq	.+116    	; 0x1964 <main+0xce0>
					{
						ActivarPWM_Pul(pwm_pul, onoff_pul);
    18f0:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    18f4:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    18f8:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						while(pul_ready != 1)
    18fc:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	69 f0       	breq	.+26     	; 0x191e <main+0xc9a>
    1904:	2f ef       	ldi	r18, 0xFF	; 255
    1906:	39 ef       	ldi	r19, 0xF9	; 249
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	21 50       	subi	r18, 0x01	; 1
    190c:	30 40       	sbci	r19, 0x00	; 0
    190e:	40 40       	sbci	r20, 0x00	; 0
    1910:	e1 f7       	brne	.-8      	; 0x190a <main+0xc86>
    1912:	00 c0       	rjmp	.+0      	; 0x1914 <main+0xc90>
    1914:	00 00       	nop
    1916:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	99 f7       	brne	.-26     	; 0x1904 <main+0xc80>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_pulgar = abs_pulgar + (signo_pul * rel_pulgar);
    191e:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <signo_pul>
    1922:	50 91 1a 04 	lds	r21, 0x041A	; 0x80041a <signo_pul+0x1>
    1926:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <rel_pulgar>
    192a:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <rel_pulgar+0x1>
    192e:	48 9f       	mul	r20, r24
    1930:	90 01       	movw	r18, r0
    1932:	49 9f       	mul	r20, r25
    1934:	30 0d       	add	r19, r0
    1936:	58 9f       	mul	r21, r24
    1938:	30 0d       	add	r19, r0
    193a:	11 24       	eor	r1, r1
    193c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <abs_pulgar>
    1940:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <abs_pulgar+0x1>
    1944:	82 0f       	add	r24, r18
    1946:	93 1f       	adc	r25, r19
    1948:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <abs_pulgar+0x1>
    194c:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <abs_pulgar>
						printf("Pul en pos: %d \n", abs_pulgar);
    1950:	9f 93       	push	r25
    1952:	8f 93       	push	r24
    1954:	1f 93       	push	r17
    1956:	0f 93       	push	r16
    1958:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
					}
					
					printf("PLM listo \n");
    1964:	8c ee       	ldi	r24, 0xEC	; 236
    1966:	92 e0       	ldi	r25, 0x02	; 2
    1968:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
    196c:	a4 c1       	rjmp	.+840    	; 0x1cb6 <main+0x1032>
					//PORTC |= (1<<pin_pul_listo);	// Avisar a Micro IMA que Micro PLM está en posición deseada
					//plm_listo = 1;					// Bandera: Indica que Micro PLM está en posición deseada
				}
				
				/////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 6)			// Rutina para movimiento de esfera (palma fuera)
    196e:	86 30       	cpi	r24, 0x06	; 6
    1970:	09 f0       	breq	.+2      	; 0x1974 <main+0xcf0>
    1972:	f2 c0       	rjmp	.+484    	; 0x1b58 <main+0xed4>
				{
					printf("In 6 \n");
    1974:	8b e0       	ldi	r24, 0x0B	; 11
    1976:	93 e0       	ldi	r25, 0x03	; 3
    1978:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
    197c:	8f e1       	ldi	r24, 0x1F	; 31
    197e:	9e e4       	ldi	r25, 0x4E	; 78
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <main+0xcfc>
    1984:	00 c0       	rjmp	.+0      	; 0x1986 <main+0xd02>
    1986:	00 00       	nop
					_delay_ms(5);
					if (pulsos_men != 0)
    1988:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <pulsos_men>
    198c:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <pulsos_men+0x1>
    1990:	89 2b       	or	r24, r25
    1992:	09 f4       	brne	.+2      	; 0x1996 <main+0xd12>
    1994:	46 c0       	rjmp	.+140    	; 0x1a22 <main+0xd9e>
					{
						printf("In men \n");
    1996:	81 e1       	ldi	r24, 0x11	; 17
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
						ActivarPWM_Men(pwm_men, onoff_men);
    199e:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
    19a2:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
    19a6:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						while(men_ready != 1)
    19aa:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <men_ready>
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	69 f0       	breq	.+26     	; 0x19cc <main+0xd48>
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	29 ef       	ldi	r18, 0xF9	; 249
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	91 50       	subi	r25, 0x01	; 1
    19ba:	20 40       	sbci	r18, 0x00	; 0
    19bc:	30 40       	sbci	r19, 0x00	; 0
    19be:	e1 f7       	brne	.-8      	; 0x19b8 <main+0xd34>
    19c0:	00 c0       	rjmp	.+0      	; 0x19c2 <main+0xd3e>
    19c2:	00 00       	nop
    19c4:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <men_ready>
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	99 f7       	brne	.-26     	; 0x19b2 <main+0xd2e>
						{		// Espera indicación de motor listo para salir del loop
							//printf("M: %d \n", men_ready);
							_delay_ms(20);
						}
						abs_menique = abs_menique + (signo_men * rel_menique);
    19cc:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <signo_men>
    19d0:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <signo_men+0x1>
    19d4:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <rel_menique>
    19d8:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <rel_menique+0x1>
    19dc:	48 9f       	mul	r20, r24
    19de:	90 01       	movw	r18, r0
    19e0:	49 9f       	mul	r20, r25
    19e2:	30 0d       	add	r19, r0
    19e4:	58 9f       	mul	r21, r24
    19e6:	30 0d       	add	r19, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <abs_menique>
    19ee:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <abs_menique+0x1>
    19f2:	82 0f       	add	r24, r18
    19f4:	93 1f       	adc	r25, r19
    19f6:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <abs_menique+0x1>
    19fa:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <abs_menique>
						printf("Men en pos: %d \n", abs_menique);
    19fe:	9f 93       	push	r25
    1a00:	8f 93       	push	r24
    1a02:	89 eb       	ldi	r24, 0xB9	; 185
    1a04:	92 e0       	ldi	r25, 0x02	; 2
    1a06:	9f 93       	push	r25
    1a08:	8f 93       	push	r24
    1a0a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1a0e:	8f e1       	ldi	r24, 0x1F	; 31
    1a10:	9e e4       	ldi	r25, 0x4E	; 78
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <main+0xd8e>
    1a16:	00 c0       	rjmp	.+0      	; 0x1a18 <main+0xd94>
    1a18:	00 00       	nop
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
						_delay_ms(5);
					}
					
					if (pulsos_lat != 0)
    1a22:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <pulsos_lat>
    1a26:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <pulsos_lat+0x1>
    1a2a:	89 2b       	or	r24, r25
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <main+0xdac>
    1a2e:	44 c0       	rjmp	.+136    	; 0x1ab8 <main+0xe34>
					{
						printf("In lat \n");
    1a30:	89 e1       	ldi	r24, 0x19	; 25
    1a32:	93 e0       	ldi	r25, 0x03	; 3
    1a34:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
						ActivarPWM_Lat(pwm_lat, onoff_lat);
    1a38:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    1a3c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    1a40:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
						while(lat_ready != 1)
    1a44:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	69 f0       	breq	.+26     	; 0x1a66 <main+0xde2>
    1a4c:	9f ef       	ldi	r25, 0xFF	; 255
    1a4e:	29 ef       	ldi	r18, 0xF9	; 249
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	91 50       	subi	r25, 0x01	; 1
    1a54:	20 40       	sbci	r18, 0x00	; 0
    1a56:	30 40       	sbci	r19, 0x00	; 0
    1a58:	e1 f7       	brne	.-8      	; 0x1a52 <main+0xdce>
    1a5a:	00 c0       	rjmp	.+0      	; 0x1a5c <main+0xdd8>
    1a5c:	00 00       	nop
    1a5e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	99 f7       	brne	.-26     	; 0x1a4c <main+0xdc8>
						{		// Espera indicación de motor listo para salir del loop
							//printf("L: %d \n", lat_ready);
							_delay_ms(20);
						}
						abs_lateral = abs_lateral + (signo_lat * rel_lateral);
    1a66:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <signo_lat>
    1a6a:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <signo_lat+0x1>
    1a6e:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rel_lateral>
    1a72:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <rel_lateral+0x1>
    1a76:	48 9f       	mul	r20, r24
    1a78:	90 01       	movw	r18, r0
    1a7a:	49 9f       	mul	r20, r25
    1a7c:	30 0d       	add	r19, r0
    1a7e:	58 9f       	mul	r21, r24
    1a80:	30 0d       	add	r19, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <abs_lateral>
    1a88:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <abs_lateral+0x1>
    1a8c:	82 0f       	add	r24, r18
    1a8e:	93 1f       	adc	r25, r19
    1a90:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <abs_lateral+0x1>
    1a94:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <abs_lateral>
						printf("Lat en pos: %d \n", abs_lateral);
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	ff 92       	push	r15
    1a9e:	ef 92       	push	r14
    1aa0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1aa4:	8f e1       	ldi	r24, 0x1F	; 31
    1aa6:	9e e4       	ldi	r25, 0x4E	; 78
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <main+0xe24>
    1aac:	00 c0       	rjmp	.+0      	; 0x1aae <main+0xe2a>
    1aae:	00 00       	nop
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
						_delay_ms(5);
					}
					
					if (pulsos_pul != 0)
    1ab8:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsos_pul>
    1abc:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsos_pul+0x1>
    1ac0:	89 2b       	or	r24, r25
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <main+0xe42>
    1ac4:	44 c0       	rjmp	.+136    	; 0x1b4e <main+0xeca>
					{
						printf("In pul \n");
    1ac6:	81 e2       	ldi	r24, 0x21	; 33
    1ac8:	93 e0       	ldi	r25, 0x03	; 3
    1aca:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
						ActivarPWM_Pul(pwm_pul, onoff_pul);
    1ace:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    1ad2:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    1ad6:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						while(pul_ready != 1)
    1ada:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	69 f0       	breq	.+26     	; 0x1afc <main+0xe78>
    1ae2:	9f ef       	ldi	r25, 0xFF	; 255
    1ae4:	29 ef       	ldi	r18, 0xF9	; 249
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	91 50       	subi	r25, 0x01	; 1
    1aea:	20 40       	sbci	r18, 0x00	; 0
    1aec:	30 40       	sbci	r19, 0x00	; 0
    1aee:	e1 f7       	brne	.-8      	; 0x1ae8 <main+0xe64>
    1af0:	00 c0       	rjmp	.+0      	; 0x1af2 <main+0xe6e>
    1af2:	00 00       	nop
    1af4:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <pul_ready>
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	99 f7       	brne	.-26     	; 0x1ae2 <main+0xe5e>
						{		// Espera indicación de motor listo para salir del loop
							//printf("P: %d \n", pul_ready);
							_delay_ms(20);
						}
						abs_pulgar = abs_pulgar + (signo_pul * rel_pulgar);
    1afc:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <signo_pul>
    1b00:	50 91 1a 04 	lds	r21, 0x041A	; 0x80041a <signo_pul+0x1>
    1b04:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <rel_pulgar>
    1b08:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <rel_pulgar+0x1>
    1b0c:	48 9f       	mul	r20, r24
    1b0e:	90 01       	movw	r18, r0
    1b10:	49 9f       	mul	r20, r25
    1b12:	30 0d       	add	r19, r0
    1b14:	58 9f       	mul	r21, r24
    1b16:	30 0d       	add	r19, r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <abs_pulgar>
    1b1e:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <abs_pulgar+0x1>
    1b22:	82 0f       	add	r24, r18
    1b24:	93 1f       	adc	r25, r19
    1b26:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <abs_pulgar+0x1>
    1b2a:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <abs_pulgar>
						printf("Pul en pos: %d \n", abs_pulgar);
    1b2e:	9f 93       	push	r25
    1b30:	8f 93       	push	r24
    1b32:	1f 93       	push	r17
    1b34:	0f 93       	push	r16
    1b36:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1b3a:	8f e1       	ldi	r24, 0x1F	; 31
    1b3c:	9e e4       	ldi	r25, 0x4E	; 78
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <main+0xeba>
    1b42:	00 c0       	rjmp	.+0      	; 0x1b44 <main+0xec0>
    1b44:	00 00       	nop
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
						_delay_ms(5);
					}
					
					printf("PLM listo \n");
    1b4e:	8c ee       	ldi	r24, 0xEC	; 236
    1b50:	92 e0       	ldi	r25, 0x02	; 2
    1b52:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
    1b56:	af c0       	rjmp	.+350    	; 0x1cb6 <main+0x1032>
					//_delay_ms(200);
					//plm_listo = 1;					// Bandera: Indica que Micro PLM está en posición deseada
				}
				
				/////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 7)			// Rutina para movimiento de pistola
    1b58:	87 30       	cpi	r24, 0x07	; 7
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <main+0xeda>
    1b5c:	ac c0       	rjmp	.+344    	; 0x1cb6 <main+0x1032>
				{
					if (pulsos_men != 0)
    1b5e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <pulsos_men>
    1b62:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <pulsos_men+0x1>
    1b66:	89 2b       	or	r24, r25
    1b68:	b1 f1       	breq	.+108    	; 0x1bd6 <main+0xf52>
					{
						pulsos_men = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1b6a:	20 ed       	ldi	r18, 0xD0	; 208
    1b6c:	37 e0       	ldi	r19, 0x07	; 7
    1b6e:	30 93 09 04 	sts	0x0409, r19	; 0x800409 <pulsos_men+0x1>
    1b72:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <pulsos_men>
						ActivarPWM_Men(pwm_men, onoff_men);
    1b76:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
    1b7a:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
    1b7e:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						while(ADC_GetData(FSRpin_men)<30)		// Mientras no toque la palma
    1b82:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_men>
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1b8c:	4e 97       	sbiw	r24, 0x1e	; 30
    1b8e:	cc f3       	brlt	.-14     	; 0x1b82 <main+0xefe>
						{
						}
						ActivarPWM_Men(0,0);
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
						count_enc_men = 0;
    1b98:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <count_enc_men+0x1>
    1b9c:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <count_enc_men>
						onoff_men = 0;
    1ba0:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <onoff_men>
						pwm_men = 0;
    1ba4:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <pwm_men>
						men_ready = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <men_ready>
						printf("Men come \n");
    1bae:	87 ef       	ldi	r24, 0xF7	; 247
    1bb0:	92 e0       	ldi	r25, 0x02	; 2
    1bb2:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
						
						abs_menique = 0; // abs_menique + (signo_men * rel_menique);
    1bb6:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <abs_menique+0x1>
    1bba:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <abs_menique>
						printf("Men en pos: %d \n", abs_menique);
    1bbe:	1f 92       	push	r1
    1bc0:	1f 92       	push	r1
    1bc2:	89 eb       	ldi	r24, 0xB9	; 185
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
    1bc6:	9f 93       	push	r25
    1bc8:	8f 93       	push	r24
    1bca:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
					}
					
					if (pulsos_lat != 0)
    1bd6:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <pulsos_lat>
    1bda:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <pulsos_lat+0x1>
    1bde:	89 2b       	or	r24, r25
    1be0:	59 f1       	breq	.+86     	; 0x1c38 <main+0xfb4>
					{
						pulsos_lat = 5000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1be2:	88 e8       	ldi	r24, 0x88	; 136
    1be4:	93 e1       	ldi	r25, 0x13	; 19
    1be6:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <pulsos_lat+0x1>
    1bea:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <pulsos_lat>
						ActivarPWM_Lat(pwm_lat, onoff_lat);
    1bee:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    1bf2:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    1bf6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
						while(lat_ready != 1)		// Mientras no alcance la posición guardada (límite)
    1bfa:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	69 f0       	breq	.+26     	; 0x1c1c <main+0xf98>
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	29 ef       	ldi	r18, 0xF9	; 249
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	91 50       	subi	r25, 0x01	; 1
    1c0a:	20 40       	sbci	r18, 0x00	; 0
    1c0c:	30 40       	sbci	r19, 0x00	; 0
    1c0e:	e1 f7       	brne	.-8      	; 0x1c08 <main+0xf84>
    1c10:	00 c0       	rjmp	.+0      	; 0x1c12 <main+0xf8e>
    1c12:	00 00       	nop
    1c14:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <lat_ready>
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	99 f7       	brne	.-26     	; 0x1c02 <main+0xf7e>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						
						abs_lateral = 0; // abs_lateral + (signo_lat * rel_lateral);
    1c1c:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <abs_lateral+0x1>
    1c20:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <abs_lateral>
						printf("Lat en pos: %d \n", abs_lateral);
    1c24:	1f 92       	push	r1
    1c26:	1f 92       	push	r1
    1c28:	ff 92       	push	r15
    1c2a:	ef 92       	push	r14
    1c2c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
					}
					
					if (pulsos_pul != 0)
    1c38:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <pulsos_pul>
    1c3c:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <pulsos_pul+0x1>
    1c40:	89 2b       	or	r24, r25
    1c42:	a9 f1       	breq	.+106    	; 0x1cae <main+0x102a>
					{
						pulsos_pul = 2000;
    1c44:	80 ed       	ldi	r24, 0xD0	; 208
    1c46:	97 e0       	ldi	r25, 0x07	; 7
    1c48:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <pulsos_pul+0x1>
    1c4c:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <pulsos_pul>
						ActivarPWM_Pul(pwm_pul, onoff_pul);
    1c50:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    1c54:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    1c58:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						
						while(ADC_GetData(IRpin) < 245)
    1c5c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <IRpin>
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1c66:	85 3f       	cpi	r24, 0xF5	; 245
    1c68:	91 05       	cpc	r25, r1
    1c6a:	c4 f3       	brlt	.-16     	; 0x1c5c <main+0xfd8>
						{		// Espera que lo detecte el sensor IR para salir de loop
						}
						
						ActivarPWM_Pul(0,0);
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
						count_enc_pul = 0;
    1c74:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <count_enc_pul+0x1>
    1c78:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <count_enc_pul>
						onoff_pul = 0;
    1c7c:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <onoff_pul>
						pwm_pul = 0;
    1c80:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <pwm_pul>
						pul_ready = 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <pul_ready>
						printf("Pul come \n");
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	93 e0       	ldi	r25, 0x03	; 3
    1c8e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
						
						abs_pulgar = 0;  //abs_pulgar + (signo_pul * rel_pulgar);
    1c92:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <abs_pulgar+0x1>
    1c96:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <abs_pulgar>
						printf("Pul en pos: %d \n", abs_pulgar);
    1c9a:	1f 92       	push	r1
    1c9c:	1f 92       	push	r1
    1c9e:	1f 93       	push	r17
    1ca0:	0f 93       	push	r16
    1ca2:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
					}
					
					printf("PLM listo \n");
    1cae:	8c ee       	ldi	r24, 0xEC	; 236
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
				
						
				//////////////////// Checar que IMA y PLM estén en posición deseada ///////////////////////////////
				//_delay_ms(200);					// Esperar
				//PORTC &= ~ (1<<pin_pul_listo);  // Poner en bajo señal enviada
				pulsos_pul = 0;
    1cb6:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <pulsos_pul+0x1>
    1cba:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <pulsos_pul>
				pulsos_lat = 0;
    1cbe:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <pulsos_lat+0x1>
    1cc2:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <pulsos_lat>
				pulsos_men = 0;
    1cc6:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <pulsos_men+0x1>
    1cca:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <pulsos_men>
				plm_listo = 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <plm_listo>
				
				//////////////////// Sección en prueba ///////////////////////////////
				////////// Reporte de posición de motores y fuerza aplicada //////////
				
				printf("Pulgar: %d \n", abs_pulgar);
    1cd4:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <abs_pulgar+0x1>
    1cd8:	8f 93       	push	r24
    1cda:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <abs_pulgar>
    1cde:	8f 93       	push	r24
    1ce0:	7f 92       	push	r7
    1ce2:	6f 92       	push	r6
    1ce4:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
				printf("Lateral: %d \n", abs_lateral);
    1ce8:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <abs_lateral+0x1>
    1cec:	8f 93       	push	r24
    1cee:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <abs_lateral>
    1cf2:	8f 93       	push	r24
    1cf4:	5f 92       	push	r5
    1cf6:	4f 92       	push	r4
    1cf8:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
				printf("Menique: %d \n", abs_menique);
    1cfc:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <abs_menique+0x1>
    1d00:	8f 93       	push	r24
    1d02:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <abs_menique>
    1d06:	8f 93       	push	r24
    1d08:	3f 92       	push	r3
    1d0a:	2f 92       	push	r2
    1d0c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
				
				printf("Fuerza Pul: %d \n", ADC_GetData(FSRpin_pul));
    1d10:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <FSRpin_pul>
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1d1a:	9f 93       	push	r25
    1d1c:	8f 93       	push	r24
    1d1e:	df 92       	push	r13
    1d20:	cf 92       	push	r12
    1d22:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
				printf("Fuerza Men: %d \n", ADC_GetData(FSRpin_men));
    1d26:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_men>
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1d30:	9f 93       	push	r25
    1d32:	8f 93       	push	r24
    1d34:	bf 92       	push	r11
    1d36:	af 92       	push	r10
    1d38:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
				
				////////////////////// Fin de reporte ////////////////////////////////
				//////////////////////////////////////////////////////////////////////
				
				PORTC &= ~ (1<<pin_pul_listo);  // Poner pin en bajo
    1d3c:	98 b1       	in	r25, 0x08	; 8
    1d3e:	94 01       	movw	r18, r8
    1d40:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <pin_pul_listo>
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <main+0x10c6>
    1d46:	22 0f       	add	r18, r18
    1d48:	33 1f       	adc	r19, r19
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <main+0x10c2>
    1d4e:	82 2f       	mov	r24, r18
    1d50:	80 95       	com	r24
    1d52:	89 23       	and	r24, r25
    1d54:	88 b9       	out	0x08, r24	; 8
    1d56:	94 01       	movw	r18, r8
    1d58:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <pin_pul_listo>
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <main+0x10de>
    1d5e:	22 0f       	add	r18, r18
    1d60:	33 1f       	adc	r19, r19
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <main+0x10da>
    1d66:	a4 01       	movw	r20, r8
    1d68:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <pin_ima_listo>
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <main+0x10ee>
    1d6e:	44 0f       	add	r20, r20
    1d70:	55 1f       	adc	r21, r21
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <main+0x10ea>
				
				while (count_event != 3)		// Mientras IMA no esté en posición, no hacer nada
    1d76:	8d b7       	in	r24, 0x3d	; 61
    1d78:	9e b7       	in	r25, 0x3e	; 62
    1d7a:	44 96       	adiw	r24, 0x14	; 20
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	9e bf       	out	0x3e, r25	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	8d bf       	out	0x3d, r24	; 61
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <main+0x1122>
				{
					if ( ((PINC & (1 << pin_pul_listo)) == 0) && ((PINC & (1 << pin_ima_listo)) != 0) )
    1d88:	86 b1       	in	r24, 0x06	; 6
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	82 23       	and	r24, r18
    1d8e:	93 23       	and	r25, r19
    1d90:	89 2b       	or	r24, r25
    1d92:	59 f4       	brne	.+22     	; 0x1daa <main+0x1126>
    1d94:	86 b1       	in	r24, 0x06	; 6
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	84 23       	and	r24, r20
    1d9a:	95 23       	and	r25, r21
    1d9c:	89 2b       	or	r24, r25
    1d9e:	29 f0       	breq	.+10     	; 0x1daa <main+0x1126>
					{
						count_event = 3;
    1da0:	93 e0       	ldi	r25, 0x03	; 3
    1da2:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <count_event>
				////////////////////// Fin de reporte ////////////////////////////////
				//////////////////////////////////////////////////////////////////////
				
				PORTC &= ~ (1<<pin_pul_listo);  // Poner pin en bajo
				
				while (count_event != 3)		// Mientras IMA no esté en posición, no hacer nada
    1da6:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <count_event>
    1daa:	63 30       	cpi	r22, 0x03	; 3
    1dac:	69 f7       	brne	.-38     	; 0x1d88 <main+0x1104>
					{
						count_event = 3;
					}
				}
				
				ima_listo = 1;					// Cuando IMA esté en posición (count_event = 2), poner bandera en 1
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <ima_listo>
				printf("Listos \n");
    1db4:	84 e7       	ldi	r24, 0x74	; 116
    1db6:	93 e0       	ldi	r25, 0x03	; 3
    1db8:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
    1dbc:	8f e1       	ldi	r24, 0x1F	; 31
    1dbe:	9e e4       	ldi	r25, 0x4E	; 78
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <main+0x113c>
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <main+0x1142>
    1dc6:	00 00       	nop
				_delay_ms(5);
				
				if (plm_listo == 1 && ima_listo == 1)	// Si IMA y PLM están en posición, hacer count_event=1
    1dc8:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <plm_listo>
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	81 f4       	brne	.+32     	; 0x1df0 <main+0x116c>
    1dd0:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <ima_listo>
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	61 f4       	brne	.+24     	; 0x1df0 <main+0x116c>
				{										// para que pueda volver a leer señales de control
					count_event = 1;
    1dd8:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <count_event>
					pul_ready = 0;
    1ddc:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <pul_ready>
					lat_ready = 0;
    1de0:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <lat_ready>
					men_ready = 0;
    1de4:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <men_ready>
					plm_listo = 0;
    1de8:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <plm_listo>
					ima_listo = 0;
    1dec:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <ima_listo>
				}
				
			}
			
			printf("Wait new \n");
    1df0:	8c e7       	ldi	r24, 0x7C	; 124
    1df2:	93 e0       	ldi	r25, 0x03	; 3
    1df4:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
			getSerialParams();   // En prueba
    1df8:	0e 94 6f 01 	call	0x2de	; 0x2de <getSerialParams>
	//	printf("E1 \n");
	// Fin de paso 1
	
	// Paso 2: Detección de movimientos
	// if(count_event == 1)
		while(count_event == 1)    // While en prueba
    1dfc:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <count_event>
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <main+0x1182>
    1e04:	49 c8       	rjmp	.-3950   	; 0xe98 <main+0x214>
		}
		
		// Fin de paso 2
		
		
		if(serial_pul == 1)
    1e06:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <serial_pul>
    1e0a:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <serial_pul+0x1>
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <main+0x1190>
    1e12:	58 c0       	rjmp	.+176    	; 0x1ec4 <main+0x1240>
		{
			if (serialCode == 0)
    1e14:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
    1e18:	81 11       	cpse	r24, r1
    1e1a:	29 c0       	rjmp	.+82     	; 0x1e6e <main+0x11ea>
			{
				pwm_pul = 100;
    1e1c:	84 e6       	ldi	r24, 0x64	; 100
    1e1e:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <pwm_pul>
				onoff_pul = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <onoff_pul>
				//dir_pul = 1;
				PORTD |= (1<<dirpin_pul);
    1e28:	2b b1       	in	r18, 0x0b	; 11
    1e2a:	c4 01       	movw	r24, r8
    1e2c:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <dirpin_pul>
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <main+0x11b2>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <main+0x11ae>
    1e3a:	82 2b       	or	r24, r18
    1e3c:	8b b9       	out	0x0b, r24	; 11
				//PORTC &= ~(1 << 2);
				printf("Abrir pulgar \n");
    1e3e:	86 e8       	ldi	r24, 0x86	; 134
    1e40:	93 e0       	ldi	r25, 0x03	; 3
    1e42:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
				serial_pul = 0;
    1e46:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <serial_pul+0x1>
    1e4a:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <serial_pul>
				ActivarPWM_Pul(pwm_pul, onoff_pul);
    1e4e:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    1e52:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    1e56:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
    1e5a:	9f ef       	ldi	r25, 0xFF	; 255
    1e5c:	23 ec       	ldi	r18, 0xC3	; 195
    1e5e:	39 e0       	ldi	r19, 0x09	; 9
    1e60:	91 50       	subi	r25, 0x01	; 1
    1e62:	20 40       	sbci	r18, 0x00	; 0
    1e64:	30 40       	sbci	r19, 0x00	; 0
    1e66:	e1 f7       	brne	.-8      	; 0x1e60 <main+0x11dc>
    1e68:	00 c0       	rjmp	.+0      	; 0x1e6a <main+0x11e6>
    1e6a:	00 00       	nop
    1e6c:	2b c0       	rjmp	.+86     	; 0x1ec4 <main+0x1240>
				_delay_ms(200);
			}
			else if (serialCode == 1)
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	49 f5       	brne	.+82     	; 0x1ec4 <main+0x1240>
			{
				pwm_pul = 100;
    1e72:	84 e6       	ldi	r24, 0x64	; 100
    1e74:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <pwm_pul>
				onoff_pul = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <onoff_pul>
				//dir_pul = 1;
				//PORTD |= (1<<pwmpin_pul);
				PORTD &= ~(1 << dirpin_pul);
    1e7e:	8b b1       	in	r24, 0x0b	; 11
    1e80:	94 01       	movw	r18, r8
    1e82:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <dirpin_pul>
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <main+0x1208>
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	0a 94       	dec	r0
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <main+0x1204>
    1e90:	20 95       	com	r18
    1e92:	82 23       	and	r24, r18
    1e94:	8b b9       	out	0x0b, r24	; 11
				printf("Cerrar pulgar \n");
    1e96:	84 e9       	ldi	r24, 0x94	; 148
    1e98:	93 e0       	ldi	r25, 0x03	; 3
    1e9a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
				serial_pul = 0;
    1e9e:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <serial_pul+0x1>
    1ea2:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <serial_pul>
				ActivarPWM_Pul(pwm_pul, onoff_pul);
    1ea6:	60 91 3a 04 	lds	r22, 0x043A	; 0x80043a <onoff_pul>
    1eaa:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <pwm_pul>
    1eae:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
    1eb2:	4f ef       	ldi	r20, 0xFF	; 255
    1eb4:	83 ec       	ldi	r24, 0xC3	; 195
    1eb6:	99 e0       	ldi	r25, 0x09	; 9
    1eb8:	41 50       	subi	r20, 0x01	; 1
    1eba:	80 40       	sbci	r24, 0x00	; 0
    1ebc:	90 40       	sbci	r25, 0x00	; 0
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <main+0x1234>
    1ec0:	00 c0       	rjmp	.+0      	; 0x1ec2 <main+0x123e>
    1ec2:	00 00       	nop
				_delay_ms(200);
			}
			
		}

		if(serial_lat == 1)
    1ec4:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <serial_lat>
    1ec8:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <serial_lat+0x1>
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <main+0x124e>
    1ed0:	58 c0       	rjmp	.+176    	; 0x1f82 <main+0x12fe>
		{
			if (serialCode == 2)
    1ed2:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	49 f5       	brne	.+82     	; 0x1f2c <main+0x12a8>
			{
				pwm_lat = 100;
    1eda:	84 e6       	ldi	r24, 0x64	; 100
    1edc:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <pwm_lat>
				onoff_lat = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <onoff_lat>
				//dir_lat = 1;
				PORTB |= (1<<dirpin_lat);
    1ee6:	25 b1       	in	r18, 0x05	; 5
    1ee8:	c4 01       	movw	r24, r8
    1eea:	00 90 32 04 	lds	r0, 0x0432	; 0x800432 <dirpin_lat>
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <main+0x1270>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <main+0x126c>
    1ef8:	82 2b       	or	r24, r18
    1efa:	85 b9       	out	0x05, r24	; 5
				printf("Abrir lat \n");
    1efc:	83 ea       	ldi	r24, 0xA3	; 163
    1efe:	93 e0       	ldi	r25, 0x03	; 3
    1f00:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
				serial_lat = 0;
    1f04:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <serial_lat+0x1>
    1f08:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <serial_lat>
				ActivarPWM_Lat(pwm_lat, onoff_lat);
    1f0c:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    1f10:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    1f14:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
    1f18:	2f ef       	ldi	r18, 0xFF	; 255
    1f1a:	33 ec       	ldi	r19, 0xC3	; 195
    1f1c:	49 e0       	ldi	r20, 0x09	; 9
    1f1e:	21 50       	subi	r18, 0x01	; 1
    1f20:	30 40       	sbci	r19, 0x00	; 0
    1f22:	40 40       	sbci	r20, 0x00	; 0
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <main+0x129a>
    1f26:	00 c0       	rjmp	.+0      	; 0x1f28 <main+0x12a4>
    1f28:	00 00       	nop
    1f2a:	2b c0       	rjmp	.+86     	; 0x1f82 <main+0x12fe>
				_delay_ms(200);
			}
			else if (serialCode == 3)
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	49 f5       	brne	.+82     	; 0x1f82 <main+0x12fe>
			{
				pwm_lat = 100;
    1f30:	84 e6       	ldi	r24, 0x64	; 100
    1f32:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <pwm_lat>
				onoff_lat = 1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <onoff_lat>
				//dir_lat = 1;
				//PORTB |= (1<<pwmpin_lat);
				PORTB &= ~(1 << dirpin_lat);
    1f3c:	85 b1       	in	r24, 0x05	; 5
    1f3e:	94 01       	movw	r18, r8
    1f40:	00 90 32 04 	lds	r0, 0x0432	; 0x800432 <dirpin_lat>
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <main+0x12c6>
    1f46:	22 0f       	add	r18, r18
    1f48:	33 1f       	adc	r19, r19
    1f4a:	0a 94       	dec	r0
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <main+0x12c2>
    1f4e:	20 95       	com	r18
    1f50:	82 23       	and	r24, r18
    1f52:	85 b9       	out	0x05, r24	; 5
				printf("Cerrar lat \n");
    1f54:	8e ea       	ldi	r24, 0xAE	; 174
    1f56:	93 e0       	ldi	r25, 0x03	; 3
    1f58:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
				serial_lat = 0;
    1f5c:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <serial_lat+0x1>
    1f60:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <serial_lat>
				ActivarPWM_Lat(pwm_lat, onoff_lat);
    1f64:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <onoff_lat>
    1f68:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <pwm_lat>
    1f6c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
    1f70:	8f ef       	ldi	r24, 0xFF	; 255
    1f72:	93 ec       	ldi	r25, 0xC3	; 195
    1f74:	29 e0       	ldi	r18, 0x09	; 9
    1f76:	81 50       	subi	r24, 0x01	; 1
    1f78:	90 40       	sbci	r25, 0x00	; 0
    1f7a:	20 40       	sbci	r18, 0x00	; 0
    1f7c:	e1 f7       	brne	.-8      	; 0x1f76 <main+0x12f2>
    1f7e:	00 c0       	rjmp	.+0      	; 0x1f80 <main+0x12fc>
    1f80:	00 00       	nop
				_delay_ms(200);
			}
		}
		
		if(serial_men == 1)
    1f82:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <serial_men>
    1f86:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <serial_men+0x1>
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <main+0x130c>
    1f8e:	58 c0       	rjmp	.+176    	; 0x2040 <main+0x13bc>
		{
			if (serialCode == 4)
    1f90:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serialCode>
    1f94:	84 30       	cpi	r24, 0x04	; 4
    1f96:	49 f5       	brne	.+82     	; 0x1fea <main+0x1366>
			{
				pwm_men = 100;
    1f98:	84 e6       	ldi	r24, 0x64	; 100
    1f9a:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <pwm_men>
				onoff_men = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <onoff_men>
				//dir_men = 1;
				PORTB |= (1<<dirpin_men);
    1fa4:	25 b1       	in	r18, 0x05	; 5
    1fa6:	c4 01       	movw	r24, r8
    1fa8:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_men>
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <main+0x132e>
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	0a 94       	dec	r0
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <main+0x132a>
    1fb6:	82 2b       	or	r24, r18
    1fb8:	85 b9       	out	0x05, r24	; 5
				printf("Abrir men \n");
    1fba:	8a eb       	ldi	r24, 0xBA	; 186
    1fbc:	93 e0       	ldi	r25, 0x03	; 3
    1fbe:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
				serial_men = 0;
    1fc2:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <serial_men+0x1>
    1fc6:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <serial_men>
				ActivarPWM_Men(pwm_men, onoff_men);
    1fca:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
    1fce:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
    1fd2:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
    1fd6:	3f ef       	ldi	r19, 0xFF	; 255
    1fd8:	43 ec       	ldi	r20, 0xC3	; 195
    1fda:	89 e0       	ldi	r24, 0x09	; 9
    1fdc:	31 50       	subi	r19, 0x01	; 1
    1fde:	40 40       	sbci	r20, 0x00	; 0
    1fe0:	80 40       	sbci	r24, 0x00	; 0
    1fe2:	e1 f7       	brne	.-8      	; 0x1fdc <main+0x1358>
    1fe4:	00 c0       	rjmp	.+0      	; 0x1fe6 <main+0x1362>
    1fe6:	00 00       	nop
    1fe8:	2b c0       	rjmp	.+86     	; 0x2040 <main+0x13bc>
				_delay_ms(200);
			}
			else if (serialCode == 5)
    1fea:	85 30       	cpi	r24, 0x05	; 5
    1fec:	49 f5       	brne	.+82     	; 0x2040 <main+0x13bc>
			{
				pwm_men = 100;
    1fee:	84 e6       	ldi	r24, 0x64	; 100
    1ff0:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <pwm_men>
				onoff_men = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <onoff_men>
				//dir_men = 1;
				//PORTB |= (1<<pwmpin_men);
				PORTB &= ~(1 << dirpin_men);
    1ffa:	85 b1       	in	r24, 0x05	; 5
    1ffc:	94 01       	movw	r18, r8
    1ffe:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_men>
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <main+0x1384>
    2004:	22 0f       	add	r18, r18
    2006:	33 1f       	adc	r19, r19
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <main+0x1380>
    200c:	20 95       	com	r18
    200e:	82 23       	and	r24, r18
    2010:	85 b9       	out	0x05, r24	; 5
				printf("Cerrar men \n");
    2012:	85 ec       	ldi	r24, 0xC5	; 197
    2014:	93 e0       	ldi	r25, 0x03	; 3
    2016:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
				serial_men = 0;
    201a:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <serial_men+0x1>
    201e:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <serial_men>
				ActivarPWM_Men(pwm_men, onoff_men);
    2022:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <onoff_men>
    2026:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pwm_men>
    202a:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
    202e:	9f ef       	ldi	r25, 0xFF	; 255
    2030:	23 ec       	ldi	r18, 0xC3	; 195
    2032:	39 e0       	ldi	r19, 0x09	; 9
    2034:	91 50       	subi	r25, 0x01	; 1
    2036:	20 40       	sbci	r18, 0x00	; 0
    2038:	30 40       	sbci	r19, 0x00	; 0
    203a:	e1 f7       	brne	.-8      	; 0x2034 <main+0x13b0>
    203c:	00 c0       	rjmp	.+0      	; 0x203e <main+0x13ba>
    203e:	00 00       	nop
    2040:	4f ef       	ldi	r20, 0xFF	; 255
    2042:	87 eb       	ldi	r24, 0xB7	; 183
    2044:	9b e0       	ldi	r25, 0x0B	; 11
    2046:	41 50       	subi	r20, 0x01	; 1
    2048:	80 40       	sbci	r24, 0x00	; 0
    204a:	90 40       	sbci	r25, 0x00	; 0
    204c:	e1 f7       	brne	.-8      	; 0x2046 <main+0x13c2>
    204e:	00 c0       	rjmp	.+0      	; 0x2050 <main+0x13cc>
    2050:	00 00       	nop
    2052:	0c 94 84 06 	jmp	0xd08	; 0xd08 <main+0x84>
			}
			else if((lectura[0] != lectura[1]) && (lectura[0] == lectura[2]))
			{
				moda = lectura[0];
			}
			else if((lectura[1] == lectura[2]) && (lectura[0] != lectura[1]))
    2056:	82 13       	cpse	r24, r18
    2058:	0c 94 74 07 	jmp	0xee8	; 0xee8 <main+0x264>
    205c:	0c 94 71 07 	jmp	0xee2	; 0xee2 <main+0x25e>

00002060 <__vector_1>:
	//PORTC &= ~(1<<pin_pul_listo);  // Poner en bajo señal enviada
}


ISR(INT0_vect)
{
    2060:	1f 92       	push	r1
    2062:	0f 92       	push	r0
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	0f 92       	push	r0
    2068:	11 24       	eor	r1, r1
    206a:	2f 93       	push	r18
    206c:	3f 93       	push	r19
    206e:	4f 93       	push	r20
    2070:	5f 93       	push	r21
    2072:	6f 93       	push	r22
    2074:	7f 93       	push	r23
    2076:	8f 93       	push	r24
    2078:	9f 93       	push	r25
    207a:	af 93       	push	r26
    207c:	bf 93       	push	r27
    207e:	ef 93       	push	r30
    2080:	ff 93       	push	r31
	if (count_enc_pul < pulsos_pul)
    2082:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <count_enc_pul>
    2086:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <count_enc_pul+0x1>
    208a:	20 91 0c 04 	lds	r18, 0x040C	; 0x80040c <pulsos_pul>
    208e:	30 91 0d 04 	lds	r19, 0x040D	; 0x80040d <pulsos_pul+0x1>
    2092:	82 17       	cp	r24, r18
    2094:	93 07       	cpc	r25, r19
    2096:	34 f4       	brge	.+12     	; 0x20a4 <__vector_1+0x44>
	{
		count_enc_pul ++;
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <count_enc_pul+0x1>
    209e:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <count_enc_pul>
    20a2:	13 c0       	rjmp	.+38     	; 0x20ca <__vector_1+0x6a>
	}
	else
	{
		ActivarPWM_Pul(0, 0);
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Pul>
		count_enc_pul = 0;
    20ac:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <count_enc_pul+0x1>
    20b0:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <count_enc_pul>
		onoff_pul = 0;
    20b4:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <onoff_pul>
		pwm_pul = 0;
    20b8:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <pwm_pul>
		pul_ready = 1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <pul_ready>
		printf("Pul come \n");
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
	}
	
}
    20ca:	ff 91       	pop	r31
    20cc:	ef 91       	pop	r30
    20ce:	bf 91       	pop	r27
    20d0:	af 91       	pop	r26
    20d2:	9f 91       	pop	r25
    20d4:	8f 91       	pop	r24
    20d6:	7f 91       	pop	r23
    20d8:	6f 91       	pop	r22
    20da:	5f 91       	pop	r21
    20dc:	4f 91       	pop	r20
    20de:	3f 91       	pop	r19
    20e0:	2f 91       	pop	r18
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	0f 90       	pop	r0
    20e8:	1f 90       	pop	r1
    20ea:	18 95       	reti

000020ec <__vector_2>:

ISR(INT1_vect)
{
    20ec:	1f 92       	push	r1
    20ee:	0f 92       	push	r0
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	0f 92       	push	r0
    20f4:	11 24       	eor	r1, r1
    20f6:	2f 93       	push	r18
    20f8:	3f 93       	push	r19
    20fa:	4f 93       	push	r20
    20fc:	5f 93       	push	r21
    20fe:	6f 93       	push	r22
    2100:	7f 93       	push	r23
    2102:	8f 93       	push	r24
    2104:	9f 93       	push	r25
    2106:	af 93       	push	r26
    2108:	bf 93       	push	r27
    210a:	ef 93       	push	r30
    210c:	ff 93       	push	r31
	if (count_enc_lat < pulsos_lat)
    210e:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <count_enc_lat>
    2112:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <count_enc_lat+0x1>
    2116:	20 91 0a 04 	lds	r18, 0x040A	; 0x80040a <pulsos_lat>
    211a:	30 91 0b 04 	lds	r19, 0x040B	; 0x80040b <pulsos_lat+0x1>
    211e:	82 17       	cp	r24, r18
    2120:	93 07       	cpc	r25, r19
    2122:	34 f4       	brge	.+12     	; 0x2130 <__vector_2+0x44>
	{
		count_enc_lat ++;
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <count_enc_lat+0x1>
    212a:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <count_enc_lat>
    212e:	13 c0       	rjmp	.+38     	; 0x2156 <__vector_2+0x6a>
	}
	else
	{
		ActivarPWM_Lat(0, 0);
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
		count_enc_lat = 0;
    2138:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <count_enc_lat+0x1>
    213c:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <count_enc_lat>
		onoff_lat = 0;
    2140:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <onoff_lat>
		pwm_lat = 0;
    2144:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <pwm_lat>
		lat_ready = 1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <lat_ready>
		printf("Lat come \n");
    214e:	81 ed       	ldi	r24, 0xD1	; 209
    2150:	93 e0       	ldi	r25, 0x03	; 3
    2152:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
		
	}
}
    2156:	ff 91       	pop	r31
    2158:	ef 91       	pop	r30
    215a:	bf 91       	pop	r27
    215c:	af 91       	pop	r26
    215e:	9f 91       	pop	r25
    2160:	8f 91       	pop	r24
    2162:	7f 91       	pop	r23
    2164:	6f 91       	pop	r22
    2166:	5f 91       	pop	r21
    2168:	4f 91       	pop	r20
    216a:	3f 91       	pop	r19
    216c:	2f 91       	pop	r18
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <__vector_5>:



ISR (PCINT2_vect)
{
    2178:	1f 92       	push	r1
    217a:	0f 92       	push	r0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	0f 92       	push	r0
    2180:	11 24       	eor	r1, r1
    2182:	2f 93       	push	r18
    2184:	3f 93       	push	r19
    2186:	4f 93       	push	r20
    2188:	5f 93       	push	r21
    218a:	6f 93       	push	r22
    218c:	7f 93       	push	r23
    218e:	8f 93       	push	r24
    2190:	9f 93       	push	r25
    2192:	af 93       	push	r26
    2194:	bf 93       	push	r27
    2196:	ef 93       	push	r30
    2198:	ff 93       	push	r31
	uint8_t changedbits;

	changedbits = PIND ^ portdhistory;
    219a:	99 b1       	in	r25, 0x09	; 9
    219c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <portdhistory>
	portdhistory = PIND;
    21a0:	29 b1       	in	r18, 0x09	; 9
    21a2:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <portdhistory>

	if(changedbits & (1 << PIND4))
    21a6:	89 27       	eor	r24, r25
    21a8:	84 ff       	sbrs	r24, 4
    21aa:	2c c0       	rjmp	.+88     	; 0x2204 <__vector_5+0x8c>
	{
		if (count_enc_men < pulsos_men)
    21ac:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <count_enc_men>
    21b0:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <count_enc_men+0x1>
    21b4:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <pulsos_men>
    21b8:	30 91 09 04 	lds	r19, 0x0409	; 0x800409 <pulsos_men+0x1>
    21bc:	82 17       	cp	r24, r18
    21be:	93 07       	cpc	r25, r19
    21c0:	34 f4       	brge	.+12     	; 0x21ce <__vector_5+0x56>
		{
			count_enc_men ++;
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <count_enc_men+0x1>
    21c8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <count_enc_men>
    21cc:	1b c0       	rjmp	.+54     	; 0x2204 <__vector_5+0x8c>
		}
		else
		{
			ActivarPWM_Men(0, 0);
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Men>
			count_enc_men = 0;
    21d6:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <count_enc_men+0x1>
    21da:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <count_enc_men>
			onoff_men = 0;
    21de:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <onoff_men>
			pwm_men = 0;
    21e2:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <pwm_men>
			men_ready = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <men_ready>
			printf("Men come %d \n", men_ready);
    21ec:	1f 92       	push	r1
    21ee:	8f 93       	push	r24
    21f0:	8b ed       	ldi	r24, 0xDB	; 219
    21f2:	93 e0       	ldi	r25, 0x03	; 3
    21f4:	9f 93       	push	r25
    21f6:	8f 93       	push	r24
    21f8:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
			
		}
	}
	
}
    2204:	ff 91       	pop	r31
    2206:	ef 91       	pop	r30
    2208:	bf 91       	pop	r27
    220a:	af 91       	pop	r26
    220c:	9f 91       	pop	r25
    220e:	8f 91       	pop	r24
    2210:	7f 91       	pop	r23
    2212:	6f 91       	pop	r22
    2214:	5f 91       	pop	r21
    2216:	4f 91       	pop	r20
    2218:	3f 91       	pop	r19
    221a:	2f 91       	pop	r18
    221c:	0f 90       	pop	r0
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	0f 90       	pop	r0
    2222:	1f 90       	pop	r1
    2224:	18 95       	reti

00002226 <__vector_4>:


ISR (PCINT1_vect)
{
    2226:	1f 92       	push	r1
    2228:	0f 92       	push	r0
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	0f 92       	push	r0
    222e:	11 24       	eor	r1, r1
    2230:	2f 93       	push	r18
    2232:	3f 93       	push	r19
    2234:	4f 93       	push	r20
    2236:	5f 93       	push	r21
    2238:	6f 93       	push	r22
    223a:	7f 93       	push	r23
    223c:	8f 93       	push	r24
    223e:	9f 93       	push	r25
    2240:	af 93       	push	r26
    2242:	bf 93       	push	r27
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	ef 93       	push	r30
    224a:	ff 93       	push	r31
	uint8_t changedbits;

	changedbits = PINC ^ portchistory;
    224c:	c6 b1       	in	r28, 0x06	; 6
    224e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <portchistory>
    2252:	c8 27       	eor	r28, r24
	portchistory = PINC;
    2254:	86 b1       	in	r24, 0x06	; 6
    2256:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <portchistory>

	if(changedbits & (1 << PINC3))
    225a:	c3 ff       	sbrs	r28, 3
    225c:	42 c0       	rjmp	.+132    	; 0x22e2 <__vector_4+0xbc>
	{
		if ( (PINC & (1 << PINC3)) == (1 << PINC3) )
    225e:	33 9b       	sbis	0x06, 3	; 6
    2260:	30 c0       	rjmp	.+96     	; 0x22c2 <__vector_4+0x9c>
		{
			
			ActivarPWM_Lat(0, 0);
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Lat>
			count_enc_lat = 0;
    226a:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <count_enc_lat+0x1>
    226e:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <count_enc_lat>
			onoff_lat = 0;
    2272:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <onoff_lat>
			pwm_lat = 0;
    2276:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <pwm_lat>
			printf("Lat come \n");
    227a:	81 ed       	ldi	r24, 0xD1	; 209
    227c:	93 e0       	ldi	r25, 0x03	; 3
    227e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <puts>
			fc_lat = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <fc_lat+0x1>
    228a:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <fc_lat>
			lat_ready = 1;
    228e:	d1 e0       	ldi	r29, 0x01	; 1
    2290:	d0 93 30 04 	sts	0x0430, r29	; 0x800430 <lat_ready>
			abs_lateral = 0;
    2294:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <abs_lateral+0x1>
    2298:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <abs_lateral>
			printf("FC val: %d \n", fc_lat);
    229c:	1f 92       	push	r1
    229e:	df 93       	push	r29
    22a0:	89 ee       	ldi	r24, 0xE9	; 233
    22a2:	93 e0       	ldi	r25, 0x03	; 3
    22a4:	9f 93       	push	r25
    22a6:	8f 93       	push	r24
    22a8:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
			lat_ready = 1;
    22ac:	d0 93 30 04 	sts	0x0430, r29	; 0x800430 <lat_ready>
			abs_lateral = 0;
    22b0:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <abs_lateral+0x1>
    22b4:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <abs_lateral>
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	10 c0       	rjmp	.+32     	; 0x22e2 <__vector_4+0xbc>
		}
		else
		{
			fc_lat = 0;
    22c2:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <fc_lat+0x1>
    22c6:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <fc_lat>
			printf("FC val: %d \n", fc_lat);
    22ca:	1f 92       	push	r1
    22cc:	1f 92       	push	r1
    22ce:	89 ee       	ldi	r24, 0xE9	; 233
    22d0:	93 e0       	ldi	r25, 0x03	; 3
    22d2:	9f 93       	push	r25
    22d4:	8f 93       	push	r24
    22d6:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
		}
	}
	
	if(changedbits & (1 << PINC5))
    22e2:	c5 ff       	sbrs	r28, 5
    22e4:	13 c0       	rjmp	.+38     	; 0x230c <__vector_4+0xe6>
	{
		if ( (PINC & (1 << PINC5)) == (1 << PINC5) )
    22e6:	35 9b       	sbis	0x06, 5	; 6
    22e8:	11 c0       	rjmp	.+34     	; 0x230c <__vector_4+0xe6>
		{
			count_event ++;
    22ea:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <count_event>
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <count_event>
			//ima_listo = 1;
			printf("Evento: %d \n", count_event);
    22f4:	1f 92       	push	r1
    22f6:	8f 93       	push	r24
    22f8:	86 ef       	ldi	r24, 0xF6	; 246
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	9f 93       	push	r25
    22fe:	8f 93       	push	r24
    2300:	0e 94 d5 11 	call	0x23aa	; 0x23aa <printf>
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
		{
			//printf("IMA 0 \n");
		}
	}
	
}
    230c:	ff 91       	pop	r31
    230e:	ef 91       	pop	r30
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	bf 91       	pop	r27
    2316:	af 91       	pop	r26
    2318:	9f 91       	pop	r25
    231a:	8f 91       	pop	r24
    231c:	7f 91       	pop	r23
    231e:	6f 91       	pop	r22
    2320:	5f 91       	pop	r21
    2322:	4f 91       	pop	r20
    2324:	3f 91       	pop	r19
    2326:	2f 91       	pop	r18
    2328:	0f 90       	pop	r0
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	0f 90       	pop	r0
    232e:	1f 90       	pop	r1
    2330:	18 95       	reti

00002332 <atol>:
    2332:	1f 93       	push	r17
    2334:	fc 01       	movw	r30, r24
    2336:	99 27       	eor	r25, r25
    2338:	88 27       	eor	r24, r24
    233a:	bc 01       	movw	r22, r24
    233c:	e8 94       	clt
    233e:	11 91       	ld	r17, Z+
    2340:	10 32       	cpi	r17, 0x20	; 32
    2342:	e9 f3       	breq	.-6      	; 0x233e <atol+0xc>
    2344:	19 30       	cpi	r17, 0x09	; 9
    2346:	10 f0       	brcs	.+4      	; 0x234c <atol+0x1a>
    2348:	1e 30       	cpi	r17, 0x0E	; 14
    234a:	c8 f3       	brcs	.-14     	; 0x233e <atol+0xc>
    234c:	1b 32       	cpi	r17, 0x2B	; 43
    234e:	51 f0       	breq	.+20     	; 0x2364 <atol+0x32>
    2350:	1d 32       	cpi	r17, 0x2D	; 45
    2352:	49 f4       	brne	.+18     	; 0x2366 <atol+0x34>
    2354:	68 94       	set
    2356:	06 c0       	rjmp	.+12     	; 0x2364 <atol+0x32>
    2358:	0e 94 c0 11 	call	0x2380	; 0x2380 <__mulsi_const_10>
    235c:	61 0f       	add	r22, r17
    235e:	71 1d       	adc	r23, r1
    2360:	81 1d       	adc	r24, r1
    2362:	91 1d       	adc	r25, r1
    2364:	11 91       	ld	r17, Z+
    2366:	10 53       	subi	r17, 0x30	; 48
    2368:	1a 30       	cpi	r17, 0x0A	; 10
    236a:	b0 f3       	brcs	.-20     	; 0x2358 <atol+0x26>
    236c:	3e f4       	brtc	.+14     	; 0x237c <atol+0x4a>
    236e:	90 95       	com	r25
    2370:	80 95       	com	r24
    2372:	70 95       	com	r23
    2374:	61 95       	neg	r22
    2376:	7f 4f       	sbci	r23, 0xFF	; 255
    2378:	8f 4f       	sbci	r24, 0xFF	; 255
    237a:	9f 4f       	sbci	r25, 0xFF	; 255
    237c:	1f 91       	pop	r17
    237e:	08 95       	ret

00002380 <__mulsi_const_10>:
    2380:	59 2f       	mov	r21, r25
    2382:	48 2f       	mov	r20, r24
    2384:	37 2f       	mov	r19, r23
    2386:	26 2f       	mov	r18, r22
    2388:	66 0f       	add	r22, r22
    238a:	77 1f       	adc	r23, r23
    238c:	88 1f       	adc	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	66 0f       	add	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	88 1f       	adc	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	62 0f       	add	r22, r18
    239a:	73 1f       	adc	r23, r19
    239c:	84 1f       	adc	r24, r20
    239e:	95 1f       	adc	r25, r21
    23a0:	66 0f       	add	r22, r22
    23a2:	77 1f       	adc	r23, r23
    23a4:	88 1f       	adc	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	08 95       	ret

000023aa <printf>:
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	eb ed       	ldi	r30, 0xDB	; 219
    23b0:	f1 e1       	ldi	r31, 0x11	; 17
    23b2:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__prologue_saves__+0x20>
    23b6:	ae 01       	movw	r20, r28
    23b8:	4b 5f       	subi	r20, 0xFB	; 251
    23ba:	5f 4f       	sbci	r21, 0xFF	; 255
    23bc:	fa 01       	movw	r30, r20
    23be:	61 91       	ld	r22, Z+
    23c0:	71 91       	ld	r23, Z+
    23c2:	af 01       	movw	r20, r30
    23c4:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <__iob+0x2>
    23c8:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <__iob+0x3>
    23cc:	0e 94 1b 12 	call	0x2436	; 0x2436 <vfprintf>
    23d0:	e2 e0       	ldi	r30, 0x02	; 2
    23d2:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__epilogue_restores__+0x20>

000023d6 <puts>:
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <__iob+0x2>
    23e2:	f0 91 74 04 	lds	r31, 0x0474	; 0x800474 <__iob+0x3>
    23e6:	23 81       	ldd	r18, Z+3	; 0x03
    23e8:	21 ff       	sbrs	r18, 1
    23ea:	1b c0       	rjmp	.+54     	; 0x2422 <puts+0x4c>
    23ec:	8c 01       	movw	r16, r24
    23ee:	d0 e0       	ldi	r29, 0x00	; 0
    23f0:	c0 e0       	ldi	r28, 0x00	; 0
    23f2:	f8 01       	movw	r30, r16
    23f4:	81 91       	ld	r24, Z+
    23f6:	8f 01       	movw	r16, r30
    23f8:	60 91 73 04 	lds	r22, 0x0473	; 0x800473 <__iob+0x2>
    23fc:	70 91 74 04 	lds	r23, 0x0474	; 0x800474 <__iob+0x3>
    2400:	db 01       	movw	r26, r22
    2402:	18 96       	adiw	r26, 0x08	; 8
    2404:	ed 91       	ld	r30, X+
    2406:	fc 91       	ld	r31, X
    2408:	19 97       	sbiw	r26, 0x09	; 9
    240a:	88 23       	and	r24, r24
    240c:	31 f0       	breq	.+12     	; 0x241a <puts+0x44>
    240e:	09 95       	icall
    2410:	89 2b       	or	r24, r25
    2412:	79 f3       	breq	.-34     	; 0x23f2 <puts+0x1c>
    2414:	df ef       	ldi	r29, 0xFF	; 255
    2416:	cf ef       	ldi	r28, 0xFF	; 255
    2418:	ec cf       	rjmp	.-40     	; 0x23f2 <puts+0x1c>
    241a:	8a e0       	ldi	r24, 0x0A	; 10
    241c:	09 95       	icall
    241e:	89 2b       	or	r24, r25
    2420:	19 f0       	breq	.+6      	; 0x2428 <puts+0x52>
    2422:	8f ef       	ldi	r24, 0xFF	; 255
    2424:	9f ef       	ldi	r25, 0xFF	; 255
    2426:	02 c0       	rjmp	.+4      	; 0x242c <puts+0x56>
    2428:	8d 2f       	mov	r24, r29
    242a:	9c 2f       	mov	r25, r28
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	08 95       	ret

00002436 <vfprintf>:
    2436:	ab e0       	ldi	r26, 0x0B	; 11
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e1 e2       	ldi	r30, 0x21	; 33
    243c:	f2 e1       	ldi	r31, 0x12	; 18
    243e:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__>
    2442:	6c 01       	movw	r12, r24
    2444:	7b 01       	movw	r14, r22
    2446:	8a 01       	movw	r16, r20
    2448:	fc 01       	movw	r30, r24
    244a:	17 82       	std	Z+7, r1	; 0x07
    244c:	16 82       	std	Z+6, r1	; 0x06
    244e:	83 81       	ldd	r24, Z+3	; 0x03
    2450:	81 ff       	sbrs	r24, 1
    2452:	cc c1       	rjmp	.+920    	; 0x27ec <vfprintf+0x3b6>
    2454:	ce 01       	movw	r24, r28
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	3c 01       	movw	r6, r24
    245a:	f6 01       	movw	r30, r12
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	f7 01       	movw	r30, r14
    2460:	93 fd       	sbrc	r25, 3
    2462:	85 91       	lpm	r24, Z+
    2464:	93 ff       	sbrs	r25, 3
    2466:	81 91       	ld	r24, Z+
    2468:	7f 01       	movw	r14, r30
    246a:	88 23       	and	r24, r24
    246c:	09 f4       	brne	.+2      	; 0x2470 <vfprintf+0x3a>
    246e:	ba c1       	rjmp	.+884    	; 0x27e4 <vfprintf+0x3ae>
    2470:	85 32       	cpi	r24, 0x25	; 37
    2472:	39 f4       	brne	.+14     	; 0x2482 <vfprintf+0x4c>
    2474:	93 fd       	sbrc	r25, 3
    2476:	85 91       	lpm	r24, Z+
    2478:	93 ff       	sbrs	r25, 3
    247a:	81 91       	ld	r24, Z+
    247c:	7f 01       	movw	r14, r30
    247e:	85 32       	cpi	r24, 0x25	; 37
    2480:	29 f4       	brne	.+10     	; 0x248c <vfprintf+0x56>
    2482:	b6 01       	movw	r22, r12
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	0e 94 12 14 	call	0x2824	; 0x2824 <fputc>
    248a:	e7 cf       	rjmp	.-50     	; 0x245a <vfprintf+0x24>
    248c:	91 2c       	mov	r9, r1
    248e:	21 2c       	mov	r2, r1
    2490:	31 2c       	mov	r3, r1
    2492:	ff e1       	ldi	r31, 0x1F	; 31
    2494:	f3 15       	cp	r31, r3
    2496:	d8 f0       	brcs	.+54     	; 0x24ce <vfprintf+0x98>
    2498:	8b 32       	cpi	r24, 0x2B	; 43
    249a:	79 f0       	breq	.+30     	; 0x24ba <vfprintf+0x84>
    249c:	38 f4       	brcc	.+14     	; 0x24ac <vfprintf+0x76>
    249e:	80 32       	cpi	r24, 0x20	; 32
    24a0:	79 f0       	breq	.+30     	; 0x24c0 <vfprintf+0x8a>
    24a2:	83 32       	cpi	r24, 0x23	; 35
    24a4:	a1 f4       	brne	.+40     	; 0x24ce <vfprintf+0x98>
    24a6:	23 2d       	mov	r18, r3
    24a8:	20 61       	ori	r18, 0x10	; 16
    24aa:	1d c0       	rjmp	.+58     	; 0x24e6 <vfprintf+0xb0>
    24ac:	8d 32       	cpi	r24, 0x2D	; 45
    24ae:	61 f0       	breq	.+24     	; 0x24c8 <vfprintf+0x92>
    24b0:	80 33       	cpi	r24, 0x30	; 48
    24b2:	69 f4       	brne	.+26     	; 0x24ce <vfprintf+0x98>
    24b4:	23 2d       	mov	r18, r3
    24b6:	21 60       	ori	r18, 0x01	; 1
    24b8:	16 c0       	rjmp	.+44     	; 0x24e6 <vfprintf+0xb0>
    24ba:	83 2d       	mov	r24, r3
    24bc:	82 60       	ori	r24, 0x02	; 2
    24be:	38 2e       	mov	r3, r24
    24c0:	e3 2d       	mov	r30, r3
    24c2:	e4 60       	ori	r30, 0x04	; 4
    24c4:	3e 2e       	mov	r3, r30
    24c6:	2a c0       	rjmp	.+84     	; 0x251c <vfprintf+0xe6>
    24c8:	f3 2d       	mov	r31, r3
    24ca:	f8 60       	ori	r31, 0x08	; 8
    24cc:	1d c0       	rjmp	.+58     	; 0x2508 <vfprintf+0xd2>
    24ce:	37 fc       	sbrc	r3, 7
    24d0:	2d c0       	rjmp	.+90     	; 0x252c <vfprintf+0xf6>
    24d2:	20 ed       	ldi	r18, 0xD0	; 208
    24d4:	28 0f       	add	r18, r24
    24d6:	2a 30       	cpi	r18, 0x0A	; 10
    24d8:	40 f0       	brcs	.+16     	; 0x24ea <vfprintf+0xb4>
    24da:	8e 32       	cpi	r24, 0x2E	; 46
    24dc:	b9 f4       	brne	.+46     	; 0x250c <vfprintf+0xd6>
    24de:	36 fc       	sbrc	r3, 6
    24e0:	81 c1       	rjmp	.+770    	; 0x27e4 <vfprintf+0x3ae>
    24e2:	23 2d       	mov	r18, r3
    24e4:	20 64       	ori	r18, 0x40	; 64
    24e6:	32 2e       	mov	r3, r18
    24e8:	19 c0       	rjmp	.+50     	; 0x251c <vfprintf+0xe6>
    24ea:	36 fe       	sbrs	r3, 6
    24ec:	06 c0       	rjmp	.+12     	; 0x24fa <vfprintf+0xc4>
    24ee:	8a e0       	ldi	r24, 0x0A	; 10
    24f0:	98 9e       	mul	r9, r24
    24f2:	20 0d       	add	r18, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	92 2e       	mov	r9, r18
    24f8:	11 c0       	rjmp	.+34     	; 0x251c <vfprintf+0xe6>
    24fa:	ea e0       	ldi	r30, 0x0A	; 10
    24fc:	2e 9e       	mul	r2, r30
    24fe:	20 0d       	add	r18, r0
    2500:	11 24       	eor	r1, r1
    2502:	22 2e       	mov	r2, r18
    2504:	f3 2d       	mov	r31, r3
    2506:	f0 62       	ori	r31, 0x20	; 32
    2508:	3f 2e       	mov	r3, r31
    250a:	08 c0       	rjmp	.+16     	; 0x251c <vfprintf+0xe6>
    250c:	8c 36       	cpi	r24, 0x6C	; 108
    250e:	21 f4       	brne	.+8      	; 0x2518 <vfprintf+0xe2>
    2510:	83 2d       	mov	r24, r3
    2512:	80 68       	ori	r24, 0x80	; 128
    2514:	38 2e       	mov	r3, r24
    2516:	02 c0       	rjmp	.+4      	; 0x251c <vfprintf+0xe6>
    2518:	88 36       	cpi	r24, 0x68	; 104
    251a:	41 f4       	brne	.+16     	; 0x252c <vfprintf+0xf6>
    251c:	f7 01       	movw	r30, r14
    251e:	93 fd       	sbrc	r25, 3
    2520:	85 91       	lpm	r24, Z+
    2522:	93 ff       	sbrs	r25, 3
    2524:	81 91       	ld	r24, Z+
    2526:	7f 01       	movw	r14, r30
    2528:	81 11       	cpse	r24, r1
    252a:	b3 cf       	rjmp	.-154    	; 0x2492 <vfprintf+0x5c>
    252c:	98 2f       	mov	r25, r24
    252e:	9f 7d       	andi	r25, 0xDF	; 223
    2530:	95 54       	subi	r25, 0x45	; 69
    2532:	93 30       	cpi	r25, 0x03	; 3
    2534:	28 f4       	brcc	.+10     	; 0x2540 <vfprintf+0x10a>
    2536:	0c 5f       	subi	r16, 0xFC	; 252
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	9f e3       	ldi	r25, 0x3F	; 63
    253c:	99 83       	std	Y+1, r25	; 0x01
    253e:	0d c0       	rjmp	.+26     	; 0x255a <vfprintf+0x124>
    2540:	83 36       	cpi	r24, 0x63	; 99
    2542:	31 f0       	breq	.+12     	; 0x2550 <vfprintf+0x11a>
    2544:	83 37       	cpi	r24, 0x73	; 115
    2546:	71 f0       	breq	.+28     	; 0x2564 <vfprintf+0x12e>
    2548:	83 35       	cpi	r24, 0x53	; 83
    254a:	09 f0       	breq	.+2      	; 0x254e <vfprintf+0x118>
    254c:	59 c0       	rjmp	.+178    	; 0x2600 <vfprintf+0x1ca>
    254e:	21 c0       	rjmp	.+66     	; 0x2592 <vfprintf+0x15c>
    2550:	f8 01       	movw	r30, r16
    2552:	80 81       	ld	r24, Z
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	0e 5f       	subi	r16, 0xFE	; 254
    2558:	1f 4f       	sbci	r17, 0xFF	; 255
    255a:	88 24       	eor	r8, r8
    255c:	83 94       	inc	r8
    255e:	91 2c       	mov	r9, r1
    2560:	53 01       	movw	r10, r6
    2562:	13 c0       	rjmp	.+38     	; 0x258a <vfprintf+0x154>
    2564:	28 01       	movw	r4, r16
    2566:	f2 e0       	ldi	r31, 0x02	; 2
    2568:	4f 0e       	add	r4, r31
    256a:	51 1c       	adc	r5, r1
    256c:	f8 01       	movw	r30, r16
    256e:	a0 80       	ld	r10, Z
    2570:	b1 80       	ldd	r11, Z+1	; 0x01
    2572:	36 fe       	sbrs	r3, 6
    2574:	03 c0       	rjmp	.+6      	; 0x257c <vfprintf+0x146>
    2576:	69 2d       	mov	r22, r9
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <vfprintf+0x14a>
    257c:	6f ef       	ldi	r22, 0xFF	; 255
    257e:	7f ef       	ldi	r23, 0xFF	; 255
    2580:	c5 01       	movw	r24, r10
    2582:	0e 94 07 14 	call	0x280e	; 0x280e <strnlen>
    2586:	4c 01       	movw	r8, r24
    2588:	82 01       	movw	r16, r4
    258a:	f3 2d       	mov	r31, r3
    258c:	ff 77       	andi	r31, 0x7F	; 127
    258e:	3f 2e       	mov	r3, r31
    2590:	16 c0       	rjmp	.+44     	; 0x25be <vfprintf+0x188>
    2592:	28 01       	movw	r4, r16
    2594:	22 e0       	ldi	r18, 0x02	; 2
    2596:	42 0e       	add	r4, r18
    2598:	51 1c       	adc	r5, r1
    259a:	f8 01       	movw	r30, r16
    259c:	a0 80       	ld	r10, Z
    259e:	b1 80       	ldd	r11, Z+1	; 0x01
    25a0:	36 fe       	sbrs	r3, 6
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <vfprintf+0x174>
    25a4:	69 2d       	mov	r22, r9
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <vfprintf+0x178>
    25aa:	6f ef       	ldi	r22, 0xFF	; 255
    25ac:	7f ef       	ldi	r23, 0xFF	; 255
    25ae:	c5 01       	movw	r24, r10
    25b0:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <strnlen_P>
    25b4:	4c 01       	movw	r8, r24
    25b6:	f3 2d       	mov	r31, r3
    25b8:	f0 68       	ori	r31, 0x80	; 128
    25ba:	3f 2e       	mov	r3, r31
    25bc:	82 01       	movw	r16, r4
    25be:	33 fc       	sbrc	r3, 3
    25c0:	1b c0       	rjmp	.+54     	; 0x25f8 <vfprintf+0x1c2>
    25c2:	82 2d       	mov	r24, r2
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	88 16       	cp	r8, r24
    25c8:	99 06       	cpc	r9, r25
    25ca:	b0 f4       	brcc	.+44     	; 0x25f8 <vfprintf+0x1c2>
    25cc:	b6 01       	movw	r22, r12
    25ce:	80 e2       	ldi	r24, 0x20	; 32
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	0e 94 12 14 	call	0x2824	; 0x2824 <fputc>
    25d6:	2a 94       	dec	r2
    25d8:	f4 cf       	rjmp	.-24     	; 0x25c2 <vfprintf+0x18c>
    25da:	f5 01       	movw	r30, r10
    25dc:	37 fc       	sbrc	r3, 7
    25de:	85 91       	lpm	r24, Z+
    25e0:	37 fe       	sbrs	r3, 7
    25e2:	81 91       	ld	r24, Z+
    25e4:	5f 01       	movw	r10, r30
    25e6:	b6 01       	movw	r22, r12
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 12 14 	call	0x2824	; 0x2824 <fputc>
    25ee:	21 10       	cpse	r2, r1
    25f0:	2a 94       	dec	r2
    25f2:	21 e0       	ldi	r18, 0x01	; 1
    25f4:	82 1a       	sub	r8, r18
    25f6:	91 08       	sbc	r9, r1
    25f8:	81 14       	cp	r8, r1
    25fa:	91 04       	cpc	r9, r1
    25fc:	71 f7       	brne	.-36     	; 0x25da <vfprintf+0x1a4>
    25fe:	e8 c0       	rjmp	.+464    	; 0x27d0 <vfprintf+0x39a>
    2600:	84 36       	cpi	r24, 0x64	; 100
    2602:	11 f0       	breq	.+4      	; 0x2608 <vfprintf+0x1d2>
    2604:	89 36       	cpi	r24, 0x69	; 105
    2606:	41 f5       	brne	.+80     	; 0x2658 <vfprintf+0x222>
    2608:	f8 01       	movw	r30, r16
    260a:	37 fe       	sbrs	r3, 7
    260c:	07 c0       	rjmp	.+14     	; 0x261c <vfprintf+0x1e6>
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	0c 5f       	subi	r16, 0xFC	; 252
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	08 c0       	rjmp	.+16     	; 0x262c <vfprintf+0x1f6>
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	07 2e       	mov	r0, r23
    2622:	00 0c       	add	r0, r0
    2624:	88 0b       	sbc	r24, r24
    2626:	99 0b       	sbc	r25, r25
    2628:	0e 5f       	subi	r16, 0xFE	; 254
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	f3 2d       	mov	r31, r3
    262e:	ff 76       	andi	r31, 0x6F	; 111
    2630:	3f 2e       	mov	r3, r31
    2632:	97 ff       	sbrs	r25, 7
    2634:	09 c0       	rjmp	.+18     	; 0x2648 <vfprintf+0x212>
    2636:	90 95       	com	r25
    2638:	80 95       	com	r24
    263a:	70 95       	com	r23
    263c:	61 95       	neg	r22
    263e:	7f 4f       	sbci	r23, 0xFF	; 255
    2640:	8f 4f       	sbci	r24, 0xFF	; 255
    2642:	9f 4f       	sbci	r25, 0xFF	; 255
    2644:	f0 68       	ori	r31, 0x80	; 128
    2646:	3f 2e       	mov	r3, r31
    2648:	2a e0       	ldi	r18, 0x0A	; 10
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	a3 01       	movw	r20, r6
    264e:	0e 94 4e 14 	call	0x289c	; 0x289c <__ultoa_invert>
    2652:	88 2e       	mov	r8, r24
    2654:	86 18       	sub	r8, r6
    2656:	45 c0       	rjmp	.+138    	; 0x26e2 <vfprintf+0x2ac>
    2658:	85 37       	cpi	r24, 0x75	; 117
    265a:	31 f4       	brne	.+12     	; 0x2668 <vfprintf+0x232>
    265c:	23 2d       	mov	r18, r3
    265e:	2f 7e       	andi	r18, 0xEF	; 239
    2660:	b2 2e       	mov	r11, r18
    2662:	2a e0       	ldi	r18, 0x0A	; 10
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	25 c0       	rjmp	.+74     	; 0x26b2 <vfprintf+0x27c>
    2668:	93 2d       	mov	r25, r3
    266a:	99 7f       	andi	r25, 0xF9	; 249
    266c:	b9 2e       	mov	r11, r25
    266e:	8f 36       	cpi	r24, 0x6F	; 111
    2670:	c1 f0       	breq	.+48     	; 0x26a2 <vfprintf+0x26c>
    2672:	18 f4       	brcc	.+6      	; 0x267a <vfprintf+0x244>
    2674:	88 35       	cpi	r24, 0x58	; 88
    2676:	79 f0       	breq	.+30     	; 0x2696 <vfprintf+0x260>
    2678:	b5 c0       	rjmp	.+362    	; 0x27e4 <vfprintf+0x3ae>
    267a:	80 37       	cpi	r24, 0x70	; 112
    267c:	19 f0       	breq	.+6      	; 0x2684 <vfprintf+0x24e>
    267e:	88 37       	cpi	r24, 0x78	; 120
    2680:	21 f0       	breq	.+8      	; 0x268a <vfprintf+0x254>
    2682:	b0 c0       	rjmp	.+352    	; 0x27e4 <vfprintf+0x3ae>
    2684:	e9 2f       	mov	r30, r25
    2686:	e0 61       	ori	r30, 0x10	; 16
    2688:	be 2e       	mov	r11, r30
    268a:	b4 fe       	sbrs	r11, 4
    268c:	0d c0       	rjmp	.+26     	; 0x26a8 <vfprintf+0x272>
    268e:	fb 2d       	mov	r31, r11
    2690:	f4 60       	ori	r31, 0x04	; 4
    2692:	bf 2e       	mov	r11, r31
    2694:	09 c0       	rjmp	.+18     	; 0x26a8 <vfprintf+0x272>
    2696:	34 fe       	sbrs	r3, 4
    2698:	0a c0       	rjmp	.+20     	; 0x26ae <vfprintf+0x278>
    269a:	29 2f       	mov	r18, r25
    269c:	26 60       	ori	r18, 0x06	; 6
    269e:	b2 2e       	mov	r11, r18
    26a0:	06 c0       	rjmp	.+12     	; 0x26ae <vfprintf+0x278>
    26a2:	28 e0       	ldi	r18, 0x08	; 8
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	05 c0       	rjmp	.+10     	; 0x26b2 <vfprintf+0x27c>
    26a8:	20 e1       	ldi	r18, 0x10	; 16
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <vfprintf+0x27c>
    26ae:	20 e1       	ldi	r18, 0x10	; 16
    26b0:	32 e0       	ldi	r19, 0x02	; 2
    26b2:	f8 01       	movw	r30, r16
    26b4:	b7 fe       	sbrs	r11, 7
    26b6:	07 c0       	rjmp	.+14     	; 0x26c6 <vfprintf+0x290>
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	0c 5f       	subi	r16, 0xFC	; 252
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	06 c0       	rjmp	.+12     	; 0x26d2 <vfprintf+0x29c>
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 5f       	subi	r16, 0xFE	; 254
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	a3 01       	movw	r20, r6
    26d4:	0e 94 4e 14 	call	0x289c	; 0x289c <__ultoa_invert>
    26d8:	88 2e       	mov	r8, r24
    26da:	86 18       	sub	r8, r6
    26dc:	fb 2d       	mov	r31, r11
    26de:	ff 77       	andi	r31, 0x7F	; 127
    26e0:	3f 2e       	mov	r3, r31
    26e2:	36 fe       	sbrs	r3, 6
    26e4:	0d c0       	rjmp	.+26     	; 0x2700 <vfprintf+0x2ca>
    26e6:	23 2d       	mov	r18, r3
    26e8:	2e 7f       	andi	r18, 0xFE	; 254
    26ea:	a2 2e       	mov	r10, r18
    26ec:	89 14       	cp	r8, r9
    26ee:	58 f4       	brcc	.+22     	; 0x2706 <vfprintf+0x2d0>
    26f0:	34 fe       	sbrs	r3, 4
    26f2:	0b c0       	rjmp	.+22     	; 0x270a <vfprintf+0x2d4>
    26f4:	32 fc       	sbrc	r3, 2
    26f6:	09 c0       	rjmp	.+18     	; 0x270a <vfprintf+0x2d4>
    26f8:	83 2d       	mov	r24, r3
    26fa:	8e 7e       	andi	r24, 0xEE	; 238
    26fc:	a8 2e       	mov	r10, r24
    26fe:	05 c0       	rjmp	.+10     	; 0x270a <vfprintf+0x2d4>
    2700:	b8 2c       	mov	r11, r8
    2702:	a3 2c       	mov	r10, r3
    2704:	03 c0       	rjmp	.+6      	; 0x270c <vfprintf+0x2d6>
    2706:	b8 2c       	mov	r11, r8
    2708:	01 c0       	rjmp	.+2      	; 0x270c <vfprintf+0x2d6>
    270a:	b9 2c       	mov	r11, r9
    270c:	a4 fe       	sbrs	r10, 4
    270e:	0f c0       	rjmp	.+30     	; 0x272e <vfprintf+0x2f8>
    2710:	fe 01       	movw	r30, r28
    2712:	e8 0d       	add	r30, r8
    2714:	f1 1d       	adc	r31, r1
    2716:	80 81       	ld	r24, Z
    2718:	80 33       	cpi	r24, 0x30	; 48
    271a:	21 f4       	brne	.+8      	; 0x2724 <vfprintf+0x2ee>
    271c:	9a 2d       	mov	r25, r10
    271e:	99 7e       	andi	r25, 0xE9	; 233
    2720:	a9 2e       	mov	r10, r25
    2722:	09 c0       	rjmp	.+18     	; 0x2736 <vfprintf+0x300>
    2724:	a2 fe       	sbrs	r10, 2
    2726:	06 c0       	rjmp	.+12     	; 0x2734 <vfprintf+0x2fe>
    2728:	b3 94       	inc	r11
    272a:	b3 94       	inc	r11
    272c:	04 c0       	rjmp	.+8      	; 0x2736 <vfprintf+0x300>
    272e:	8a 2d       	mov	r24, r10
    2730:	86 78       	andi	r24, 0x86	; 134
    2732:	09 f0       	breq	.+2      	; 0x2736 <vfprintf+0x300>
    2734:	b3 94       	inc	r11
    2736:	a3 fc       	sbrc	r10, 3
    2738:	11 c0       	rjmp	.+34     	; 0x275c <vfprintf+0x326>
    273a:	a0 fe       	sbrs	r10, 0
    273c:	06 c0       	rjmp	.+12     	; 0x274a <vfprintf+0x314>
    273e:	b2 14       	cp	r11, r2
    2740:	88 f4       	brcc	.+34     	; 0x2764 <vfprintf+0x32e>
    2742:	28 0c       	add	r2, r8
    2744:	92 2c       	mov	r9, r2
    2746:	9b 18       	sub	r9, r11
    2748:	0e c0       	rjmp	.+28     	; 0x2766 <vfprintf+0x330>
    274a:	b2 14       	cp	r11, r2
    274c:	60 f4       	brcc	.+24     	; 0x2766 <vfprintf+0x330>
    274e:	b6 01       	movw	r22, r12
    2750:	80 e2       	ldi	r24, 0x20	; 32
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 12 14 	call	0x2824	; 0x2824 <fputc>
    2758:	b3 94       	inc	r11
    275a:	f7 cf       	rjmp	.-18     	; 0x274a <vfprintf+0x314>
    275c:	b2 14       	cp	r11, r2
    275e:	18 f4       	brcc	.+6      	; 0x2766 <vfprintf+0x330>
    2760:	2b 18       	sub	r2, r11
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <vfprintf+0x332>
    2764:	98 2c       	mov	r9, r8
    2766:	21 2c       	mov	r2, r1
    2768:	a4 fe       	sbrs	r10, 4
    276a:	10 c0       	rjmp	.+32     	; 0x278c <vfprintf+0x356>
    276c:	b6 01       	movw	r22, r12
    276e:	80 e3       	ldi	r24, 0x30	; 48
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 12 14 	call	0x2824	; 0x2824 <fputc>
    2776:	a2 fe       	sbrs	r10, 2
    2778:	17 c0       	rjmp	.+46     	; 0x27a8 <vfprintf+0x372>
    277a:	a1 fc       	sbrc	r10, 1
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <vfprintf+0x34e>
    277e:	88 e7       	ldi	r24, 0x78	; 120
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <vfprintf+0x352>
    2784:	88 e5       	ldi	r24, 0x58	; 88
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	b6 01       	movw	r22, r12
    278a:	0c c0       	rjmp	.+24     	; 0x27a4 <vfprintf+0x36e>
    278c:	8a 2d       	mov	r24, r10
    278e:	86 78       	andi	r24, 0x86	; 134
    2790:	59 f0       	breq	.+22     	; 0x27a8 <vfprintf+0x372>
    2792:	a1 fe       	sbrs	r10, 1
    2794:	02 c0       	rjmp	.+4      	; 0x279a <vfprintf+0x364>
    2796:	8b e2       	ldi	r24, 0x2B	; 43
    2798:	01 c0       	rjmp	.+2      	; 0x279c <vfprintf+0x366>
    279a:	80 e2       	ldi	r24, 0x20	; 32
    279c:	a7 fc       	sbrc	r10, 7
    279e:	8d e2       	ldi	r24, 0x2D	; 45
    27a0:	b6 01       	movw	r22, r12
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 12 14 	call	0x2824	; 0x2824 <fputc>
    27a8:	89 14       	cp	r8, r9
    27aa:	38 f4       	brcc	.+14     	; 0x27ba <vfprintf+0x384>
    27ac:	b6 01       	movw	r22, r12
    27ae:	80 e3       	ldi	r24, 0x30	; 48
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 12 14 	call	0x2824	; 0x2824 <fputc>
    27b6:	9a 94       	dec	r9
    27b8:	f7 cf       	rjmp	.-18     	; 0x27a8 <vfprintf+0x372>
    27ba:	8a 94       	dec	r8
    27bc:	f3 01       	movw	r30, r6
    27be:	e8 0d       	add	r30, r8
    27c0:	f1 1d       	adc	r31, r1
    27c2:	80 81       	ld	r24, Z
    27c4:	b6 01       	movw	r22, r12
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	0e 94 12 14 	call	0x2824	; 0x2824 <fputc>
    27cc:	81 10       	cpse	r8, r1
    27ce:	f5 cf       	rjmp	.-22     	; 0x27ba <vfprintf+0x384>
    27d0:	22 20       	and	r2, r2
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <vfprintf+0x3a0>
    27d4:	42 ce       	rjmp	.-892    	; 0x245a <vfprintf+0x24>
    27d6:	b6 01       	movw	r22, r12
    27d8:	80 e2       	ldi	r24, 0x20	; 32
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 12 14 	call	0x2824	; 0x2824 <fputc>
    27e0:	2a 94       	dec	r2
    27e2:	f6 cf       	rjmp	.-20     	; 0x27d0 <vfprintf+0x39a>
    27e4:	f6 01       	movw	r30, r12
    27e6:	86 81       	ldd	r24, Z+6	; 0x06
    27e8:	97 81       	ldd	r25, Z+7	; 0x07
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <vfprintf+0x3ba>
    27ec:	8f ef       	ldi	r24, 0xFF	; 255
    27ee:	9f ef       	ldi	r25, 0xFF	; 255
    27f0:	2b 96       	adiw	r28, 0x0b	; 11
    27f2:	e2 e1       	ldi	r30, 0x12	; 18
    27f4:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__>

000027f8 <strnlen_P>:
    27f8:	fc 01       	movw	r30, r24
    27fa:	05 90       	lpm	r0, Z+
    27fc:	61 50       	subi	r22, 0x01	; 1
    27fe:	70 40       	sbci	r23, 0x00	; 0
    2800:	01 10       	cpse	r0, r1
    2802:	d8 f7       	brcc	.-10     	; 0x27fa <strnlen_P+0x2>
    2804:	80 95       	com	r24
    2806:	90 95       	com	r25
    2808:	8e 0f       	add	r24, r30
    280a:	9f 1f       	adc	r25, r31
    280c:	08 95       	ret

0000280e <strnlen>:
    280e:	fc 01       	movw	r30, r24
    2810:	61 50       	subi	r22, 0x01	; 1
    2812:	70 40       	sbci	r23, 0x00	; 0
    2814:	01 90       	ld	r0, Z+
    2816:	01 10       	cpse	r0, r1
    2818:	d8 f7       	brcc	.-10     	; 0x2810 <strnlen+0x2>
    281a:	80 95       	com	r24
    281c:	90 95       	com	r25
    281e:	8e 0f       	add	r24, r30
    2820:	9f 1f       	adc	r25, r31
    2822:	08 95       	ret

00002824 <fputc>:
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	fb 01       	movw	r30, r22
    282e:	23 81       	ldd	r18, Z+3	; 0x03
    2830:	21 fd       	sbrc	r18, 1
    2832:	03 c0       	rjmp	.+6      	; 0x283a <fputc+0x16>
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	9f ef       	ldi	r25, 0xFF	; 255
    2838:	2c c0       	rjmp	.+88     	; 0x2892 <fputc+0x6e>
    283a:	22 ff       	sbrs	r18, 2
    283c:	16 c0       	rjmp	.+44     	; 0x286a <fputc+0x46>
    283e:	46 81       	ldd	r20, Z+6	; 0x06
    2840:	57 81       	ldd	r21, Z+7	; 0x07
    2842:	24 81       	ldd	r18, Z+4	; 0x04
    2844:	35 81       	ldd	r19, Z+5	; 0x05
    2846:	42 17       	cp	r20, r18
    2848:	53 07       	cpc	r21, r19
    284a:	44 f4       	brge	.+16     	; 0x285c <fputc+0x38>
    284c:	a0 81       	ld	r26, Z
    284e:	b1 81       	ldd	r27, Z+1	; 0x01
    2850:	9d 01       	movw	r18, r26
    2852:	2f 5f       	subi	r18, 0xFF	; 255
    2854:	3f 4f       	sbci	r19, 0xFF	; 255
    2856:	31 83       	std	Z+1, r19	; 0x01
    2858:	20 83       	st	Z, r18
    285a:	8c 93       	st	X, r24
    285c:	26 81       	ldd	r18, Z+6	; 0x06
    285e:	37 81       	ldd	r19, Z+7	; 0x07
    2860:	2f 5f       	subi	r18, 0xFF	; 255
    2862:	3f 4f       	sbci	r19, 0xFF	; 255
    2864:	37 83       	std	Z+7, r19	; 0x07
    2866:	26 83       	std	Z+6, r18	; 0x06
    2868:	14 c0       	rjmp	.+40     	; 0x2892 <fputc+0x6e>
    286a:	8b 01       	movw	r16, r22
    286c:	ec 01       	movw	r28, r24
    286e:	fb 01       	movw	r30, r22
    2870:	00 84       	ldd	r0, Z+8	; 0x08
    2872:	f1 85       	ldd	r31, Z+9	; 0x09
    2874:	e0 2d       	mov	r30, r0
    2876:	09 95       	icall
    2878:	89 2b       	or	r24, r25
    287a:	e1 f6       	brne	.-72     	; 0x2834 <fputc+0x10>
    287c:	d8 01       	movw	r26, r16
    287e:	16 96       	adiw	r26, 0x06	; 6
    2880:	8d 91       	ld	r24, X+
    2882:	9c 91       	ld	r25, X
    2884:	17 97       	sbiw	r26, 0x07	; 7
    2886:	01 96       	adiw	r24, 0x01	; 1
    2888:	17 96       	adiw	r26, 0x07	; 7
    288a:	9c 93       	st	X, r25
    288c:	8e 93       	st	-X, r24
    288e:	16 97       	sbiw	r26, 0x06	; 6
    2890:	ce 01       	movw	r24, r28
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	08 95       	ret

0000289c <__ultoa_invert>:
    289c:	fa 01       	movw	r30, r20
    289e:	aa 27       	eor	r26, r26
    28a0:	28 30       	cpi	r18, 0x08	; 8
    28a2:	51 f1       	breq	.+84     	; 0x28f8 <__ultoa_invert+0x5c>
    28a4:	20 31       	cpi	r18, 0x10	; 16
    28a6:	81 f1       	breq	.+96     	; 0x2908 <__ultoa_invert+0x6c>
    28a8:	e8 94       	clt
    28aa:	6f 93       	push	r22
    28ac:	6e 7f       	andi	r22, 0xFE	; 254
    28ae:	6e 5f       	subi	r22, 0xFE	; 254
    28b0:	7f 4f       	sbci	r23, 0xFF	; 255
    28b2:	8f 4f       	sbci	r24, 0xFF	; 255
    28b4:	9f 4f       	sbci	r25, 0xFF	; 255
    28b6:	af 4f       	sbci	r26, 0xFF	; 255
    28b8:	b1 e0       	ldi	r27, 0x01	; 1
    28ba:	3e d0       	rcall	.+124    	; 0x2938 <__ultoa_invert+0x9c>
    28bc:	b4 e0       	ldi	r27, 0x04	; 4
    28be:	3c d0       	rcall	.+120    	; 0x2938 <__ultoa_invert+0x9c>
    28c0:	67 0f       	add	r22, r23
    28c2:	78 1f       	adc	r23, r24
    28c4:	89 1f       	adc	r24, r25
    28c6:	9a 1f       	adc	r25, r26
    28c8:	a1 1d       	adc	r26, r1
    28ca:	68 0f       	add	r22, r24
    28cc:	79 1f       	adc	r23, r25
    28ce:	8a 1f       	adc	r24, r26
    28d0:	91 1d       	adc	r25, r1
    28d2:	a1 1d       	adc	r26, r1
    28d4:	6a 0f       	add	r22, r26
    28d6:	71 1d       	adc	r23, r1
    28d8:	81 1d       	adc	r24, r1
    28da:	91 1d       	adc	r25, r1
    28dc:	a1 1d       	adc	r26, r1
    28de:	20 d0       	rcall	.+64     	; 0x2920 <__ultoa_invert+0x84>
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <__ultoa_invert+0x48>
    28e2:	68 94       	set
    28e4:	3f 91       	pop	r19
    28e6:	2a e0       	ldi	r18, 0x0A	; 10
    28e8:	26 9f       	mul	r18, r22
    28ea:	11 24       	eor	r1, r1
    28ec:	30 19       	sub	r19, r0
    28ee:	30 5d       	subi	r19, 0xD0	; 208
    28f0:	31 93       	st	Z+, r19
    28f2:	de f6       	brtc	.-74     	; 0x28aa <__ultoa_invert+0xe>
    28f4:	cf 01       	movw	r24, r30
    28f6:	08 95       	ret
    28f8:	46 2f       	mov	r20, r22
    28fa:	47 70       	andi	r20, 0x07	; 7
    28fc:	40 5d       	subi	r20, 0xD0	; 208
    28fe:	41 93       	st	Z+, r20
    2900:	b3 e0       	ldi	r27, 0x03	; 3
    2902:	0f d0       	rcall	.+30     	; 0x2922 <__ultoa_invert+0x86>
    2904:	c9 f7       	brne	.-14     	; 0x28f8 <__ultoa_invert+0x5c>
    2906:	f6 cf       	rjmp	.-20     	; 0x28f4 <__ultoa_invert+0x58>
    2908:	46 2f       	mov	r20, r22
    290a:	4f 70       	andi	r20, 0x0F	; 15
    290c:	40 5d       	subi	r20, 0xD0	; 208
    290e:	4a 33       	cpi	r20, 0x3A	; 58
    2910:	18 f0       	brcs	.+6      	; 0x2918 <__ultoa_invert+0x7c>
    2912:	49 5d       	subi	r20, 0xD9	; 217
    2914:	31 fd       	sbrc	r19, 1
    2916:	40 52       	subi	r20, 0x20	; 32
    2918:	41 93       	st	Z+, r20
    291a:	02 d0       	rcall	.+4      	; 0x2920 <__ultoa_invert+0x84>
    291c:	a9 f7       	brne	.-22     	; 0x2908 <__ultoa_invert+0x6c>
    291e:	ea cf       	rjmp	.-44     	; 0x28f4 <__ultoa_invert+0x58>
    2920:	b4 e0       	ldi	r27, 0x04	; 4
    2922:	a6 95       	lsr	r26
    2924:	97 95       	ror	r25
    2926:	87 95       	ror	r24
    2928:	77 95       	ror	r23
    292a:	67 95       	ror	r22
    292c:	ba 95       	dec	r27
    292e:	c9 f7       	brne	.-14     	; 0x2922 <__ultoa_invert+0x86>
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	61 05       	cpc	r22, r1
    2934:	71 05       	cpc	r23, r1
    2936:	08 95       	ret
    2938:	9b 01       	movw	r18, r22
    293a:	ac 01       	movw	r20, r24
    293c:	0a 2e       	mov	r0, r26
    293e:	06 94       	lsr	r0
    2940:	57 95       	ror	r21
    2942:	47 95       	ror	r20
    2944:	37 95       	ror	r19
    2946:	27 95       	ror	r18
    2948:	ba 95       	dec	r27
    294a:	c9 f7       	brne	.-14     	; 0x293e <__ultoa_invert+0xa2>
    294c:	62 0f       	add	r22, r18
    294e:	73 1f       	adc	r23, r19
    2950:	84 1f       	adc	r24, r20
    2952:	95 1f       	adc	r25, r21
    2954:	a0 1d       	adc	r26, r0
    2956:	08 95       	ret

00002958 <__prologue_saves__>:
    2958:	2f 92       	push	r2
    295a:	3f 92       	push	r3
    295c:	4f 92       	push	r4
    295e:	5f 92       	push	r5
    2960:	6f 92       	push	r6
    2962:	7f 92       	push	r7
    2964:	8f 92       	push	r8
    2966:	9f 92       	push	r9
    2968:	af 92       	push	r10
    296a:	bf 92       	push	r11
    296c:	cf 92       	push	r12
    296e:	df 92       	push	r13
    2970:	ef 92       	push	r14
    2972:	ff 92       	push	r15
    2974:	0f 93       	push	r16
    2976:	1f 93       	push	r17
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	ca 1b       	sub	r28, r26
    2982:	db 0b       	sbc	r29, r27
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	09 94       	ijmp

00002990 <__epilogue_restores__>:
    2990:	2a 88       	ldd	r2, Y+18	; 0x12
    2992:	39 88       	ldd	r3, Y+17	; 0x11
    2994:	48 88       	ldd	r4, Y+16	; 0x10
    2996:	5f 84       	ldd	r5, Y+15	; 0x0f
    2998:	6e 84       	ldd	r6, Y+14	; 0x0e
    299a:	7d 84       	ldd	r7, Y+13	; 0x0d
    299c:	8c 84       	ldd	r8, Y+12	; 0x0c
    299e:	9b 84       	ldd	r9, Y+11	; 0x0b
    29a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    29a2:	b9 84       	ldd	r11, Y+9	; 0x09
    29a4:	c8 84       	ldd	r12, Y+8	; 0x08
    29a6:	df 80       	ldd	r13, Y+7	; 0x07
    29a8:	ee 80       	ldd	r14, Y+6	; 0x06
    29aa:	fd 80       	ldd	r15, Y+5	; 0x05
    29ac:	0c 81       	ldd	r16, Y+4	; 0x04
    29ae:	1b 81       	ldd	r17, Y+3	; 0x03
    29b0:	aa 81       	ldd	r26, Y+2	; 0x02
    29b2:	b9 81       	ldd	r27, Y+1	; 0x01
    29b4:	ce 0f       	add	r28, r30
    29b6:	d1 1d       	adc	r29, r1
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	ed 01       	movw	r28, r26
    29c4:	08 95       	ret

000029c6 <_exit>:
    29c6:	f8 94       	cli

000029c8 <__stop_program>:
    29c8:	ff cf       	rjmp	.-2      	; 0x29c8 <__stop_program>
