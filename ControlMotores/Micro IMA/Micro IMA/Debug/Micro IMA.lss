
Micro IMA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000030e  00800100  00002812  000028a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002812  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080040e  0080040e  00002bb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bc4  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090d  00000000  00000000  000048d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016d9  00000000  00000000  000051e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  000068bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fd  00000000  00000000  00006db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001408  00000000  00000000  000075b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000089bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__vector_1>
       8:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e1       	ldi	r30, 0x12	; 18
      7c:	f8 e2       	ldi	r31, 0x28	; 40
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 30       	cpi	r26, 0x0E	; 14
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ae e0       	ldi	r26, 0x0E	; 14
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 37       	cpi	r26, 0x7F	; 127
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 87 05 	call	0xb0e	; 0xb0e <main>
      9e:	0c 94 07 14 	jmp	0x280e	; 0x280e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_init>:
	while(*cadena !=0x00){				//mientras el último valor de la cadena sea diferente a el caracter nulo
		UART_write(*cadena);			//transmite los caracteres de cadena
		cadena++;						//incrementa la ubicación de los caracteres en cadena
		//para enviar el siguiente caracter de cadena
	}
}
      a6:	51 9a       	sbi	0x0a, 1	; 10
      a8:	50 98       	cbi	0x0a, 0	; 10
      aa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      ae:	88 e9       	ldi	r24, 0x98	; 152
      b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
      b4:	86 e0       	ldi	r24, 0x06	; 6
      b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
      ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      be:	87 e6       	ldi	r24, 0x67	; 103
      c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      c4:	8e e3       	ldi	r24, 0x3E	; 62
      c6:	91 e0       	ldi	r25, 0x01	; 1
      c8:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <__iob+0x3>
      cc:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <__iob+0x2>
      d0:	08 95       	ret

000000d2 <UART_write>:
      d2:	e0 ec       	ldi	r30, 0xC0	; 192
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	90 81       	ld	r25, Z
      d8:	95 ff       	sbrs	r25, 5
      da:	fd cf       	rjmp	.-6      	; 0xd6 <UART_write+0x4>
      dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      e0:	08 95       	ret

000000e2 <USART_printCHAR>:
      e2:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_write>
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	08 95       	ret

000000ec <__vector_18>:
}



ISR(USART_RX_vect)
{	
      ec:	1f 92       	push	r1
      ee:	0f 92       	push	r0
      f0:	0f b6       	in	r0, 0x3f	; 63
      f2:	0f 92       	push	r0
      f4:	11 24       	eor	r1, r1
      f6:	2f 93       	push	r18
      f8:	3f 93       	push	r19
      fa:	4f 93       	push	r20
      fc:	5f 93       	push	r21
      fe:	6f 93       	push	r22
     100:	7f 93       	push	r23
     102:	8f 93       	push	r24
     104:	9f 93       	push	r25
     106:	af 93       	push	r26
     108:	bf 93       	push	r27
     10a:	ef 93       	push	r30
     10c:	ff 93       	push	r31
	char dato = UDR0;
     10e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	if(recibiendo>0)
     112:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <recibiendo>
     116:	99 23       	and	r25, r25
     118:	b1 f1       	breq	.+108    	; 0x186 <__vector_18+0x9a>
	{
		if (dato != '>' && j == 0)
     11a:	8e 33       	cpi	r24, 0x3E	; 62
     11c:	59 f0       	breq	.+22     	; 0x134 <__vector_18+0x48>
     11e:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <j>
     122:	91 11       	cpse	r25, r1
     124:	25 c0       	rjmp	.+74     	; 0x170 <__vector_18+0x84>
		{
			serialCode = dato - '0';
     126:	80 53       	subi	r24, 0x30	; 48
     128:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <serialCode>
			j ++;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <j>
     132:	2e c0       	rjmp	.+92     	; 0x190 <__vector_18+0xa4>
		}
		else if(dato == '>')
		{
			
			RxBuffer[RxContador] = '\0';
     134:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <RxContador>
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	e7 5a       	subi	r30, 0xA7	; 167
     13c:	fb 4f       	sbci	r31, 0xFB	; 251
     13e:	10 82       	st	Z, r1
			RxContador = 0;
     140:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <RxContador>
			recibiendo = 0;
     144:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <recibiendo>
			j = 0;
     148:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <j>
			serialPulse = atol(RxBuffer);
     14c:	89 e5       	ldi	r24, 0x59	; 89
     14e:	94 e0       	ldi	r25, 0x04	; 4
     150:	0e 94 bd 10 	call	0x217a	; 0x217a <atol>
     154:	70 93 56 04 	sts	0x0456, r23	; 0x800456 <serialPulse+0x1>
     158:	60 93 55 04 	sts	0x0455, r22	; 0x800455 <serialPulse>
			newData ++;
     15c:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <newData>
     160:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <newData+0x1>
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <newData+0x1>
     16a:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <newData>
     16e:	10 c0       	rjmp	.+32     	; 0x190 <__vector_18+0xa4>
			
		}
		else
		{
			RxBuffer[RxContador++] = dato;
     170:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <RxContador>
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	9e 0f       	add	r25, r30
     178:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <RxContador>
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	e7 5a       	subi	r30, 0xA7	; 167
     180:	fb 4f       	sbci	r31, 0xFB	; 251
     182:	80 83       	st	Z, r24
     184:	05 c0       	rjmp	.+10     	; 0x190 <__vector_18+0xa4>
		}
	}
	else if(dato=='<')
     186:	8c 33       	cpi	r24, 0x3C	; 60
     188:	19 f4       	brne	.+6      	; 0x190 <__vector_18+0xa4>
	{
		recibiendo++;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <recibiendo>
	}
	
	
}
     190:	ff 91       	pop	r31
     192:	ef 91       	pop	r30
     194:	bf 91       	pop	r27
     196:	af 91       	pop	r26
     198:	9f 91       	pop	r25
     19a:	8f 91       	pop	r24
     19c:	7f 91       	pop	r23
     19e:	6f 91       	pop	r22
     1a0:	5f 91       	pop	r21
     1a2:	4f 91       	pop	r20
     1a4:	3f 91       	pop	r19
     1a6:	2f 91       	pop	r18
     1a8:	0f 90       	pop	r0
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	0f 90       	pop	r0
     1ae:	1f 90       	pop	r1
     1b0:	18 95       	reti

000001b2 <configPWM>:


void configPWM(void)
{
	//Config PWM0
	TCCR0A=0x03;	// 0000 0011 --- Operación normal, salidas PWM OC0A y OC0B desactivadas, PWM rápido
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	84 bd       	out	0x24, r24	; 36
	TCCR0B=0x02;    // 0000 0010 --- Escalador/8
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	85 bd       	out	0x25, r24	; 37
	
	//Config PWM1
	TCCR1A=0x01;    // 1010 0001 --- Operación normal, salida PWM OC1A desactivada, PWM rápido
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B=0X0A;    // 0000 1010 --- Escalador/8
     1c0:	8a e0       	ldi	r24, 0x0A	; 10
     1c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1c6:	08 95       	ret

000001c8 <ActivarPWM_Med>:
}

void ActivarPWM_Med(uint8_t PWM, uint8_t encendido)
{
	OCR0A=PWM;				// Definir ancho de pulso
     1c8:	87 bd       	out	0x27, r24	; 39
	
	if (encendido==1)		// Si el motor debe encenderse o continuar encendido:
     1ca:	61 30       	cpi	r22, 0x01	; 1
     1cc:	61 f4       	brne	.+24     	; 0x1e6 <ActivarPWM_Med+0x1e>
	{
		rel_medio = 0;
     1ce:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <rel_medio+0x1>
     1d2:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <rel_medio>
		TCCR0A |= (1<<7);   // TCCR0A = 0b10x00011 ----  10x0 0011  Modo no invertido, salida OC0A activada, PWM rápido
     1d6:	84 b5       	in	r24, 0x24	; 36
     1d8:	80 68       	ori	r24, 0x80	; 128
     1da:	84 bd       	out	0x24, r24	; 36
		printf("Med on \n");
     1dc:	8c e4       	ldi	r24, 0x4C	; 76
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     1e4:	08 95       	ret
	}
	else                    // Si no (el motor debe apagarse):
	{
		TCCR0A &=~ (1<<7); // TCCR0A = 0b00x00011 ----  00x0 0011  Operación normal, salida PWM OC0A desactivada, PWM rápido
     1e6:	84 b5       	in	r24, 0x24	; 36
     1e8:	8f 77       	andi	r24, 0x7F	; 127
     1ea:	84 bd       	out	0x24, r24	; 36
		rel_medio = count_enc_med;
     1ec:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <count_enc_med>
     1f0:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <count_enc_med+0x1>
     1f4:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <rel_medio+0x1>
     1f8:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <rel_medio>
		printf("Med off \n");
     1fc:	84 e5       	ldi	r24, 0x54	; 84
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     204:	08 95       	ret

00000206 <ActivarPWM_Ind>:
	}
}

void ActivarPWM_Ind(uint8_t PWM, uint8_t encendido)
{
	OCR0B=PWM;				// Definir ancho de pulso
     206:	88 bd       	out	0x28, r24	; 40
	
	if (encendido==1)		// Si el motor debe encenderse o continuar encendido:
     208:	61 30       	cpi	r22, 0x01	; 1
     20a:	61 f4       	brne	.+24     	; 0x224 <ActivarPWM_Ind+0x1e>
	{
		rel_indice = 0;
     20c:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <rel_indice+0x1>
     210:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <rel_indice>
		TCCR0A |= (1<<5);   // TCCR0A = 0b10x00011 ----  10x0 0011  Modo no invertido, salida OC0B activada, PWM rápido
     214:	84 b5       	in	r24, 0x24	; 36
     216:	80 62       	ori	r24, 0x20	; 32
     218:	84 bd       	out	0x24, r24	; 36
		printf("Ind on \n");
     21a:	8d e5       	ldi	r24, 0x5D	; 93
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     222:	08 95       	ret
	}
	else                    // Si no (el motor debe apagarse):
	{
		TCCR0A &=~ (1<<5); // TCCR0A = 0b00x00011 ----  00x0 0011  Operación normal, salida PWM OC0B desactivada, PWM rápido
     224:	84 b5       	in	r24, 0x24	; 36
     226:	8f 7d       	andi	r24, 0xDF	; 223
     228:	84 bd       	out	0x24, r24	; 36
		rel_indice = count_enc_ind;
     22a:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <count_enc_ind>
     22e:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <count_enc_ind+0x1>
     232:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <rel_indice+0x1>
     236:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <rel_indice>
		printf("Ind off \n");
     23a:	85 e6       	ldi	r24, 0x65	; 101
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     242:	08 95       	ret

00000244 <ActivarPWM_Anu>:
	}
}

void ActivarPWM_Anu(uint8_t PWM, uint8_t encendido)
{
	OCR1A=PWM;				// Definir ancho de pulso
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     24a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	if (encendido==1)		// Si el motor debe encenderse o continuar encendido:
     24e:	61 30       	cpi	r22, 0x01	; 1
     250:	71 f4       	brne	.+28     	; 0x26e <ActivarPWM_Anu+0x2a>
	{
		rel_anular = 0;
     252:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <rel_anular+0x1>
     256:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <rel_anular>
		TCCR1A |= (1<<7);   // TCCR0A = 0b10x00011 ----  10x0 0011  Modo no invertido, salida OC1A activada, PWM rápido
     25a:	e0 e8       	ldi	r30, 0x80	; 128
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	80 68       	ori	r24, 0x80	; 128
     262:	80 83       	st	Z, r24
		printf("Anu on \n");
     264:	8e e6       	ldi	r24, 0x6E	; 110
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     26c:	08 95       	ret
	}
	else                    // Si no (el motor debe apagarse):
	{
		TCCR1A &=~ (1<<7); // TCCR0A = 0b00x00011 ----  00x0 0011  Operación normal, salida PWM OC1A desactivada, PWM rápido
     26e:	e0 e8       	ldi	r30, 0x80	; 128
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	80 83       	st	Z, r24
		rel_anular = count_enc_anu;
     278:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <count_enc_anu>
     27c:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <count_enc_anu+0x1>
     280:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <rel_anular+0x1>
     284:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <rel_anular>
		printf("Anu off \n");
     288:	86 e7       	ldi	r24, 0x76	; 118
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     290:	08 95       	ret

00000292 <configADC>:
}


void configADC(void)
{
	ADMUX = 0b01000000;		// AVcc
     292:	80 e4       	ldi	r24, 0x40	; 64
     294:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b0000111;		// ADC apagado, preescalador=128 --> 16MHz/64=125KHz
     298:	87 e0       	ldi	r24, 0x07	; 7
     29a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0;				// Modo de carrera libre
     29e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     2a2:	08 95       	ret

000002a4 <ADC_GetData>:
	//DIDR0 |= ((1<<3)|(1<<4));		// Entrada digital (PC3/ADC3) y (PC4/ADC4) deshabilitada
}

int ADC_GetData(int canalADC)
{
	ADMUX &=~  0x0F;		// Limpiar selección de puertos ADC
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
     2aa:	90 7f       	andi	r25, 0xF0	; 240
     2ac:	90 83       	st	Z, r25
	ADMUX |=  canalADC;		// Selección de puerto ADC
     2ae:	90 81       	ld	r25, Z
     2b0:	89 2b       	or	r24, r25
     2b2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);	// Habilita ADC
     2b4:	ea e7       	ldi	r30, 0x7A	; 122
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	80 68       	ori	r24, 0x80	; 128
     2bc:	80 83       	st	Z, r24
	//	_delay_us(10);			// Tiempo de espera
	ADCSRA |= (1<<ADSC);	// Inicia conversión AD
     2be:	80 81       	ld	r24, Z
     2c0:	80 64       	ori	r24, 0x40	; 64
     2c2:	80 83       	st	Z, r24
	while (ADCSRA&(1<<ADSC));	// Esperar mientras se realiza la conversión
     2c4:	80 81       	ld	r24, Z
     2c6:	86 fd       	sbrc	r24, 6
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <ADC_GetData+0x20>
	ADCSRA &=~ (1<<ADEN);	// Desactiva el ADC
     2ca:	ea e7       	ldi	r30, 0x7A	; 122
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	8f 77       	andi	r24, 0x7F	; 127
     2d2:	80 83       	st	Z, r24
	return ADC;				// Retorna lectura del ADC
     2d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     2dc:	08 95       	ret

000002de <getSerialParams>:
}


void getSerialParams(void)
{
	if (newData == 1)
     2de:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <newData>
     2e2:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <newData+0x1>
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	09 f0       	breq	.+2      	; 0x2ec <getSerialParams+0xe>
     2ea:	24 c1       	rjmp	.+584    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
	{
		newData = 0;
     2ec:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <newData+0x1>
     2f0:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <newData>

		if(serialCode == 0)
     2f4:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     2f8:	81 11       	cpse	r24, r1
     2fa:	21 c0       	rjmp	.+66     	; 0x33e <getSerialParams+0x60>
		{
			dir_ind = 1;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <dir_ind>
			serial_ind = 1;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <serial_ind+0x1>
     30a:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <serial_ind>
			pulsos_ind = serialPulse;
     30e:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <serialPulse>
     312:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <serialPulse+0x1>
     316:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <pulsos_ind>
     31a:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <pulsos_ind+0x1>
			printf("Avanzar %d pulsos \n", pulsos_ind);
     31e:	9f 93       	push	r25
     320:	8f 93       	push	r24
     322:	8f e7       	ldi	r24, 0x7F	; 127
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	9f 93       	push	r25
     328:	8f 93       	push	r24
     32a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
			printf("Abriendo indice \n");
     32e:	83 e9       	ldi	r24, 0x93	; 147
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
		}

		if(serialCode == 1)
     33e:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	a1 f4       	brne	.+40     	; 0x36e <getSerialParams+0x90>
		{
			dir_ind = 0;
     346:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <dir_ind>
			serial_ind = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <serial_ind+0x1>
     352:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <serial_ind>
			pulsos_ind = serialPulse;
     356:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <serialPulse>
     35a:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <serialPulse+0x1>
     35e:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <pulsos_ind+0x1>
     362:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <pulsos_ind>
			printf("Cerrando indice \n");
     366:	84 ea       	ldi	r24, 0xA4	; 164
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
		}

		if(serialCode == 2)
     36e:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	a9 f4       	brne	.+42     	; 0x3a0 <getSerialParams+0xc2>
		{
			dir_med = 1;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <dir_med>
			serial_med = 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <serial_med+0x1>
     384:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <serial_med>
			pulsos_med = serialPulse;
     388:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <serialPulse>
     38c:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <serialPulse+0x1>
     390:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <pulsos_med+0x1>
     394:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <pulsos_med>
			printf("Abriendo med \n");
     398:	85 eb       	ldi	r24, 0xB5	; 181
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
		}

		if(serialCode == 3)
     3a0:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	a1 f4       	brne	.+40     	; 0x3d0 <getSerialParams+0xf2>
		{
			dir_med = 0;
     3a8:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <dir_med>
			serial_med = 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <serial_med+0x1>
     3b4:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <serial_med>
			pulsos_med = serialPulse;
     3b8:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <serialPulse>
     3bc:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <serialPulse+0x1>
     3c0:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <pulsos_med+0x1>
     3c4:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <pulsos_med>
			printf("Cerrando med \n");
     3c8:	83 ec       	ldi	r24, 0xC3	; 195
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
		}
		
		if(serialCode == 4)
     3d0:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     3d4:	84 30       	cpi	r24, 0x04	; 4
     3d6:	a9 f4       	brne	.+42     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			dir_anu = 1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <dir_anu>
			serial_anu = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <serial_anu+0x1>
     3e6:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <serial_anu>
			pulsos_anu = serialPulse;
     3ea:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <serialPulse>
     3ee:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <serialPulse+0x1>
     3f2:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <pulsos_anu+0x1>
     3f6:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <pulsos_anu>
			printf("Abriendo anul \n");
     3fa:	81 ed       	ldi	r24, 0xD1	; 209
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
		}

		if(serialCode == 5)
     402:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     406:	85 30       	cpi	r24, 0x05	; 5
     408:	a1 f4       	brne	.+40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		{
			dir_anu = 0;
     40a:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <dir_anu>
			serial_anu = 1;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <serial_anu+0x1>
     416:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <serial_anu>
			pulsos_anu = serialPulse;
     41a:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <serialPulse>
     41e:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <serialPulse+0x1>
     422:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <pulsos_anu+0x1>
     426:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <pulsos_anu>
			printf("Cerrando anul \n");
     42a:	80 ee       	ldi	r24, 0xE0	; 224
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
		}
		
		if(serialCode == 6)
     432:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     436:	86 30       	cpi	r24, 0x06	; 6
     438:	f1 f4       	brne	.+60     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		{
			fsr_ind = ADC_GetData(FSRpin_ind);
     43a:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <FSRpin_ind>
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     444:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <fsr_ind>
     448:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <fsr_ind+0x1>
			printf("FSR ind: %d \n", fsr_ind);
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	8f ee       	ldi	r24, 0xEF	; 239
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	9f 93       	push	r25
     456:	8f 93       	push	r24
     458:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45c:	2f ef       	ldi	r18, 0xFF	; 255
     45e:	86 e7       	ldi	r24, 0x76	; 118
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	21 50       	subi	r18, 0x01	; 1
     464:	80 40       	sbci	r24, 0x00	; 0
     466:	90 40       	sbci	r25, 0x00	; 0
     468:	e1 f7       	brne	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     46c:	00 00       	nop
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
			_delay_ms(30);
		}
		
		if(serialCode == 7)
     476:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     47a:	87 30       	cpi	r24, 0x07	; 7
     47c:	f1 f4       	brne	.+60     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		{
			fsr_med = ADC_GetData(FSRpin_med);
     47e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     488:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <fsr_med>
     48c:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <fsr_med+0x1>
			printf("FSR med: %d \n", fsr_med);
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	86 e7       	ldi	r24, 0x76	; 118
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	80 40       	sbci	r24, 0x00	; 0
     4aa:	90 40       	sbci	r25, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4b0:	00 00       	nop
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
			_delay_ms(30);
		}
		
		if(serialCode == 8)
     4ba:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	f1 f4       	brne	.+60     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		{
			fsr_anu = ADC_GetData(FSRpin_anu);
     4c2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     4cc:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <fsr_anu>
     4d0:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <fsr_anu+0x1>
			printf("FSR anu: %d \n", fsr_anu);
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	9f 93       	push	r25
     4de:	8f 93       	push	r24
     4e0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     4e4:	2f ef       	ldi	r18, 0xFF	; 255
     4e6:	86 e7       	ldi	r24, 0x76	; 118
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	21 50       	subi	r18, 0x01	; 1
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	90 40       	sbci	r25, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f4:	00 00       	nop
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
			_delay_ms(30);
		}
		
		
		if(serialCode == 9)
     4fe:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
     502:	89 30       	cpi	r24, 0x09	; 9
     504:	b9 f4       	brne	.+46     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
		{
			//iniciar_sis = 0;
			//printf("Inicio %d \n", iniciar_sis);
			printf("Pulgar %d \n", pulgar_listo);
     506:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <pulgar_listo>
     50a:	1f 92       	push	r1
     50c:	8f 93       	push	r24
     50e:	89 e1       	ldi	r24, 0x19	; 25
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	86 e7       	ldi	r24, 0x76	; 118
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	21 50       	subi	r18, 0x01	; 1
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	90 40       	sbci	r25, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     528:	00 c0       	rjmp	.+0      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     52a:	00 00       	nop
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	08 95       	ret

00000536 <configInterrupt>:



void configInterrupt(void)
{
	EICRA |= (1<<ISC00);    // INT0 configurado = Flanco de subida (11) // Cualquier flanco (01) // ((1<<ISC01)|(1<<ISC00))
     536:	e9 e6       	ldi	r30, 0x69	; 105
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	81 60       	ori	r24, 0x01	; 1
     53e:	80 83       	st	Z, r24
	EICRA &=~ (1<<ISC01);
     540:	80 81       	ld	r24, Z
     542:	8d 7f       	andi	r24, 0xFD	; 253
     544:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);		// INT0 activado
     546:	e8 9a       	sbi	0x1d, 0	; 29
	
	EICRA |= (1<<ISC10);    // INT1 configurado = Flanco de subida (11) // Cualquier flanco (01) // ((1<<ISC11)|(1<<ISC10))
     548:	80 81       	ld	r24, Z
     54a:	84 60       	ori	r24, 0x04	; 4
     54c:	80 83       	st	Z, r24
	EICRA &=~ (1<<ISC11);
     54e:	80 81       	ld	r24, Z
     550:	87 7f       	andi	r24, 0xF7	; 247
     552:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1);		// INT1 activado
     554:	e9 9a       	sbi	0x1d, 1	; 29
	
	PCICR |= (1 << PCIE2);		 // Activa PCIE2 para activar grupo PCMSK2
     556:	e8 e6       	ldi	r30, 0x68	; 104
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	84 60       	ori	r24, 0x04	; 4
     55e:	80 83       	st	Z, r24
	PCMSK2 |= ((1 << PCINT20));  // Configura PCINT20 (Encoder meñique) para activar interrupciones PCINTx
     560:	ed e6       	ldi	r30, 0x6D	; 109
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	80 61       	ori	r24, 0x10	; 16
     568:	80 83       	st	Z, r24
     56a:	08 95       	ret

0000056c <calibrar>:
	
}

void calibrar(void)
{
	printf("Iniciar calib \n");
     56c:	85 e2       	ldi	r24, 0x25	; 37
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
	fsr_ind = ADC_GetData(FSRpin_ind);
     574:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <FSRpin_ind>
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     57e:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <fsr_ind+0x1>
     582:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <fsr_ind>
	pulsos_ind = 3000; // Para evitar que interrupción de encoder apague pwm
     586:	28 eb       	ldi	r18, 0xB8	; 184
     588:	3b e0       	ldi	r19, 0x0B	; 11
     58a:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <pulsos_ind+0x1>
     58e:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <pulsos_ind>
	if (fsr_ind <= 40)
     592:	89 97       	sbiw	r24, 0x29	; 41
     594:	0c f0       	brlt	.+2      	; 0x598 <calibrar+0x2c>
     596:	42 c0       	rjmp	.+132    	; 0x61c <calibrar+0xb0>
	{
		dir_ind = 0;
     598:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <dir_ind>
		pwm_ind = 120;
     59c:	88 e7       	ldi	r24, 0x78	; 120
     59e:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <pwm_ind>
		onoff_ind = 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <onoff_ind>
		PORTD &= ~(1<<dirpin_ind);
     5a8:	2b b1       	in	r18, 0x0b	; 11
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_ind>
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <calibrar+0x4c>
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	0a 94       	dec	r0
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <calibrar+0x48>
     5bc:	80 95       	com	r24
     5be:	82 23       	and	r24, r18
     5c0:	8b b9       	out	0x0b, r24	; 11
     5c2:	8f e3       	ldi	r24, 0x3F	; 63
     5c4:	9c e9       	ldi	r25, 0x9C	; 156
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <calibrar+0x5a>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <calibrar+0x60>
     5cc:	00 00       	nop
		_delay_ms(10);
		ActivarPWM_Ind(pwm_ind, onoff_ind);
     5ce:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
     5d2:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
     5d6:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
     5da:	8f e3       	ldi	r24, 0x3F	; 63
     5dc:	9c e9       	ldi	r25, 0x9C	; 156
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <calibrar+0x72>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <calibrar+0x78>
     5e4:	00 00       	nop
		_delay_ms(10);
		while((ADC_GetData(FSRpin_ind)) <= 40 )
     5e6:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <FSRpin_ind>
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     5f0:	89 97       	sbiw	r24, 0x29	; 41
     5f2:	cc f3       	brlt	.-14     	; 0x5e6 <calibrar+0x7a>
		{

		}
		ActivarPWM_Ind(0, 0);
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
		pwm_ind = 0;
     5fc:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <pwm_ind>
		onoff_ind = 0;
     600:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <onoff_ind>
		count_enc_ind = 0;
     604:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <count_enc_ind+0x1>
     608:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <count_enc_ind>
		pulsos_ind = 0;         // Para evitar que interrupción de encoder apague pwm - resetear a 0
     60c:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <pulsos_ind+0x1>
     610:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <pulsos_ind>
		printf("Indice listo \n");
     614:	84 e3       	ldi	r24, 0x34	; 52
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
		
	}
	
	fsr_med = ADC_GetData(FSRpin_med);
     61c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     626:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <fsr_med+0x1>
     62a:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <fsr_med>
	pulsos_med = 3000; // Para evitar que interrupción apague pwm
     62e:	28 eb       	ldi	r18, 0xB8	; 184
     630:	3b e0       	ldi	r19, 0x0B	; 11
     632:	30 93 15 04 	sts	0x0415, r19	; 0x800415 <pulsos_med+0x1>
     636:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <pulsos_med>
	if (fsr_med <= 40)
     63a:	89 97       	sbiw	r24, 0x29	; 41
     63c:	b4 f5       	brge	.+108    	; 0x6aa <calibrar+0x13e>
	{
		dir_med = 0;
     63e:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <dir_med>
		pwm_med = 130;
     642:	82 e8       	ldi	r24, 0x82	; 130
     644:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <pwm_med>
		onoff_med = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <onoff_med>
		PORTB &= ~(1 << dirpin_med);
     64e:	25 b1       	in	r18, 0x05	; 5
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	00 90 3a 04 	lds	r0, 0x043A	; 0x80043a <dirpin_med>
     658:	02 c0       	rjmp	.+4      	; 0x65e <calibrar+0xf2>
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	0a 94       	dec	r0
     660:	e2 f7       	brpl	.-8      	; 0x65a <calibrar+0xee>
     662:	80 95       	com	r24
     664:	82 23       	and	r24, r18
     666:	85 b9       	out	0x05, r24	; 5
		ActivarPWM_Med(pwm_med, onoff_med);
     668:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
     66c:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
     670:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
		
		while((ADC_GetData(FSRpin_med)) <= 40 )
     674:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     67e:	89 97       	sbiw	r24, 0x29	; 41
     680:	cc f3       	brlt	.-14     	; 0x674 <calibrar+0x108>
		{

		}
		ActivarPWM_Med(0, 0);
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
		pwm_med = 0;
     68a:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <pwm_med>
		onoff_med = 0;
     68e:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <onoff_med>
		count_enc_med = 0;
     692:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <count_enc_med+0x1>
     696:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <count_enc_med>
		pulsos_med = 0;         // Para evitar que interrupción de encoder apague pwm - resetear a 0
     69a:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <pulsos_med+0x1>
     69e:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <pulsos_med>
		printf("Medio listo \n");
     6a2:	82 e4       	ldi	r24, 0x42	; 66
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
	
	}
	
	fsr_anu = ADC_GetData(FSRpin_anu);
     6aa:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     6b4:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <fsr_anu+0x1>
     6b8:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <fsr_anu>
	pulsos_anu = 3000;         // Para evitar que interrupción de encoder apague pwm
     6bc:	28 eb       	ldi	r18, 0xB8	; 184
     6be:	3b e0       	ldi	r19, 0x0B	; 11
     6c0:	30 93 13 04 	sts	0x0413, r19	; 0x800413 <pulsos_anu+0x1>
     6c4:	20 93 12 04 	sts	0x0412, r18	; 0x800412 <pulsos_anu>
	if (fsr_anu <= 50)
     6c8:	c3 97       	sbiw	r24, 0x33	; 51
     6ca:	0c f0       	brlt	.+2      	; 0x6ce <calibrar+0x162>
     6cc:	49 c0       	rjmp	.+146    	; 0x760 <calibrar+0x1f4>
	{
		dir_anu = 0;
     6ce:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <dir_anu>
		pwm_anu = 120;
     6d2:	88 e7       	ldi	r24, 0x78	; 120
     6d4:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <pwm_anu>
		onoff_anu = 1;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <onoff_anu>
		PORTB &= ~(1 << dirpin_anu);
     6de:	25 b1       	in	r18, 0x05	; 5
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <dirpin_anu>
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <calibrar+0x182>
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	0a 94       	dec	r0
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <calibrar+0x17e>
     6f2:	80 95       	com	r24
     6f4:	82 23       	and	r24, r18
     6f6:	85 b9       	out	0x05, r24	; 5
		ActivarPWM_Anu(pwm_anu, onoff_anu);
     6f8:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
     6fc:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
     700:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
		
		while(ADC_GetData(FSRpin_anu) <= 50)
     704:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
     70e:	c3 97       	sbiw	r24, 0x33	; 51
     710:	cc f3       	brlt	.-14     	; 0x704 <calibrar+0x198>
		{
			
		}
		
		ActivarPWM_Anu(0, 0);
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
		pwm_anu = 0;
     71a:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <pwm_anu>
		onoff_anu = 0;
     71e:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <onoff_anu>
		count_enc_anu = 0;
     722:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <count_enc_anu+0x1>
     726:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <count_enc_anu>
		pulsos_anu = 0;         // Para evitar que interrupción de encoder apague pwm - resetear a 0
     72a:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <pulsos_anu+0x1>
     72e:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <pulsos_anu>
		printf("Anular listo \n");
     732:	8f e4       	ldi	r24, 0x4F	; 79
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     73a:	8f e1       	ldi	r24, 0x1F	; 31
     73c:	9e e4       	ldi	r25, 0x4E	; 78
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <calibrar+0x1d2>
     742:	00 c0       	rjmp	.+0      	; 0x744 <calibrar+0x1d8>
     744:	00 00       	nop
		_delay_ms(5);
		printf("IMA listo \n");
     746:	8d e5       	ldi	r24, 0x5D	; 93
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     74e:	9f ef       	ldi	r25, 0xFF	; 255
     750:	20 e7       	ldi	r18, 0x70	; 112
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	91 50       	subi	r25, 0x01	; 1
     756:	20 40       	sbci	r18, 0x00	; 0
     758:	80 40       	sbci	r24, 0x00	; 0
     75a:	e1 f7       	brne	.-8      	; 0x754 <calibrar+0x1e8>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <calibrar+0x1f2>
     75e:	00 00       	nop
		_delay_ms(50);
	}
	
	abs_indice = 0;
     760:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <abs_indice+0x1>
     764:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <abs_indice>
	abs_medio = 0;
     768:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <abs_medio+0x1>
     76c:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <abs_medio>
	abs_anular = 0;
     770:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <abs_anular+0x1>
     774:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <abs_anular>
	
	ind_ready = 0;
     778:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <ind_ready>
	med_ready = 0;
     77c:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <med_ready>
	anu_ready = 0;
     780:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <anu_ready>
     784:	08 95       	ret

00000786 <getIDMov>:
	printf("ID Mov: %d \n", id_mov);
}
*/

int getIDMov(void)
{
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
	uint8_t id_move = 0;
	
	// Obtiene los estados de los pines de control
	if (((PINB & (1 << PINB3)) >> PINB3) == 1)
	{
		clave_mov[0] = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	1b 9b       	sbis	0x03, 3	; 3
     78e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		clave_mov[0] = 0;
	}
	
	if (((PINB & (1 << PINB4)) >> PINB4) == 1)
     790:	1c 99       	sbic	0x03, 4	; 3
     792:	02 c0       	rjmp	.+4      	; 0x798 <getIDMov+0x12>
	{
		clave_mov[1] = 2;
	}
	else
	{
		clave_mov[1] = 0;
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	01 c0       	rjmp	.+2      	; 0x79a <getIDMov+0x14>
		clave_mov[0] = 0;
	}
	
	if (((PINB & (1 << PINB4)) >> PINB4) == 1)
	{
		clave_mov[1] = 2;
     798:	22 e0       	ldi	r18, 0x02	; 2
	else
	{
		clave_mov[1] = 0;
	}
	
	if (((PINB & (1 << PINB5)) >> PINB5) == 1)
     79a:	1d 99       	sbic	0x03, 5	; 3
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <getIDMov+0x1c>
	{
		clave_mov[2] = 4;
	}
	else
	{
		clave_mov[2] = 0;
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <getIDMov+0x1e>
		clave_mov[1] = 0;
	}
	
	if (((PINB & (1 << PINB5)) >> PINB5) == 1)
	{
		clave_mov[2] = 4;
     7a2:	94 e0       	ldi	r25, 0x04	; 4
	{
		clave_mov[2] = 0;
	}
	
	id_move = clave_mov[0] + clave_mov[1] + clave_mov[2];
	printf("ID Mov: %d \n", id_move);
     7a4:	82 0f       	add	r24, r18
     7a6:	89 0f       	add	r24, r25
     7a8:	c8 2f       	mov	r28, r24
     7aa:	d0 e0       	ldi	r29, 0x00	; 0
     7ac:	1f 92       	push	r1
     7ae:	8f 93       	push	r24
     7b0:	88 e6       	ldi	r24, 0x68	; 104
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>

	return(id_move);
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
}
     7c4:	ce 01       	movw	r24, r28
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <getPulsosMov>:


void getPulsosMov(void)
{
	
	if (abs_indice < indice[id_mov])
     7cc:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <id_mov>
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	ec 5d       	subi	r30, 0xDC	; 220
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	80 81       	ld	r24, Z
     7dc:	91 81       	ldd	r25, Z+1	; 0x01
     7de:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <abs_indice>
     7e2:	30 91 30 04 	lds	r19, 0x0430	; 0x800430 <abs_indice+0x1>
     7e6:	28 17       	cp	r18, r24
     7e8:	39 07       	cpc	r19, r25
     7ea:	fc f4       	brge	.+62     	; 0x82a <getPulsosMov+0x5e>
	{
		pulsos_ind = indice[id_mov] - abs_indice;
     7ec:	82 1b       	sub	r24, r18
     7ee:	93 0b       	sbc	r25, r19
     7f0:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <pulsos_ind+0x1>
     7f4:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <pulsos_ind>
		dir_ind = 1;
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <dir_ind>
		signo_ind = 1;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <signo_ind+0x1>
     806:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <signo_ind>
		pwm_ind = 130;
     80a:	32 e8       	ldi	r19, 0x82	; 130
     80c:	30 93 40 04 	sts	0x0440, r19	; 0x800440 <pwm_ind>
		onoff_ind = 1;
     810:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <onoff_ind>
		PORTD |= (1<<dirpin_ind);	// Dirección del movimiento
     814:	2b b1       	in	r18, 0x0b	; 11
     816:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_ind>
     81a:	02 c0       	rjmp	.+4      	; 0x820 <getPulsosMov+0x54>
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	0a 94       	dec	r0
     822:	e2 f7       	brpl	.-8      	; 0x81c <getPulsosMov+0x50>
     824:	82 2b       	or	r24, r18
     826:	8b b9       	out	0x0b, r24	; 11
     828:	45 c0       	rjmp	.+138    	; 0x8b4 <getPulsosMov+0xe8>
	}
	else if (abs_indice > indice[id_mov])
     82a:	82 17       	cp	r24, r18
     82c:	93 07       	cpc	r25, r19
     82e:	44 f5       	brge	.+80     	; 0x880 <getPulsosMov+0xb4>
	{
		pulsos_ind = abs(indice[id_mov] - abs_indice);
     830:	82 1b       	sub	r24, r18
     832:	93 0b       	sbc	r25, r19
     834:	9c 01       	movw	r18, r24
     836:	22 f4       	brpl	.+8      	; 0x840 <getPulsosMov+0x74>
     838:	22 27       	eor	r18, r18
     83a:	33 27       	eor	r19, r19
     83c:	28 1b       	sub	r18, r24
     83e:	39 0b       	sbc	r19, r25
     840:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <pulsos_ind+0x1>
     844:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <pulsos_ind>
		dir_ind = 0;
     848:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <dir_ind>
		signo_ind = -1;
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <signo_ind+0x1>
     854:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <signo_ind>
		pwm_ind = 140;
     858:	8c e8       	ldi	r24, 0x8C	; 140
     85a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <pwm_ind>
		onoff_ind = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <onoff_ind>
		PORTD &= ~(1<<dirpin_ind);		// Dirección del movimiento
     864:	2b b1       	in	r18, 0x0b	; 11
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_ind>
     86e:	02 c0       	rjmp	.+4      	; 0x874 <getPulsosMov+0xa8>
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	0a 94       	dec	r0
     876:	e2 f7       	brpl	.-8      	; 0x870 <getPulsosMov+0xa4>
     878:	80 95       	com	r24
     87a:	82 23       	and	r24, r18
     87c:	8b b9       	out	0x0b, r24	; 11
     87e:	1a c0       	rjmp	.+52     	; 0x8b4 <getPulsosMov+0xe8>
	}
	else if (abs_indice == indice[id_mov])
     880:	82 17       	cp	r24, r18
     882:	93 07       	cpc	r25, r19
     884:	b9 f4       	brne	.+46     	; 0x8b4 <getPulsosMov+0xe8>
	{
		pulsos_ind = 0;
     886:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <pulsos_ind+0x1>
     88a:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <pulsos_ind>
		dir_ind = 0;
     88e:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <dir_ind>
		pwm_ind = 0;
     892:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <pwm_ind>
		onoff_ind = 0;
     896:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <onoff_ind>
		PORTD &= ~(1<<dirpin_ind);		// Dirección del movimiento
     89a:	2b b1       	in	r18, 0x0b	; 11
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_ind>
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <getPulsosMov+0xde>
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	0a 94       	dec	r0
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <getPulsosMov+0xda>
     8ae:	80 95       	com	r24
     8b0:	82 23       	and	r24, r18
     8b2:	8b b9       	out	0x0b, r24	; 11
	}
	
	
	if (abs_medio < medio[id_mov])
     8b4:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <id_mov>
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	ee 5e       	subi	r30, 0xEE	; 238
     8c0:	fe 4f       	sbci	r31, 0xFE	; 254
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <abs_medio>
     8ca:	30 91 2e 04 	lds	r19, 0x042E	; 0x80042e <abs_medio+0x1>
     8ce:	28 17       	cp	r18, r24
     8d0:	39 07       	cpc	r19, r25
     8d2:	fc f4       	brge	.+62     	; 0x912 <__stack+0x13>
	{
		pulsos_med = medio[id_mov] - abs_medio;
     8d4:	82 1b       	sub	r24, r18
     8d6:	93 0b       	sbc	r25, r19
     8d8:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <pulsos_med+0x1>
     8dc:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <pulsos_med>
		dir_med = 1;
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <dir_med>
		signo_med = 1;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <signo_med+0x1>
     8ee:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <signo_med>
		pwm_med = 140;
     8f2:	3c e8       	ldi	r19, 0x8C	; 140
     8f4:	30 93 3f 04 	sts	0x043F, r19	; 0x80043f <pwm_med>
		onoff_med = 1;
     8f8:	20 93 42 04 	sts	0x0442, r18	; 0x800442 <onoff_med>
		PORTB |= (1<<dirpin_med);	// Dirección del movimiento
     8fc:	25 b1       	in	r18, 0x05	; 5
     8fe:	00 90 3a 04 	lds	r0, 0x043A	; 0x80043a <dirpin_med>
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	0a 94       	dec	r0
     90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0x5>
     90c:	82 2b       	or	r24, r18
     90e:	85 b9       	out	0x05, r24	; 5
     910:	45 c0       	rjmp	.+138    	; 0x99c <__stack+0x9d>
	}
	else if (abs_medio > medio[id_mov])
     912:	82 17       	cp	r24, r18
     914:	93 07       	cpc	r25, r19
     916:	44 f5       	brge	.+80     	; 0x968 <__stack+0x69>
	{
		pulsos_med = abs(medio[id_mov] - abs_medio);
     918:	82 1b       	sub	r24, r18
     91a:	93 0b       	sbc	r25, r19
     91c:	9c 01       	movw	r18, r24
     91e:	22 f4       	brpl	.+8      	; 0x928 <__stack+0x29>
     920:	22 27       	eor	r18, r18
     922:	33 27       	eor	r19, r19
     924:	28 1b       	sub	r18, r24
     926:	39 0b       	sbc	r19, r25
     928:	30 93 15 04 	sts	0x0415, r19	; 0x800415 <pulsos_med+0x1>
     92c:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <pulsos_med>
		dir_med = 0;
     930:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <dir_med>
		signo_med = -1;
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	9f ef       	ldi	r25, 0xFF	; 255
     938:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <signo_med+0x1>
     93c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <signo_med>
		pwm_med = 150;
     940:	86 e9       	ldi	r24, 0x96	; 150
     942:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <pwm_med>
		onoff_med = 1;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <onoff_med>
		PORTB &= ~(1<<dirpin_med);		// Dirección del movimiento
     94c:	25 b1       	in	r18, 0x05	; 5
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	00 90 3a 04 	lds	r0, 0x043A	; 0x80043a <dirpin_med>
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <__stack+0x59>
     960:	80 95       	com	r24
     962:	82 23       	and	r24, r18
     964:	85 b9       	out	0x05, r24	; 5
     966:	1a c0       	rjmp	.+52     	; 0x99c <__stack+0x9d>
	}
	else if (abs_medio == medio[id_mov])
     968:	82 17       	cp	r24, r18
     96a:	93 07       	cpc	r25, r19
     96c:	b9 f4       	brne	.+46     	; 0x99c <__stack+0x9d>
	{
		pulsos_med = 0;
     96e:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <pulsos_med+0x1>
     972:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <pulsos_med>
		dir_med = 0;
     976:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <dir_med>
		pwm_med = 0;
     97a:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <pwm_med>
		onoff_med = 0;
     97e:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <onoff_med>
		PORTB &= ~(1<<dirpin_med);		// Dirección del movimiento
     982:	25 b1       	in	r18, 0x05	; 5
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	00 90 3a 04 	lds	r0, 0x043A	; 0x80043a <dirpin_med>
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x93>
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	0a 94       	dec	r0
     994:	e2 f7       	brpl	.-8      	; 0x98e <__stack+0x8f>
     996:	80 95       	com	r24
     998:	82 23       	and	r24, r18
     99a:	85 b9       	out	0x05, r24	; 5
	}
	
	
	if (abs_anular < anular[id_mov])
     99c:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <id_mov>
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	e0 50       	subi	r30, 0x00	; 0
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <abs_anular>
     9b2:	30 91 2c 04 	lds	r19, 0x042C	; 0x80042c <abs_anular+0x1>
     9b6:	28 17       	cp	r18, r24
     9b8:	39 07       	cpc	r19, r25
     9ba:	fc f4       	brge	.+62     	; 0x9fa <__stack+0xfb>
	{
		pulsos_anu = anular[id_mov] - abs_anular;
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <pulsos_anu+0x1>
     9c4:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <pulsos_anu>
		dir_anu = 1;
     9c8:	21 e0       	ldi	r18, 0x01	; 1
     9ca:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <dir_anu>
		signo_anu = 1;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <signo_anu+0x1>
     9d6:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <signo_anu>
		pwm_anu = 140;
     9da:	3c e8       	ldi	r19, 0x8C	; 140
     9dc:	30 93 3e 04 	sts	0x043E, r19	; 0x80043e <pwm_anu>
		onoff_anu = 1;
     9e0:	20 93 41 04 	sts	0x0441, r18	; 0x800441 <onoff_anu>
		PORTB |= (1<<dirpin_anu);	// Dirección del movimiento
     9e4:	25 b1       	in	r18, 0x05	; 5
     9e6:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <dirpin_anu>
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0xf1>
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	0a 94       	dec	r0
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <__stack+0xed>
     9f4:	82 2b       	or	r24, r18
     9f6:	85 b9       	out	0x05, r24	; 5
     9f8:	45 c0       	rjmp	.+138    	; 0xa84 <__stack+0x185>
	}
	else if (abs_anular > anular[id_mov])
     9fa:	82 17       	cp	r24, r18
     9fc:	93 07       	cpc	r25, r19
     9fe:	44 f5       	brge	.+80     	; 0xa50 <__stack+0x151>
	{
		pulsos_anu = abs(anular[id_mov] - abs_anular);
     a00:	82 1b       	sub	r24, r18
     a02:	93 0b       	sbc	r25, r19
     a04:	9c 01       	movw	r18, r24
     a06:	22 f4       	brpl	.+8      	; 0xa10 <__stack+0x111>
     a08:	22 27       	eor	r18, r18
     a0a:	33 27       	eor	r19, r19
     a0c:	28 1b       	sub	r18, r24
     a0e:	39 0b       	sbc	r19, r25
     a10:	30 93 13 04 	sts	0x0413, r19	; 0x800413 <pulsos_anu+0x1>
     a14:	20 93 12 04 	sts	0x0412, r18	; 0x800412 <pulsos_anu>
		dir_anu = 0;
     a18:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <dir_anu>
		signo_anu = -1;
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	9f ef       	ldi	r25, 0xFF	; 255
     a20:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <signo_anu+0x1>
     a24:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <signo_anu>
		pwm_anu = 120;
     a28:	88 e7       	ldi	r24, 0x78	; 120
     a2a:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <pwm_anu>
		onoff_anu = 1;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <onoff_anu>
		PORTB &= ~(1<<dirpin_anu);		// Dirección del movimiento
     a34:	25 b1       	in	r18, 0x05	; 5
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <dirpin_anu>
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__stack+0x145>
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	0a 94       	dec	r0
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <__stack+0x141>
     a48:	80 95       	com	r24
     a4a:	82 23       	and	r24, r18
     a4c:	85 b9       	out	0x05, r24	; 5
     a4e:	1a c0       	rjmp	.+52     	; 0xa84 <__stack+0x185>
	}
	else if (abs_anular == anular[id_mov])
     a50:	82 17       	cp	r24, r18
     a52:	93 07       	cpc	r25, r19
     a54:	b9 f4       	brne	.+46     	; 0xa84 <__stack+0x185>
	{
		pulsos_anu = 0;
     a56:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <pulsos_anu+0x1>
     a5a:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <pulsos_anu>
		dir_anu = 0;
     a5e:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <dir_anu>
		pwm_anu = 0;
     a62:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <pwm_anu>
		onoff_anu = 0;
     a66:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <onoff_anu>
		PORTB &= ~(1<<dirpin_anu);		// Dirección del movimiento
     a6a:	25 b1       	in	r18, 0x05	; 5
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <dirpin_anu>
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <__stack+0x17b>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	0a 94       	dec	r0
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <__stack+0x177>
     a7e:	80 95       	com	r24
     a80:	82 23       	and	r24, r18
     a82:	85 b9       	out	0x05, r24	; 5
	}
	
	printf("PI: %d \n", pulsos_ind);
     a84:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <pulsos_ind+0x1>
     a88:	8f 93       	push	r24
     a8a:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pulsos_ind>
     a8e:	8f 93       	push	r24
     a90:	85 e7       	ldi	r24, 0x75	; 117
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	9f 93       	push	r25
     a96:	8f 93       	push	r24
     a98:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     a9c:	8f e1       	ldi	r24, 0x1F	; 31
     a9e:	9e e4       	ldi	r25, 0x4E	; 78
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <__stack+0x1a1>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <__stack+0x1a7>
     aa6:	00 00       	nop
	_delay_ms(5);
	printf("PM: %d \n", pulsos_med);
     aa8:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <pulsos_med+0x1>
     aac:	8f 93       	push	r24
     aae:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pulsos_med>
     ab2:	8f 93       	push	r24
     ab4:	8e e7       	ldi	r24, 0x7E	; 126
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     ac0:	8f e1       	ldi	r24, 0x1F	; 31
     ac2:	9e e4       	ldi	r25, 0x4E	; 78
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <__stack+0x1c5>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <__stack+0x1cb>
     aca:	00 00       	nop
	_delay_ms(5);
	printf("PA: %d \n", pulsos_anu);
     acc:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <pulsos_anu+0x1>
     ad0:	8f 93       	push	r24
     ad2:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pulsos_anu>
     ad6:	8f 93       	push	r24
     ad8:	87 e8       	ldi	r24, 0x87	; 135
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     ae4:	8f e1       	ldi	r24, 0x1F	; 31
     ae6:	9e e4       	ldi	r25, 0x4E	; 78
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <__stack+0x1e9>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <__stack+0x1ef>
     aee:	00 00       	nop
	_delay_ms(5);
	
	ind_ready = 0;
     af0:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <ind_ready>
	med_ready = 0;
     af4:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <med_ready>
	anu_ready = 0;
     af8:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <anu_ready>
}
     afc:	8d b7       	in	r24, 0x3d	; 61
     afe:	9e b7       	in	r25, 0x3e	; 62
     b00:	0c 96       	adiw	r24, 0x0c	; 12
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	9e bf       	out	0x3e, r25	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	8d bf       	out	0x3d, r24	; 61
     b0c:	08 95       	ret

00000b0e <main>:
uint8_t moda = 0;


int main(void)
{
	cli();
     b0e:	f8 94       	cli
	
	DDRC = 0x30;   // 0011 0000 (PC0-FSR_ind, PC1-FSR_med, PC2-FSR_anu),(PC3-pulgar listo), (PC4-ima_listo), (PC5-nuevo mov a raspb)
     b10:	80 e3       	ldi	r24, 0x30	; 48
     b12:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xE2;   // 1110 0010 (PD0-PD1-UART), (PD2-Enc_ind, PD3-Enc_med, PD4-Enc_anu), (PD5-PWM_ind, PD6-PWM_med), (PD7-Dir_ind)
     b14:	82 ee       	ldi	r24, 0xE2	; 226
     b16:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x07;   // 0000 0111 (PB0-Dir_med, PB2-Dir_anu), (PB1-PWM_anu), (PB3:5-Control), (PB7-PB7-Clock)
     b18:	87 e0       	ldi	r24, 0x07	; 7
     b1a:	84 b9       	out	0x04, r24	; 4
	
	PORTC |= (1<<3);	// Activar resistencia pull-up para PC3
     b1c:	43 9a       	sbi	0x08, 3	; 8
	PORTB |= ((1<<3) | (1<<4) | (1<<5));	// Activar resistencia pull-up para PB3, PB4 y PB5
     b1e:	85 b1       	in	r24, 0x05	; 5
     b20:	88 63       	ori	r24, 0x38	; 56
     b22:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1<<4);	// Poner en bajo PC4
     b24:	44 98       	cbi	0x08, 4	; 8
	PORTC &= ~(1<<5);	// Poner en bajo PC5
     b26:	45 98       	cbi	0x08, 5	; 8
	PORTD |= ((1<<2) | (1<<3) | (1<<4));	// Activar resistencia pull-up para PD2, PD3 y PD4
     b28:	8b b1       	in	r24, 0x0b	; 11
     b2a:	8c 61       	ori	r24, 0x1C	; 28
     b2c:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~((1<<5) | (1<<6) | (1<<7));	// Poner en bajo PD5, PD6, PD7
     b2e:	8b b1       	in	r24, 0x0b	; 11
     b30:	8f 71       	andi	r24, 0x1F	; 31
     b32:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~((1<<0) | (1<<1) | (1<<2));	// Poner en bajo PB0, PB1, PB2
     b34:	85 b1       	in	r24, 0x05	; 5
     b36:	88 7f       	andi	r24, 0xF8	; 248
     b38:	85 b9       	out	0x05, r24	; 5
	
	configADC();   // Configura ADC
     b3a:	0e 94 49 01 	call	0x292	; 0x292 <configADC>
	configPWM();   // Configura PWM
     b3e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <configPWM>
	configInterrupt();   // Configura interrupciones de encoders y pulgar_listo
     b42:	0e 94 9b 02 	call	0x536	; 0x536 <configInterrupt>
	UART_init();
     b46:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
	

	
	sei();
     b4a:	78 94       	sei
			_delay_ms(5);
			//getIDMov();			// Obtener el código del movimiento deseado, leer señales de control
			
			///////////////// Sección en prueba //////////////////////////////////////
			
			lectura[0] = getIDMov();
     b4c:	cf e0       	ldi	r28, 0x0F	; 15
     b4e:	d4 e0       	ldi	r29, 0x04	; 4
			{
				printf("In m \n");
				_delay_ms(5);
				id_mov_ant = id_mov;
				
				PORTC &= ~(1 << raspB_pin);	// Poner C5 en bajo, indica a raspberry que el movimiento ha sido leído
     b50:	01 e0       	ldi	r16, 0x01	; 1
     b52:	10 e0       	ldi	r17, 0x00	; 0
				ima_listo = 1;
				
				//////////////////// Sección en prueba ///////////////////////////////
				////////// Reporte de posición de motores y fuerza aplicada //////////
				
				printf("Indice: %d \n", abs_indice);
     b54:	0f 2e       	mov	r0, r31
     b56:	f6 e4       	ldi	r31, 0x46	; 70
     b58:	af 2e       	mov	r10, r31
     b5a:	f3 e0       	ldi	r31, 0x03	; 3
     b5c:	bf 2e       	mov	r11, r31
     b5e:	f0 2d       	mov	r31, r0
				printf("Medio: %d \n", abs_medio);
     b60:	0f 2e       	mov	r0, r31
     b62:	f3 e5       	ldi	r31, 0x53	; 83
     b64:	8f 2e       	mov	r8, r31
     b66:	f3 e0       	ldi	r31, 0x03	; 3
     b68:	9f 2e       	mov	r9, r31
     b6a:	f0 2d       	mov	r31, r0
				printf("Anular: %d \n", abs_anular);
     b6c:	0f 2e       	mov	r0, r31
     b6e:	ff e5       	ldi	r31, 0x5F	; 95
     b70:	6f 2e       	mov	r6, r31
     b72:	f3 e0       	ldi	r31, 0x03	; 3
     b74:	7f 2e       	mov	r7, r31
     b76:	f0 2d       	mov	r31, r0
				
				printf("Fuerza Ind: %d \n", ADC_GetData(FSRpin_ind));
     b78:	0f 2e       	mov	r0, r31
     b7a:	fc e6       	ldi	r31, 0x6C	; 108
     b7c:	4f 2e       	mov	r4, r31
     b7e:	f3 e0       	ldi	r31, 0x03	; 3
     b80:	5f 2e       	mov	r5, r31
     b82:	f0 2d       	mov	r31, r0
     b84:	2f ef       	ldi	r18, 0xFF	; 255
     b86:	84 e3       	ldi	r24, 0x34	; 52
     b88:	9c e0       	ldi	r25, 0x0C	; 12
     b8a:	21 50       	subi	r18, 0x01	; 1
     b8c:	80 40       	sbci	r24, 0x00	; 0
     b8e:	90 40       	sbci	r25, 0x00	; 0
     b90:	e1 f7       	brne	.-8      	; 0xb8a <main+0x7c>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <main+0x86>
     b94:	00 00       	nop
     b96:	2f ef       	ldi	r18, 0xFF	; 255
     b98:	84 e3       	ldi	r24, 0x34	; 52
     b9a:	9c e0       	ldi	r25, 0x0C	; 12
     b9c:	21 50       	subi	r18, 0x01	; 1
     b9e:	80 40       	sbci	r24, 0x00	; 0
     ba0:	90 40       	sbci	r25, 0x00	; 0
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <main+0x8e>
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <main+0x98>
     ba6:	00 00       	nop
	
	while (1)
	{
		_delay_ms(250);
		_delay_ms(250);
		getSerialParams();
     ba8:	0e 94 6f 01 	call	0x2de	; 0x2de <getSerialParams>
		//printf("Sis: %d \n", iniciar_sis);
		
		// Paso 1: Calibración inicial
		
		if(iniciar_sis == 0)		// (iniciar_sis == 0 && pulgar_listo == 1)
     bac:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <iniciar_sis>
     bb0:	88 23       	and	r24, r24
     bb2:	39 f0       	breq	.+14     	; 0xbc2 <main+0xb4>
		
		// Fin de paso 1
		
		// Paso 2: Detección de movimientos
		// if(count_event == 2)
		while(count_event == 2)
     bb4:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <count_event>
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	09 f4       	brne	.+2      	; 0xbbe <main+0xb0>
     bbc:	82 c0       	rjmp	.+260    	; 0xcc2 <main+0x1b4>
     bbe:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <main+0x124c>
			/*for (int t=0; t<20; t++)
			{
				_delay_ms(250);			// Espera 2 segundos para iniciar
			}*/
			
			printf("Hola usuario N \n ");
     bc2:	80 e9       	ldi	r24, 0x90	; 144
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	9f 93       	push	r25
     bc8:	8f 93       	push	r24
     bca:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     bce:	2f ef       	ldi	r18, 0xFF	; 255
     bd0:	84 e3       	ldi	r24, 0x34	; 52
     bd2:	9c e0       	ldi	r25, 0x0C	; 12
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	80 40       	sbci	r24, 0x00	; 0
     bd8:	90 40       	sbci	r25, 0x00	; 0
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <main+0xc6>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <main+0xd0>
     bde:	00 00       	nop
			_delay_ms(250);
			printf("Vamos a calibrar \n");
     be0:	82 ea       	ldi	r24, 0xA2	; 162
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	84 e3       	ldi	r24, 0x34	; 52
     bec:	9c e0       	ldi	r25, 0x0C	; 12
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <main+0xe0>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <main+0xea>
     bf8:	00 00       	nop
     bfa:	a8 01       	movw	r20, r16
     bfc:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <pin_pul_listo>
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <main+0xf8>
     c02:	44 0f       	add	r20, r20
     c04:	55 1f       	adc	r21, r21
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <main+0xf4>
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
			
			while (count_event != 1)
			{
				if ( (PINC & (1 << pin_pul_listo)) != 0 ) // (PINC & (1 << PINC3)) == (1 << PINC3)
				{
					count_event = 1;
     c0e:	31 e0       	ldi	r19, 0x01	; 1
     c10:	08 c0       	rjmp	.+16     	; 0xc22 <main+0x114>
			printf("Vamos a calibrar \n");
			_delay_ms(250);
			
			while (count_event != 1)
			{
				if ( (PINC & (1 << pin_pul_listo)) != 0 ) // (PINC & (1 << PINC3)) == (1 << PINC3)
     c12:	86 b1       	in	r24, 0x06	; 6
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	84 23       	and	r24, r20
     c18:	95 23       	and	r25, r21
     c1a:	89 2b       	or	r24, r25
     c1c:	21 f0       	breq	.+8      	; 0xc26 <main+0x118>
				{
					count_event = 1;
     c1e:	30 93 4a 04 	sts	0x044A, r19	; 0x80044a <count_event>
			printf("Hola usuario N \n ");
			_delay_ms(250);
			printf("Vamos a calibrar \n");
			_delay_ms(250);
			
			while (count_event != 1)
     c22:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <count_event>
     c26:	21 30       	cpi	r18, 0x01	; 1
     c28:	a1 f7       	brne	.-24     	; 0xc12 <main+0x104>
				{
					count_event = 1;
					//printf("cat 0 \n");
				}
			}
			printf("cat 0 \n");
     c2a:	84 eb       	ldi	r24, 0xB4	; 180
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
			calibrar();			
     c32:	0e 94 b6 02 	call	0x56c	; 0x56c <calibrar>
			iniciar_sis = 1;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <iniciar_sis>
			id_mov_ant = 8;
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <id_mov_ant>
			{
				if ( ((PINC & (1 << pin_pul_listo)) == 0) && ((PINC & (1 << pin_ima_listo)) == 0) )
				{
					PORTC |= (1 << raspB_pin);	// Poner pin C5 en alto, enviar indicación de nuevo movimiento a Raspberry
					PORTC |= (1<<pin_ima_listo);       // Poner pin en alto
					count_event = 2;
     c42:	68 94       	set
     c44:	ff 24       	eor	r15, r15
     c46:	f1 f8       	bld	r15, 1
			printf("cat 0 \n");
			calibrar();			
			iniciar_sis = 1;
			id_mov_ant = 8;
			
			while (count_event != 2)
     c48:	28 c0       	rjmp	.+80     	; 0xc9a <main+0x18c>
			{
				if ( ((PINC & (1 << pin_pul_listo)) == 0) && ((PINC & (1 << pin_ima_listo)) == 0) )
     c4a:	86 b1       	in	r24, 0x06	; 6
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	82 23       	and	r24, r18
     c50:	93 23       	and	r25, r19
     c52:	89 2b       	or	r24, r25
     c54:	a1 f5       	brne	.+104    	; 0xcbe <main+0x1b0>
     c56:	86 b1       	in	r24, 0x06	; 6
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	84 23       	and	r24, r20
     c5c:	95 23       	and	r25, r21
     c5e:	89 2b       	or	r24, r25
     c60:	71 f5       	brne	.+92     	; 0xcbe <main+0x1b0>
				{
					PORTC |= (1 << raspB_pin);	// Poner pin C5 en alto, enviar indicación de nuevo movimiento a Raspberry
     c62:	28 b1       	in	r18, 0x08	; 8
     c64:	c8 01       	movw	r24, r16
     c66:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <raspB_pin>
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <main+0x162>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <main+0x15e>
     c74:	82 2b       	or	r24, r18
     c76:	88 b9       	out	0x08, r24	; 8
					PORTC |= (1<<pin_ima_listo);       // Poner pin en alto
     c78:	28 b1       	in	r18, 0x08	; 8
     c7a:	c8 01       	movw	r24, r16
     c7c:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <pin_ima_listo>
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <main+0x178>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <main+0x174>
     c8a:	82 2b       	or	r24, r18
     c8c:	88 b9       	out	0x08, r24	; 8
					count_event = 2;
     c8e:	f0 92 4a 04 	sts	0x044A, r15	; 0x80044a <count_event>
					printf("cat \n");
     c92:	8b eb       	ldi	r24, 0xBB	; 187
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
			printf("cat 0 \n");
			calibrar();			
			iniciar_sis = 1;
			id_mov_ant = 8;
			
			while (count_event != 2)
     c9a:	60 91 4a 04 	lds	r22, 0x044A	; 0x80044a <count_event>
     c9e:	98 01       	movw	r18, r16
     ca0:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <pin_pul_listo>
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <main+0x19c>
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <main+0x198>
     cae:	a8 01       	movw	r20, r16
     cb0:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <pin_ima_listo>
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <main+0x1ac>
     cb6:	44 0f       	add	r20, r20
     cb8:	55 1f       	adc	r21, r21
     cba:	0a 94       	dec	r0
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <main+0x1a8>
     cbe:	62 30       	cpi	r22, 0x02	; 2
     cc0:	21 f6       	brne	.-120    	; 0xc4a <main+0x13c>
				printf("Indice: %d \n", abs_indice);
				printf("Medio: %d \n", abs_medio);
				printf("Anular: %d \n", abs_anular);
				
				printf("Fuerza Ind: %d \n", ADC_GetData(FSRpin_ind));
				printf("Fuerza Med: %d \n", ADC_GetData(FSRpin_med));
     cc2:	0f 2e       	mov	r0, r31
     cc4:	fd e7       	ldi	r31, 0x7D	; 125
     cc6:	cf 2e       	mov	r12, r31
     cc8:	f3 e0       	ldi	r31, 0x03	; 3
     cca:	df 2e       	mov	r13, r31
     ccc:	f0 2d       	mov	r31, r0
				printf("Fuerza Anu: %d \n", ADC_GetData(FSRpin_anu));
     cce:	0f 2e       	mov	r0, r31
     cd0:	fe e8       	ldi	r31, 0x8E	; 142
     cd2:	ef 2e       	mov	r14, r31
     cd4:	f3 e0       	ldi	r31, 0x03	; 3
     cd6:	ff 2e       	mov	r15, r31
     cd8:	f0 2d       	mov	r31, r0
						pwm_anu = 0;
						anu_ready = 1;
						printf("Anu come \n");
						
						abs_anular = 0; // abs_menique + (signo_men * rel_menique);
						printf("Anu en pos: %d \n", abs_anular);
     cda:	0f 2e       	mov	r0, r31
     cdc:	f9 ef       	ldi	r31, 0xF9	; 249
     cde:	2f 2e       	mov	r2, r31
     ce0:	f2 e0       	ldi	r31, 0x02	; 2
     ce2:	3f 2e       	mov	r3, r31
     ce4:	f0 2d       	mov	r31, r0
		
		// Paso 2: Detección de movimientos
		// if(count_event == 2)
		while(count_event == 2)
		{
			printf("In 2 \n");
     ce6:	80 ec       	ldi	r24, 0xC0	; 192
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     cee:	8f e1       	ldi	r24, 0x1F	; 31
     cf0:	9e e4       	ldi	r25, 0x4E	; 78
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <main+0x1e4>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <main+0x1ea>
     cf8:	00 00       	nop
			_delay_ms(5);
			//getIDMov();			// Obtener el código del movimiento deseado, leer señales de control
			
			///////////////// Sección en prueba //////////////////////////////////////
			
			lectura[0] = getIDMov();
     cfa:	0e 94 c3 03 	call	0x786	; 0x786 <getIDMov>
     cfe:	88 83       	st	Y, r24
			lectura[1] = getIDMov();
     d00:	0e 94 c3 03 	call	0x786	; 0x786 <getIDMov>
     d04:	89 83       	std	Y+1, r24	; 0x01
			lectura[2] = getIDMov();
     d06:	0e 94 c3 03 	call	0x786	; 0x786 <getIDMov>
     d0a:	8a 83       	std	Y+2, r24	; 0x02
			
			if((lectura[0] == lectura[1]) && (lectura[0] == lectura[2]))
     d0c:	98 81       	ld	r25, Y
     d0e:	29 81       	ldd	r18, Y+1	; 0x01
     d10:	92 13       	cpse	r25, r18
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <main+0x216>
     d14:	89 13       	cpse	r24, r25
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <main+0x210>
			{
				moda = lectura[0];
     d18:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <__data_end>
     d1c:	0e c0       	rjmp	.+28     	; 0xd3a <main+0x22c>
			}
			else if((lectura[0] == lectura[1]) && (lectura[0] != lectura[2]))
			{
				moda = lectura[0];
     d1e:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <__data_end>
     d22:	0b c0       	rjmp	.+22     	; 0xd3a <main+0x22c>
			}
			else if((lectura[0] != lectura[1]) && (lectura[0] == lectura[2]))
     d24:	89 13       	cpse	r24, r25
     d26:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <main+0x149c>
			{
				moda = lectura[0];
     d2a:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <__data_end>
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <main+0x22c>
			}
			else if((lectura[1] == lectura[2]) && (lectura[0] != lectura[1]))
			{
				moda = lectura[1];
     d30:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <__data_end>
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <main+0x22c>
			}
			else
			{
				moda = lectura[1];
     d36:	20 93 0e 04 	sts	0x040E, r18	; 0x80040e <__data_end>
			}
			
			id_mov = moda;
     d3a:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <__data_end>
     d3e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <id_mov>
			
			///////////////// Fin de sección de prueba ///////////////////////////////
			
			
			if(id_mov == id_mov_ant)
     d42:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <id_mov_ant>
     d46:	89 13       	cpse	r24, r25
     d48:	0c c0       	rjmp	.+24     	; 0xd62 <main+0x254>
			{
				// No hacer nada y salir del if principal para volver a leer señales de control
				PORTC |= (1 << raspB_pin);	// Para asegurarse que el pin C5 esté en alto
     d4a:	28 b1       	in	r18, 0x08	; 8
     d4c:	c8 01       	movw	r24, r16
     d4e:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <raspB_pin>
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <main+0x24a>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <main+0x246>
     d5c:	82 2b       	or	r24, r18
     d5e:	88 b9       	out	0x08, r24	; 8
     d60:	f2 c7       	rjmp	.+4068   	; 0x1d46 <main+0x1238>
			}
			else if (((id_mov_ant == 1 || id_mov_ant == 3 || id_mov_ant == 4) && (id_mov != 0)) || ((id_mov == 1 || id_mov == 3 || id_mov == 4) && (id_mov_ant != 0)) )
     d62:	91 30       	cpi	r25, 0x01	; 1
     d64:	21 f0       	breq	.+8      	; 0xd6e <main+0x260>
     d66:	2d ef       	ldi	r18, 0xFD	; 253
     d68:	29 0f       	add	r18, r25
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <main+0x266>
     d6e:	81 11       	cpse	r24, r1
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <main+0x274>
     d72:	13 c0       	rjmp	.+38     	; 0xd9a <main+0x28c>
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	19 f0       	breq	.+6      	; 0xd7e <main+0x270>
     d78:	83 50       	subi	r24, 0x03	; 3
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	70 f4       	brcc	.+28     	; 0xd9a <main+0x28c>
     d7e:	99 23       	and	r25, r25
     d80:	61 f0       	breq	.+24     	; 0xd9a <main+0x28c>
			{
				// Si la posición anterior es de agarre, no hacer nada y salir del if principal
				// para esperar a que el usuario indique posición de descanso para liberar objeto.
				// Ó si la posición actual es agarre pero la posición anterior no es descanso,
				// salir del if principal para esperar a que el usuario indicque descanso y luego agarre.
				PORTC |= (1 << raspB_pin);	// Para asegurarse que el pin C5 esté en alto
     d82:	28 b1       	in	r18, 0x08	; 8
     d84:	c8 01       	movw	r24, r16
     d86:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <raspB_pin>
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <main+0x282>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <main+0x27e>
     d94:	82 2b       	or	r24, r18
     d96:	88 b9       	out	0x08, r24	; 8
     d98:	d6 c7       	rjmp	.+4012   	; 0x1d46 <main+0x1238>
			}
			else
			{
				printf("In m \n");
     d9a:	86 ec       	ldi	r24, 0xC6	; 198
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     da2:	8f e1       	ldi	r24, 0x1F	; 31
     da4:	9e e4       	ldi	r25, 0x4E	; 78
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <main+0x298>
     daa:	00 c0       	rjmp	.+0      	; 0xdac <main+0x29e>
     dac:	00 00       	nop
				_delay_ms(5);
				id_mov_ant = id_mov;
     dae:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <id_mov>
     db2:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <id_mov_ant>
				
				PORTC &= ~(1 << raspB_pin);	// Poner C5 en bajo, indica a raspberry que el movimiento ha sido leído
     db6:	98 b1       	in	r25, 0x08	; 8
     db8:	98 01       	movw	r18, r16
     dba:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <raspB_pin>
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <main+0x2b6>
     dc0:	22 0f       	add	r18, r18
     dc2:	33 1f       	adc	r19, r19
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <main+0x2b2>
     dc8:	82 2f       	mov	r24, r18
     dca:	80 95       	com	r24
     dcc:	89 23       	and	r24, r25
     dce:	88 b9       	out	0x08, r24	; 8
				
				ActivarPWM_Ind(0,0);
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
				ActivarPWM_Med(0,0);
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
				ActivarPWM_Anu(0,0);
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
				
				getPulsosMov();		// Obtener el número de pulsos para alcanzar la posición
     de8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <getPulsosMov>
				while (count_event != 3)
				{
					if ( ((PINC & (1 << pin_pul_listo)) != 0) && ((PINC & (1 << pin_ima_listo)) != 0) )
					{
						PORTC &= ~(1<<pin_ima_listo);       // Poner pin en bajo
						count_event = 3;
     dec:	73 e0       	ldi	r23, 0x03	; 3
				ActivarPWM_Med(0,0);
				ActivarPWM_Anu(0,0);
				
				getPulsosMov();		// Obtener el número de pulsos para alcanzar la posición
				
				while (count_event != 3)
     dee:	12 c0       	rjmp	.+36     	; 0xe14 <main+0x306>
				{
					if ( ((PINC & (1 << pin_pul_listo)) != 0) && ((PINC & (1 << pin_ima_listo)) != 0) )
     df0:	86 b1       	in	r24, 0x06	; 6
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	82 23       	and	r24, r18
     df6:	93 23       	and	r25, r19
     df8:	89 2b       	or	r24, r25
     dfa:	f1 f0       	breq	.+60     	; 0xe38 <main+0x32a>
     dfc:	86 b1       	in	r24, 0x06	; 6
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	84 23       	and	r24, r20
     e02:	95 23       	and	r25, r21
     e04:	89 2b       	or	r24, r25
     e06:	c1 f0       	breq	.+48     	; 0xe38 <main+0x32a>
					{
						PORTC &= ~(1<<pin_ima_listo);       // Poner pin en bajo
     e08:	88 b1       	in	r24, 0x08	; 8
     e0a:	40 95       	com	r20
     e0c:	84 23       	and	r24, r20
     e0e:	88 b9       	out	0x08, r24	; 8
						count_event = 3;
     e10:	70 93 4a 04 	sts	0x044A, r23	; 0x80044a <count_event>
				ActivarPWM_Med(0,0);
				ActivarPWM_Anu(0,0);
				
				getPulsosMov();		// Obtener el número de pulsos para alcanzar la posición
				
				while (count_event != 3)
     e14:	60 91 4a 04 	lds	r22, 0x044A	; 0x80044a <count_event>
     e18:	98 01       	movw	r18, r16
     e1a:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <pin_pul_listo>
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <main+0x316>
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <main+0x312>
     e28:	a8 01       	movw	r20, r16
     e2a:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <pin_ima_listo>
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <main+0x326>
     e30:	44 0f       	add	r20, r20
     e32:	55 1f       	adc	r21, r21
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <main+0x322>
     e38:	63 30       	cpi	r22, 0x03	; 3
     e3a:	d1 f6       	brne	.-76     	; 0xdf0 <main+0x2e2>
						PORTC &= ~(1<<pin_ima_listo);       // Poner pin en bajo
						count_event = 3;
					}
				}
				
				printf("If \n");
     e3c:	8c ec       	ldi	r24, 0xCC	; 204
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     e44:	8f e1       	ldi	r24, 0x1F	; 31
     e46:	9e e4       	ldi	r25, 0x4E	; 78
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <main+0x33a>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <main+0x340>
     e4e:	00 00       	nop
				_delay_ms(5);
				/////////////////////////////////////////////////////////////////////////////////////////
				if (id_mov == 0)			// Rutina para movimiento de descanso
     e50:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <id_mov>
     e54:	81 11       	cpse	r24, r1
     e56:	d3 c0       	rjmp	.+422    	; 0xffe <main+0x4f0>
				{
					printf("Mov 0 \n");
     e58:	80 ed       	ldi	r24, 0xD0	; 208
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     e60:	8f e1       	ldi	r24, 0x1F	; 31
     e62:	9e e4       	ldi	r25, 0x4E	; 78
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <main+0x356>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <main+0x35c>
     e6a:	00 00       	nop
					_delay_ms(5);
					if (pulsos_ind != 0)
     e6c:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pulsos_ind>
     e70:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pulsos_ind+0x1>
     e74:	89 2b       	or	r24, r25
     e76:	e1 f1       	breq	.+120    	; 0xef0 <main+0x3e2>
					{
						ActivarPWM_Ind(pwm_ind, onoff_ind);
     e78:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
     e7c:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
     e80:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
						while(ind_ready != 1)
     e84:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	69 f0       	breq	.+26     	; 0xea6 <main+0x398>
     e8c:	9f ef       	ldi	r25, 0xFF	; 255
     e8e:	29 ef       	ldi	r18, 0xF9	; 249
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	91 50       	subi	r25, 0x01	; 1
     e94:	20 40       	sbci	r18, 0x00	; 0
     e96:	80 40       	sbci	r24, 0x00	; 0
     e98:	e1 f7       	brne	.-8      	; 0xe92 <main+0x384>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <main+0x38e>
     e9c:	00 00       	nop
     e9e:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	99 f7       	brne	.-26     	; 0xe8c <main+0x37e>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_indice = abs_indice + (signo_ind * rel_indice);
     ea6:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <signo_ind>
     eaa:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <signo_ind+0x1>
     eae:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <rel_indice>
     eb2:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <rel_indice+0x1>
     eb6:	48 9f       	mul	r20, r24
     eb8:	90 01       	movw	r18, r0
     eba:	49 9f       	mul	r20, r25
     ebc:	30 0d       	add	r19, r0
     ebe:	58 9f       	mul	r21, r24
     ec0:	30 0d       	add	r19, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <abs_indice>
     ec8:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <abs_indice+0x1>
     ecc:	82 0f       	add	r24, r18
     ece:	93 1f       	adc	r25, r19
     ed0:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <abs_indice+0x1>
     ed4:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <abs_indice>
						printf("Ind en pos: %d \n", abs_indice);
     ed8:	9f 93       	push	r25
     eda:	8f 93       	push	r24
     edc:	87 ed       	ldi	r24, 0xD7	; 215
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
					}
					
					if (pulsos_med != 0)
     ef0:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pulsos_med>
     ef4:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pulsos_med+0x1>
     ef8:	89 2b       	or	r24, r25
     efa:	e1 f1       	breq	.+120    	; 0xf74 <main+0x466>
					{
						ActivarPWM_Med(pwm_med, onoff_med);
     efc:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
     f00:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
     f04:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						while(med_ready != 1)
     f08:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <med_ready>
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	69 f0       	breq	.+26     	; 0xf2a <main+0x41c>
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	29 ef       	ldi	r18, 0xF9	; 249
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	20 40       	sbci	r18, 0x00	; 0
     f1a:	80 40       	sbci	r24, 0x00	; 0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <main+0x408>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <main+0x412>
     f20:	00 00       	nop
     f22:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <med_ready>
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	99 f7       	brne	.-26     	; 0xf10 <main+0x402>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_medio = abs_medio + (signo_med * rel_medio);
     f2a:	40 91 21 04 	lds	r20, 0x0421	; 0x800421 <signo_med>
     f2e:	50 91 22 04 	lds	r21, 0x0422	; 0x800422 <signo_med+0x1>
     f32:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <rel_medio>
     f36:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <rel_medio+0x1>
     f3a:	48 9f       	mul	r20, r24
     f3c:	90 01       	movw	r18, r0
     f3e:	49 9f       	mul	r20, r25
     f40:	30 0d       	add	r19, r0
     f42:	58 9f       	mul	r21, r24
     f44:	30 0d       	add	r19, r0
     f46:	11 24       	eor	r1, r1
     f48:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <abs_medio>
     f4c:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <abs_medio+0x1>
     f50:	82 0f       	add	r24, r18
     f52:	93 1f       	adc	r25, r19
     f54:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <abs_medio+0x1>
     f58:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <abs_medio>
						printf("Med en pos: %d \n", abs_medio);
     f5c:	9f 93       	push	r25
     f5e:	8f 93       	push	r24
     f60:	88 ee       	ldi	r24, 0xE8	; 232
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	9f 93       	push	r25
     f66:	8f 93       	push	r24
     f68:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
					}
					
					if (pulsos_anu != 0)
     f74:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pulsos_anu>
     f78:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <pulsos_anu+0x1>
     f7c:	89 2b       	or	r24, r25
     f7e:	d1 f1       	breq	.+116    	; 0xff4 <main+0x4e6>
					{
						ActivarPWM_Anu(pwm_anu, onoff_anu);
     f80:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
     f84:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
     f88:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						while(anu_ready != 1)
     f8c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <anu_ready>
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	69 f0       	breq	.+26     	; 0xfae <main+0x4a0>
     f94:	9f ef       	ldi	r25, 0xFF	; 255
     f96:	29 ef       	ldi	r18, 0xF9	; 249
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	91 50       	subi	r25, 0x01	; 1
     f9c:	20 40       	sbci	r18, 0x00	; 0
     f9e:	80 40       	sbci	r24, 0x00	; 0
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <main+0x48c>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <main+0x496>
     fa4:	00 00       	nop
     fa6:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <anu_ready>
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	99 f7       	brne	.-26     	; 0xf94 <main+0x486>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_anular = abs_anular + (signo_anu * rel_anular);
     fae:	40 91 1f 04 	lds	r20, 0x041F	; 0x80041f <signo_anu>
     fb2:	50 91 20 04 	lds	r21, 0x0420	; 0x800420 <signo_anu+0x1>
     fb6:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <rel_anular>
     fba:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <rel_anular+0x1>
     fbe:	48 9f       	mul	r20, r24
     fc0:	90 01       	movw	r18, r0
     fc2:	49 9f       	mul	r20, r25
     fc4:	30 0d       	add	r19, r0
     fc6:	58 9f       	mul	r21, r24
     fc8:	30 0d       	add	r19, r0
     fca:	11 24       	eor	r1, r1
     fcc:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <abs_anular>
     fd0:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <abs_anular+0x1>
     fd4:	82 0f       	add	r24, r18
     fd6:	93 1f       	adc	r25, r19
     fd8:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <abs_anular+0x1>
     fdc:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <abs_anular>
						printf("Anu en pos: %d \n", abs_anular);
     fe0:	9f 93       	push	r25
     fe2:	8f 93       	push	r24
     fe4:	3f 92       	push	r3
     fe6:	2f 92       	push	r2
     fe8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
					}
					
					printf("IMA listo \n");
     ff4:	8d e5       	ldi	r24, 0x5D	; 93
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
     ffc:	f4 c5       	rjmp	.+3048   	; 0x1be6 <main+0x10d8>
					//PORTC |= (1<<pin_ima_listo);	// Avisar a Micro PLM que Micro IMA está en posición deseada
					//ima_listo = 1;					// Bandera: Indica que Micro IMA está en posición deseada
				}
				////////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 1)			// Rutina para agarre cilíndrico (de fuerza) ///////////////
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	09 f0       	breq	.+2      	; 0x1004 <main+0x4f6>
    1002:	f9 c0       	rjmp	.+498    	; 0x11f6 <main+0x6e8>
				{
					if (pulsos_ind != 0)				// Si la posición actual es distinta de la deseada
    1004:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pulsos_ind>
    1008:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pulsos_ind+0x1>
    100c:	89 2b       	or	r24, r25
    100e:	09 f4       	brne	.+2      	; 0x1012 <main+0x504>
    1010:	4b c0       	rjmp	.+150    	; 0x10a8 <main+0x59a>
					{
						ActivarPWM_Ind(pwm_ind, onoff_ind);
    1012:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
    1016:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
    101a:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
						while(ind_ready != 1)		// Mientras no alcance la posición guardada (límite)
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <main+0x548>
						{
							if ((ADC_GetData(FSRpin_ind)) > 100)  // Evaluar FSR, si FSR en contacto con objeto:
    1020:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <FSRpin_ind>
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    102a:	85 36       	cpi	r24, 0x65	; 101
    102c:	91 05       	cpc	r25, r1
    102e:	9c f0       	brlt	.+38     	; 0x1056 <main+0x548>
							{									  // apagar motor e indicar que está en posición
								ActivarPWM_Ind(0,0);
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
								count_enc_ind = 0;
    1038:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <count_enc_ind+0x1>
    103c:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <count_enc_ind>
								onoff_ind = 0;
    1040:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <onoff_ind>
								pwm_ind = 0;
    1044:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <pwm_ind>
								ind_ready = 1;
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <ind_ready>
								printf("Ind come \n");
    104e:	8a e0       	ldi	r24, 0x0A	; 10
    1050:	93 e0       	ldi	r25, 0x03	; 3
    1052:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				else if (id_mov == 1)			// Rutina para agarre cilíndrico (de fuerza) ///////////////
				{
					if (pulsos_ind != 0)				// Si la posición actual es distinta de la deseada
					{
						ActivarPWM_Ind(pwm_ind, onoff_ind);
						while(ind_ready != 1)		// Mientras no alcance la posición guardada (límite)
    1056:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	09 f7       	brne	.-62     	; 0x1020 <main+0x512>
								ind_ready = 1;
								printf("Ind come \n");
							}
						}
						
						abs_indice = abs_indice + (signo_ind * rel_indice);
    105e:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <signo_ind>
    1062:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <signo_ind+0x1>
    1066:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <rel_indice>
    106a:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <rel_indice+0x1>
    106e:	48 9f       	mul	r20, r24
    1070:	90 01       	movw	r18, r0
    1072:	49 9f       	mul	r20, r25
    1074:	30 0d       	add	r19, r0
    1076:	58 9f       	mul	r21, r24
    1078:	30 0d       	add	r19, r0
    107a:	11 24       	eor	r1, r1
    107c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <abs_indice>
    1080:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <abs_indice+0x1>
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <abs_indice+0x1>
    108c:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <abs_indice>
						printf("Ind en pos: %d \n", abs_indice);
    1090:	9f 93       	push	r25
    1092:	8f 93       	push	r24
    1094:	87 ed       	ldi	r24, 0xD7	; 215
    1096:	92 e0       	ldi	r25, 0x02	; 2
    1098:	9f 93       	push	r25
    109a:	8f 93       	push	r24
    109c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
					}
					
					if (pulsos_med != 0)
    10a8:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pulsos_med>
    10ac:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pulsos_med+0x1>
    10b0:	89 2b       	or	r24, r25
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <main+0x5a8>
    10b4:	4b c0       	rjmp	.+150    	; 0x114c <main+0x63e>
					{
						ActivarPWM_Med(pwm_med, onoff_med);
    10b6:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
    10ba:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
    10be:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						while(med_ready != 1)		// Mientras no alcance la posición guardada (límite)
    10c2:	1b c0       	rjmp	.+54     	; 0x10fa <main+0x5ec>
						{
							if ((ADC_GetData(FSRpin_med)) > 100)  // Evaluar FSR, si FSR en contacto con objeto:
    10c4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    10ce:	85 36       	cpi	r24, 0x65	; 101
    10d0:	91 05       	cpc	r25, r1
    10d2:	9c f0       	brlt	.+38     	; 0x10fa <main+0x5ec>
							{									  // apagar motor e indicar que está en posición
								ActivarPWM_Med(0,0);
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
								count_enc_med = 0;
    10dc:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <count_enc_med+0x1>
    10e0:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <count_enc_med>
								onoff_med = 0;
    10e4:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <onoff_med>
								pwm_med = 0;
    10e8:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <pwm_med>
								med_ready = 1;
    10ec:	21 e0       	ldi	r18, 0x01	; 1
    10ee:	20 93 38 04 	sts	0x0438, r18	; 0x800438 <med_ready>
								printf("Med come \n");
    10f2:	84 e1       	ldi	r24, 0x14	; 20
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
					}
					
					if (pulsos_med != 0)
					{
						ActivarPWM_Med(pwm_med, onoff_med);
						while(med_ready != 1)		// Mientras no alcance la posición guardada (límite)
    10fa:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <med_ready>
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f7       	brne	.-62     	; 0x10c4 <main+0x5b6>
								med_ready = 1;
								printf("Med come \n");
							}
						}
						
						abs_medio = abs_medio + (signo_med * rel_medio);
    1102:	40 91 21 04 	lds	r20, 0x0421	; 0x800421 <signo_med>
    1106:	50 91 22 04 	lds	r21, 0x0422	; 0x800422 <signo_med+0x1>
    110a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <rel_medio>
    110e:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <rel_medio+0x1>
    1112:	48 9f       	mul	r20, r24
    1114:	90 01       	movw	r18, r0
    1116:	49 9f       	mul	r20, r25
    1118:	30 0d       	add	r19, r0
    111a:	58 9f       	mul	r21, r24
    111c:	30 0d       	add	r19, r0
    111e:	11 24       	eor	r1, r1
    1120:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <abs_medio>
    1124:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <abs_medio+0x1>
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <abs_medio+0x1>
    1130:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <abs_medio>
						printf("Med en pos: %d \n", abs_medio);
    1134:	9f 93       	push	r25
    1136:	8f 93       	push	r24
    1138:	88 ee       	ldi	r24, 0xE8	; 232
    113a:	92 e0       	ldi	r25, 0x02	; 2
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
					}
					
					if (pulsos_anu != 0)
    114c:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pulsos_anu>
    1150:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <pulsos_anu+0x1>
    1154:	89 2b       	or	r24, r25
    1156:	09 f4       	brne	.+2      	; 0x115a <main+0x64c>
    1158:	49 c0       	rjmp	.+146    	; 0x11ec <main+0x6de>
					{
						ActivarPWM_Anu(pwm_anu, onoff_anu);
    115a:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
    115e:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
    1162:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						while(anu_ready != 1)		// Mientras no alcance la posición guardada (límite)
    1166:	1b c0       	rjmp	.+54     	; 0x119e <main+0x690>
						{
							if ((ADC_GetData(FSRpin_anu)) > 100)  // Evaluar FSR, si FSR en contacto con objeto:
    1168:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1172:	85 36       	cpi	r24, 0x65	; 101
    1174:	91 05       	cpc	r25, r1
    1176:	9c f0       	brlt	.+38     	; 0x119e <main+0x690>
							{									  // apagar motor e indicar que está en posición
								ActivarPWM_Anu(0,0);
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
								count_enc_anu = 0;
    1180:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <count_enc_anu+0x1>
    1184:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <count_enc_anu>
								onoff_anu = 0;
    1188:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <onoff_anu>
								pwm_anu = 0;
    118c:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <pwm_anu>
								anu_ready = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <anu_ready>
								printf("Anu come \n");
    1196:	8e e1       	ldi	r24, 0x1E	; 30
    1198:	93 e0       	ldi	r25, 0x03	; 3
    119a:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
					}
					
					if (pulsos_anu != 0)
					{
						ActivarPWM_Anu(pwm_anu, onoff_anu);
						while(anu_ready != 1)		// Mientras no alcance la posición guardada (límite)
    119e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <anu_ready>
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	09 f7       	brne	.-62     	; 0x1168 <main+0x65a>
								anu_ready = 1;
								printf("Anu come \n");
							}
						}
						
						abs_anular = abs_anular + (signo_anu * rel_anular);
    11a6:	40 91 1f 04 	lds	r20, 0x041F	; 0x80041f <signo_anu>
    11aa:	50 91 20 04 	lds	r21, 0x0420	; 0x800420 <signo_anu+0x1>
    11ae:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <rel_anular>
    11b2:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <rel_anular+0x1>
    11b6:	48 9f       	mul	r20, r24
    11b8:	90 01       	movw	r18, r0
    11ba:	49 9f       	mul	r20, r25
    11bc:	30 0d       	add	r19, r0
    11be:	58 9f       	mul	r21, r24
    11c0:	30 0d       	add	r19, r0
    11c2:	11 24       	eor	r1, r1
    11c4:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <abs_anular>
    11c8:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <abs_anular+0x1>
    11cc:	82 0f       	add	r24, r18
    11ce:	93 1f       	adc	r25, r19
    11d0:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <abs_anular+0x1>
    11d4:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <abs_anular>
						printf("Anu en pos: %d \n", abs_anular);
    11d8:	9f 93       	push	r25
    11da:	8f 93       	push	r24
    11dc:	3f 92       	push	r3
    11de:	2f 92       	push	r2
    11e0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
					}
					
					printf("IMA listo \n");
    11ec:	8d e5       	ldi	r24, 0x5D	; 93
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
    11f4:	f8 c4       	rjmp	.+2544   	; 0x1be6 <main+0x10d8>
					//PORTC |= (1<<pin_ima_listo);	// Avisar a Micro PLM que Micro IMA está en posición deseada
					//ima_listo = 1;					// Bandera: Indica que Micro IMA está en posición deseada
				}
				
				////////////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 2)			// Rutina para puño/agarre lateral ///////////////
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	09 f0       	breq	.+2      	; 0x11fc <main+0x6ee>
    11fa:	b7 c0       	rjmp	.+366    	; 0x136a <main+0x85c>
				{
					if (pulsos_ind != 0)				// Si la posición actual es distinta de la deseada
    11fc:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pulsos_ind>
    1200:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pulsos_ind+0x1>
    1204:	89 2b       	or	r24, r25
    1206:	b1 f1       	breq	.+108    	; 0x1274 <main+0x766>
					{
						pulsos_ind = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1208:	80 ed       	ldi	r24, 0xD0	; 208
    120a:	97 e0       	ldi	r25, 0x07	; 7
    120c:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <pulsos_ind+0x1>
    1210:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <pulsos_ind>
						ActivarPWM_Ind(pwm_ind, onoff_ind);
    1214:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
    1218:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
    121c:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
						while(ADC_GetData(FSRpin_ind) < 40)		// Mientras los sensores no toquen la palma
    1220:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <FSRpin_ind>
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    122a:	88 97       	sbiw	r24, 0x28	; 40
    122c:	cc f3       	brlt	.-14     	; 0x1220 <main+0x712>
						{
						}
						ActivarPWM_Ind(0,0);
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
						count_enc_ind = 0;
    1236:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <count_enc_ind+0x1>
    123a:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <count_enc_ind>
						onoff_ind = 0;
    123e:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <onoff_ind>
						pwm_ind = 0;
    1242:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <pwm_ind>
						ind_ready = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <ind_ready>
						printf("Ind come \n");
    124c:	8a e0       	ldi	r24, 0x0A	; 10
    124e:	93 e0       	ldi	r25, 0x03	; 3
    1250:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						
						abs_indice = 0; // abs_menique + (signo_men * rel_menique);
    1254:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <abs_indice+0x1>
    1258:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <abs_indice>
						printf("Ind en pos: %d \n", abs_indice);
    125c:	1f 92       	push	r1
    125e:	1f 92       	push	r1
    1260:	87 ed       	ldi	r24, 0xD7	; 215
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	9f 93       	push	r25
    1266:	8f 93       	push	r24
    1268:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
					}
					
					if (pulsos_med != 0)		// Si la posición actual es distinta de la deseada
    1274:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pulsos_med>
    1278:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pulsos_med+0x1>
    127c:	89 2b       	or	r24, r25
    127e:	b1 f1       	breq	.+108    	; 0x12ec <main+0x7de>
					{
						pulsos_med = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1280:	80 ed       	ldi	r24, 0xD0	; 208
    1282:	97 e0       	ldi	r25, 0x07	; 7
    1284:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <pulsos_med+0x1>
    1288:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <pulsos_med>
						ActivarPWM_Med(pwm_med, onoff_med);
    128c:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
    1290:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
    1294:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						while(ADC_GetData(FSRpin_med) < 40)		// Mientras los sensores no toquen la palma
    1298:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    12a2:	88 97       	sbiw	r24, 0x28	; 40
    12a4:	cc f3       	brlt	.-14     	; 0x1298 <main+0x78a>
						{
						}
						ActivarPWM_Med(0,0);
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						count_enc_med = 0;
    12ae:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <count_enc_med+0x1>
    12b2:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <count_enc_med>
						onoff_med = 0;
    12b6:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <onoff_med>
						pwm_med = 0;
    12ba:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <pwm_med>
						med_ready = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <med_ready>
						printf("Med come \n");
    12c4:	84 e1       	ldi	r24, 0x14	; 20
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						
						abs_medio = 0; // abs_menique + (signo_men * rel_menique);
    12cc:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <abs_medio+0x1>
    12d0:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <abs_medio>
						printf("Med en pos: %d \n", abs_medio);
    12d4:	1f 92       	push	r1
    12d6:	1f 92       	push	r1
    12d8:	88 ee       	ldi	r24, 0xE8	; 232
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	9f 93       	push	r25
    12de:	8f 93       	push	r24
    12e0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
					}
					
					if (pulsos_anu != 0)		// Si la posición actual es distinta de la deseada
    12ec:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pulsos_anu>
    12f0:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <pulsos_anu+0x1>
    12f4:	89 2b       	or	r24, r25
    12f6:	a1 f1       	breq	.+104    	; 0x1360 <main+0x852>
					{
						pulsos_anu = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    12f8:	80 ed       	ldi	r24, 0xD0	; 208
    12fa:	97 e0       	ldi	r25, 0x07	; 7
    12fc:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <pulsos_anu+0x1>
    1300:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <pulsos_anu>
						ActivarPWM_Anu(pwm_anu, onoff_anu);
    1304:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
    1308:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
    130c:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						while(ADC_GetData(FSRpin_anu) < 50)		// Mientras los sensores no toquen la palma
    1310:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    131a:	c2 97       	sbiw	r24, 0x32	; 50
    131c:	cc f3       	brlt	.-14     	; 0x1310 <main+0x802>
						{
						}
						ActivarPWM_Anu(0,0);
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						count_enc_anu = 0;
    1326:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <count_enc_anu+0x1>
    132a:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <count_enc_anu>
						onoff_anu = 0;
    132e:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <onoff_anu>
						pwm_anu = 0;
    1332:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <pwm_anu>
						anu_ready = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <anu_ready>
						printf("Anu come \n");
    133c:	8e e1       	ldi	r24, 0x1E	; 30
    133e:	93 e0       	ldi	r25, 0x03	; 3
    1340:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						
						abs_anular = 0; // abs_menique + (signo_men * rel_menique);
    1344:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <abs_anular+0x1>
    1348:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <abs_anular>
						printf("Anu en pos: %d \n", abs_anular);
    134c:	1f 92       	push	r1
    134e:	1f 92       	push	r1
    1350:	3f 92       	push	r3
    1352:	2f 92       	push	r2
    1354:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
					}
					
					printf("IMA listo \n");
    1360:	8d e5       	ldi	r24, 0x5D	; 93
    1362:	92 e0       	ldi	r25, 0x02	; 2
    1364:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
    1368:	3e c4       	rjmp	.+2172   	; 0x1be6 <main+0x10d8>
					//PORTC |= (1<<pin_ima_listo);	// Avisar a Micro PLM que Micro IMA está en posición deseada
					//ima_listo = 1;					// Bandera: Indica que Micro IMA está en posición deseada
				}
				
				////////////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 3)			// Rutina para pinza ///////////////
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	09 f0       	breq	.+2      	; 0x1370 <main+0x862>
    136e:	cc c0       	rjmp	.+408    	; 0x1508 <main+0x9fa>
				{
					
					if (pulsos_ind != 0)				// Si la posición actual es distinta de la deseada
    1370:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pulsos_ind>
    1374:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pulsos_ind+0x1>
    1378:	89 2b       	or	r24, r25
    137a:	09 f4       	brne	.+2      	; 0x137e <main+0x870>
    137c:	4a c0       	rjmp	.+148    	; 0x1412 <main+0x904>
					{
						ActivarPWM_Ind(pwm_ind, onoff_ind);
    137e:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
    1382:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
    1386:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
						while(ind_ready != 1)		// Mientras no alcance la posición guardada (límite)
    138a:	1a c0       	rjmp	.+52     	; 0x13c0 <main+0x8b2>
						{
							if ((ADC_GetData(FSRpin_ind)) > 40)  // Evaluar FSR, si FSR en contacto con objeto:
    138c:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <FSRpin_ind>
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1396:	89 97       	sbiw	r24, 0x29	; 41
    1398:	9c f0       	brlt	.+38     	; 0x13c0 <main+0x8b2>
							{									  // apagar motor e indicar que está en posición
								ActivarPWM_Ind(0,0);
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
								count_enc_ind = 0;
    13a2:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <count_enc_ind+0x1>
    13a6:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <count_enc_ind>
								onoff_ind = 0;
    13aa:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <onoff_ind>
								pwm_ind = 0;
    13ae:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <pwm_ind>
								ind_ready = 1;
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <ind_ready>
								printf("Ind come \n");
    13b8:	8a e0       	ldi	r24, 0x0A	; 10
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				{
					
					if (pulsos_ind != 0)				// Si la posición actual es distinta de la deseada
					{
						ActivarPWM_Ind(pwm_ind, onoff_ind);
						while(ind_ready != 1)		// Mientras no alcance la posición guardada (límite)
    13c0:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	11 f7       	brne	.-60     	; 0x138c <main+0x87e>
								ind_ready = 1;
								printf("Ind come \n");
							}
						}
						
						abs_indice = abs_indice + (signo_ind * rel_indice);
    13c8:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <signo_ind>
    13cc:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <signo_ind+0x1>
    13d0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <rel_indice>
    13d4:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <rel_indice+0x1>
    13d8:	48 9f       	mul	r20, r24
    13da:	90 01       	movw	r18, r0
    13dc:	49 9f       	mul	r20, r25
    13de:	30 0d       	add	r19, r0
    13e0:	58 9f       	mul	r21, r24
    13e2:	30 0d       	add	r19, r0
    13e4:	11 24       	eor	r1, r1
    13e6:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <abs_indice>
    13ea:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <abs_indice+0x1>
    13ee:	82 0f       	add	r24, r18
    13f0:	93 1f       	adc	r25, r19
    13f2:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <abs_indice+0x1>
    13f6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <abs_indice>
						printf("Ind en pos: %d \n", abs_indice);
    13fa:	9f 93       	push	r25
    13fc:	8f 93       	push	r24
    13fe:	87 ed       	ldi	r24, 0xD7	; 215
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	9f 93       	push	r25
    1404:	8f 93       	push	r24
    1406:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
					}
					
					if (pulsos_med != 0)		// Si la posición actual es distinta de la deseada
    1412:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pulsos_med>
    1416:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pulsos_med+0x1>
    141a:	89 2b       	or	r24, r25
    141c:	b1 f1       	breq	.+108    	; 0x148a <main+0x97c>
					{
						pulsos_med = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    141e:	80 ed       	ldi	r24, 0xD0	; 208
    1420:	97 e0       	ldi	r25, 0x07	; 7
    1422:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <pulsos_med+0x1>
    1426:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <pulsos_med>
						ActivarPWM_Med(pwm_med, onoff_med);
    142a:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
    142e:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
    1432:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						while(ADC_GetData(FSRpin_med) < 40)		// Mientras los sensores no toquen la palma
    1436:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1440:	88 97       	sbiw	r24, 0x28	; 40
    1442:	cc f3       	brlt	.-14     	; 0x1436 <main+0x928>
						{
						}
						ActivarPWM_Med(0,0);
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						count_enc_med = 0;
    144c:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <count_enc_med+0x1>
    1450:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <count_enc_med>
						onoff_med = 0;
    1454:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <onoff_med>
						pwm_med = 0;
    1458:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <pwm_med>
						med_ready = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <med_ready>
						printf("Med come \n");
    1462:	84 e1       	ldi	r24, 0x14	; 20
    1464:	93 e0       	ldi	r25, 0x03	; 3
    1466:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						
						abs_medio = 0; // abs_menique + (signo_men * rel_menique);
    146a:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <abs_medio+0x1>
    146e:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <abs_medio>
						printf("Med en pos: %d \n", abs_medio);
    1472:	1f 92       	push	r1
    1474:	1f 92       	push	r1
    1476:	88 ee       	ldi	r24, 0xE8	; 232
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	9f 93       	push	r25
    147c:	8f 93       	push	r24
    147e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
					}
					
					if (pulsos_anu != 0)		// Si la posición actual es distinta de la deseada
    148a:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pulsos_anu>
    148e:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <pulsos_anu+0x1>
    1492:	89 2b       	or	r24, r25
    1494:	a1 f1       	breq	.+104    	; 0x14fe <main+0x9f0>
					{
						pulsos_anu = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1496:	80 ed       	ldi	r24, 0xD0	; 208
    1498:	97 e0       	ldi	r25, 0x07	; 7
    149a:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <pulsos_anu+0x1>
    149e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <pulsos_anu>
						ActivarPWM_Anu(pwm_anu, onoff_anu);
    14a2:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
    14a6:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
    14aa:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						while(ADC_GetData(FSRpin_anu) < 50)		// Mientras los sensores no toquen la palma
    14ae:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    14b8:	c2 97       	sbiw	r24, 0x32	; 50
    14ba:	cc f3       	brlt	.-14     	; 0x14ae <main+0x9a0>
						{
						}
						ActivarPWM_Anu(0,0);
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						count_enc_anu = 0;
    14c4:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <count_enc_anu+0x1>
    14c8:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <count_enc_anu>
						onoff_anu = 0;
    14cc:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <onoff_anu>
						pwm_anu = 0;
    14d0:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <pwm_anu>
						anu_ready = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <anu_ready>
						printf("Anu come \n");
    14da:	8e e1       	ldi	r24, 0x1E	; 30
    14dc:	93 e0       	ldi	r25, 0x03	; 3
    14de:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						
						abs_anular = 0; // abs_menique + (signo_men * rel_menique);
    14e2:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <abs_anular+0x1>
    14e6:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <abs_anular>
						printf("Anu en pos: %d \n", abs_anular);
    14ea:	1f 92       	push	r1
    14ec:	1f 92       	push	r1
    14ee:	3f 92       	push	r3
    14f0:	2f 92       	push	r2
    14f2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
					}
					
					printf("IMA listo \n");
    14fe:	8d e5       	ldi	r24, 0x5D	; 93
    1500:	92 e0       	ldi	r25, 0x02	; 2
    1502:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
    1506:	6f c3       	rjmp	.+1758   	; 0x1be6 <main+0x10d8>
					//ima_listo = 1;					// Bandera: Indica que Micro IMA está en posición deseada
					
				}
				
				////////////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 4)			// Rutina para like ///////////////
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	09 f0       	breq	.+2      	; 0x150e <main+0xa00>
    150c:	f6 c0       	rjmp	.+492    	; 0x16fa <main+0xbec>
				{
					if (pulsos_ind != 0)				// Si la posición actual es distinta de la deseada
    150e:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pulsos_ind>
    1512:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pulsos_ind+0x1>
    1516:	89 2b       	or	r24, r25
    1518:	09 f4       	brne	.+2      	; 0x151c <main+0xa0e>
    151a:	4a c0       	rjmp	.+148    	; 0x15b0 <main+0xaa2>
					{
						//pulsos_ind = 1000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
						ActivarPWM_Ind(pwm_ind, onoff_ind);
    151c:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
    1520:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
    1524:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
						while(ind_ready != 1)		// Mientras no esté en posición límite
    1528:	1a c0       	rjmp	.+52     	; 0x155e <main+0xa50>
						{
							if (ADC_GetData(FSRpin_ind) > 40)
    152a:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <FSRpin_ind>
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1534:	89 97       	sbiw	r24, 0x29	; 41
    1536:	9c f0       	brlt	.+38     	; 0x155e <main+0xa50>
							{
								ActivarPWM_Ind(0,0);
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
								count_enc_ind = 0;
    1540:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <count_enc_ind+0x1>
    1544:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <count_enc_ind>
								onoff_ind = 0;
    1548:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <onoff_ind>
								pwm_ind = 0;
    154c:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <pwm_ind>
								ind_ready = 1;
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <ind_ready>
								printf("Ind come \n");
    1556:	8a e0       	ldi	r24, 0x0A	; 10
    1558:	93 e0       	ldi	r25, 0x03	; 3
    155a:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				{
					if (pulsos_ind != 0)				// Si la posición actual es distinta de la deseada
					{
						//pulsos_ind = 1000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
						ActivarPWM_Ind(pwm_ind, onoff_ind);
						while(ind_ready != 1)		// Mientras no esté en posición límite
    155e:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	11 f7       	brne	.-60     	; 0x152a <main+0xa1c>
								ind_ready = 1;
								printf("Ind come \n");
							}
						}
						
						abs_indice = abs_indice + (signo_ind * rel_indice);
    1566:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <signo_ind>
    156a:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <signo_ind+0x1>
    156e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <rel_indice>
    1572:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <rel_indice+0x1>
    1576:	48 9f       	mul	r20, r24
    1578:	90 01       	movw	r18, r0
    157a:	49 9f       	mul	r20, r25
    157c:	30 0d       	add	r19, r0
    157e:	58 9f       	mul	r21, r24
    1580:	30 0d       	add	r19, r0
    1582:	11 24       	eor	r1, r1
    1584:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <abs_indice>
    1588:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <abs_indice+0x1>
    158c:	82 0f       	add	r24, r18
    158e:	93 1f       	adc	r25, r19
    1590:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <abs_indice+0x1>
    1594:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <abs_indice>
						printf("Ind en pos: %d \n", abs_indice);
    1598:	9f 93       	push	r25
    159a:	8f 93       	push	r24
    159c:	87 ed       	ldi	r24, 0xD7	; 215
    159e:	92 e0       	ldi	r25, 0x02	; 2
    15a0:	9f 93       	push	r25
    15a2:	8f 93       	push	r24
    15a4:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
					}
					
					if (pulsos_med != 0)		// Si la posición actual es distinta de la deseada
    15b0:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pulsos_med>
    15b4:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pulsos_med+0x1>
    15b8:	89 2b       	or	r24, r25
    15ba:	09 f4       	brne	.+2      	; 0x15be <main+0xab0>
    15bc:	4a c0       	rjmp	.+148    	; 0x1652 <main+0xb44>
					{
						//pulsos_med = 1000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
						ActivarPWM_Med(pwm_med, onoff_med);
    15be:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
    15c2:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
    15c6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						while(med_ready != 1)		// Mientras no esté en posición límite
    15ca:	1a c0       	rjmp	.+52     	; 0x1600 <main+0xaf2>
						{
							if (ADC_GetData(FSRpin_med) > 40)
    15cc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    15d6:	89 97       	sbiw	r24, 0x29	; 41
    15d8:	9c f0       	brlt	.+38     	; 0x1600 <main+0xaf2>
							{
								ActivarPWM_Med(0,0);
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
								count_enc_med = 0;
    15e2:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <count_enc_med+0x1>
    15e6:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <count_enc_med>
								onoff_med = 0;
    15ea:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <onoff_med>
								pwm_med = 0;
    15ee:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <pwm_med>
								med_ready = 1;
    15f2:	21 e0       	ldi	r18, 0x01	; 1
    15f4:	20 93 38 04 	sts	0x0438, r18	; 0x800438 <med_ready>
								printf("Med come \n");
    15f8:	84 e1       	ldi	r24, 0x14	; 20
    15fa:	93 e0       	ldi	r25, 0x03	; 3
    15fc:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
					
					if (pulsos_med != 0)		// Si la posición actual es distinta de la deseada
					{
						//pulsos_med = 1000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
						ActivarPWM_Med(pwm_med, onoff_med);
						while(med_ready != 1)		// Mientras no esté en posición límite
    1600:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <med_ready>
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	11 f7       	brne	.-60     	; 0x15cc <main+0xabe>
								med_ready = 1;
								printf("Med come \n");
							}
						}
						
						abs_medio = abs_medio + (signo_med * rel_medio);
    1608:	40 91 21 04 	lds	r20, 0x0421	; 0x800421 <signo_med>
    160c:	50 91 22 04 	lds	r21, 0x0422	; 0x800422 <signo_med+0x1>
    1610:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <rel_medio>
    1614:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <rel_medio+0x1>
    1618:	48 9f       	mul	r20, r24
    161a:	90 01       	movw	r18, r0
    161c:	49 9f       	mul	r20, r25
    161e:	30 0d       	add	r19, r0
    1620:	58 9f       	mul	r21, r24
    1622:	30 0d       	add	r19, r0
    1624:	11 24       	eor	r1, r1
    1626:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <abs_medio>
    162a:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <abs_medio+0x1>
    162e:	82 0f       	add	r24, r18
    1630:	93 1f       	adc	r25, r19
    1632:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <abs_medio+0x1>
    1636:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <abs_medio>
						printf("Med en pos: %d \n", abs_medio);
    163a:	9f 93       	push	r25
    163c:	8f 93       	push	r24
    163e:	88 ee       	ldi	r24, 0xE8	; 232
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	9f 93       	push	r25
    1644:	8f 93       	push	r24
    1646:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
					}
					
					if (pulsos_anu != 0)		// Si la posición actual es distinta de la deseada
    1652:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pulsos_anu>
    1656:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <pulsos_anu+0x1>
    165a:	89 2b       	or	r24, r25
    165c:	09 f4       	brne	.+2      	; 0x1660 <main+0xb52>
    165e:	48 c0       	rjmp	.+144    	; 0x16f0 <main+0xbe2>
					{
						//pulsos_anu = 1000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
						ActivarPWM_Anu(pwm_anu, onoff_anu);
    1660:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
    1664:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
    1668:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						while(anu_ready != 1)		// Mientras no esté en posición límite
    166c:	1a c0       	rjmp	.+52     	; 0x16a2 <main+0xb94>
						{
							if (ADC_GetData(FSRpin_anu) > 50)
    166e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1678:	c3 97       	sbiw	r24, 0x33	; 51
    167a:	9c f0       	brlt	.+38     	; 0x16a2 <main+0xb94>
							{
								ActivarPWM_Anu(0,0);
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
								count_enc_anu = 0;
    1684:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <count_enc_anu+0x1>
    1688:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <count_enc_anu>
								onoff_anu = 0;
    168c:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <onoff_anu>
								pwm_anu = 0;
    1690:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <pwm_anu>
								anu_ready = 1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <anu_ready>
								printf("Anu come \n");
    169a:	8e e1       	ldi	r24, 0x1E	; 30
    169c:	93 e0       	ldi	r25, 0x03	; 3
    169e:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
					
					if (pulsos_anu != 0)		// Si la posición actual es distinta de la deseada
					{
						//pulsos_anu = 1000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
						ActivarPWM_Anu(pwm_anu, onoff_anu);
						while(anu_ready != 1)		// Mientras no esté en posición límite
    16a2:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <anu_ready>
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	11 f7       	brne	.-60     	; 0x166e <main+0xb60>
								anu_ready = 1;
								printf("Anu come \n");
							}
						}
						
						abs_anular = abs_anular + (signo_anu * rel_anular);
    16aa:	40 91 1f 04 	lds	r20, 0x041F	; 0x80041f <signo_anu>
    16ae:	50 91 20 04 	lds	r21, 0x0420	; 0x800420 <signo_anu+0x1>
    16b2:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <rel_anular>
    16b6:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <rel_anular+0x1>
    16ba:	48 9f       	mul	r20, r24
    16bc:	90 01       	movw	r18, r0
    16be:	49 9f       	mul	r20, r25
    16c0:	30 0d       	add	r19, r0
    16c2:	58 9f       	mul	r21, r24
    16c4:	30 0d       	add	r19, r0
    16c6:	11 24       	eor	r1, r1
    16c8:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <abs_anular>
    16cc:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <abs_anular+0x1>
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <abs_anular+0x1>
    16d8:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <abs_anular>
						printf("Anu en pos: %d \n", abs_anular);
    16dc:	9f 93       	push	r25
    16de:	8f 93       	push	r24
    16e0:	3f 92       	push	r3
    16e2:	2f 92       	push	r2
    16e4:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
					}
					
					printf("IMA listo \n");
    16f0:	8d e5       	ldi	r24, 0x5D	; 93
    16f2:	92 e0       	ldi	r25, 0x02	; 2
    16f4:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
    16f8:	76 c2       	rjmp	.+1260   	; 0x1be6 <main+0x10d8>
					//PORTC |= (1<<pin_ima_listo);	// Avisar a Micro PLM que Micro IMA está en posición deseada
					//ima_listo = 1;					// Bandera: Indica que Micro IMA está en posición deseada
				}
				
				/////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 5)			// Rutina para movimiento de cuernos
    16fa:	85 30       	cpi	r24, 0x05	; 5
    16fc:	09 f0       	breq	.+2      	; 0x1700 <main+0xbf2>
    16fe:	bd c0       	rjmp	.+378    	; 0x187a <main+0xd6c>
				{
					if (pulsos_ind != 0)
    1700:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pulsos_ind>
    1704:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pulsos_ind+0x1>
    1708:	89 2b       	or	r24, r25
    170a:	e1 f1       	breq	.+120    	; 0x1784 <main+0xc76>
					{
						ActivarPWM_Ind(pwm_ind, onoff_ind);
    170c:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
    1710:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
    1714:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
						while(ind_ready != 1)
    1718:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	69 f0       	breq	.+26     	; 0x173a <main+0xc2c>
    1720:	9f ef       	ldi	r25, 0xFF	; 255
    1722:	29 ef       	ldi	r18, 0xF9	; 249
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	91 50       	subi	r25, 0x01	; 1
    1728:	20 40       	sbci	r18, 0x00	; 0
    172a:	80 40       	sbci	r24, 0x00	; 0
    172c:	e1 f7       	brne	.-8      	; 0x1726 <main+0xc18>
    172e:	00 c0       	rjmp	.+0      	; 0x1730 <main+0xc22>
    1730:	00 00       	nop
    1732:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	99 f7       	brne	.-26     	; 0x1720 <main+0xc12>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_indice = abs_indice + (signo_ind * rel_indice);
    173a:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <signo_ind>
    173e:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <signo_ind+0x1>
    1742:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <rel_indice>
    1746:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <rel_indice+0x1>
    174a:	48 9f       	mul	r20, r24
    174c:	90 01       	movw	r18, r0
    174e:	49 9f       	mul	r20, r25
    1750:	30 0d       	add	r19, r0
    1752:	58 9f       	mul	r21, r24
    1754:	30 0d       	add	r19, r0
    1756:	11 24       	eor	r1, r1
    1758:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <abs_indice>
    175c:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <abs_indice+0x1>
    1760:	82 0f       	add	r24, r18
    1762:	93 1f       	adc	r25, r19
    1764:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <abs_indice+0x1>
    1768:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <abs_indice>
						printf("Ind en pos: %d \n", abs_indice);
    176c:	9f 93       	push	r25
    176e:	8f 93       	push	r24
    1770:	87 ed       	ldi	r24, 0xD7	; 215
    1772:	92 e0       	ldi	r25, 0x02	; 2
    1774:	9f 93       	push	r25
    1776:	8f 93       	push	r24
    1778:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
					}
					
					if (pulsos_med != 0)		// Si la posición actual es distinta de la deseada
    1784:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pulsos_med>
    1788:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pulsos_med+0x1>
    178c:	89 2b       	or	r24, r25
    178e:	b1 f1       	breq	.+108    	; 0x17fc <main+0xcee>
					{
						pulsos_med = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1790:	80 ed       	ldi	r24, 0xD0	; 208
    1792:	97 e0       	ldi	r25, 0x07	; 7
    1794:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <pulsos_med+0x1>
    1798:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <pulsos_med>
						ActivarPWM_Med(pwm_med, onoff_med);
    179c:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
    17a0:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
    17a4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						while(ADC_GetData(FSRpin_med) < 40)		// Mientras los sensores no toquen la palma
    17a8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    17b2:	88 97       	sbiw	r24, 0x28	; 40
    17b4:	cc f3       	brlt	.-14     	; 0x17a8 <main+0xc9a>
						{
						}
						ActivarPWM_Med(0,0);
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						count_enc_med = 0;
    17be:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <count_enc_med+0x1>
    17c2:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <count_enc_med>
						onoff_med = 0;
    17c6:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <onoff_med>
						pwm_med = 0;
    17ca:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <pwm_med>
						med_ready = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <med_ready>
						printf("Med come \n");
    17d4:	84 e1       	ldi	r24, 0x14	; 20
    17d6:	93 e0       	ldi	r25, 0x03	; 3
    17d8:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						
						abs_medio = 0; // abs_menique + (signo_men * rel_menique);
    17dc:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <abs_medio+0x1>
    17e0:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <abs_medio>
						printf("Med en pos: %d \n", abs_medio);
    17e4:	1f 92       	push	r1
    17e6:	1f 92       	push	r1
    17e8:	88 ee       	ldi	r24, 0xE8	; 232
    17ea:	92 e0       	ldi	r25, 0x02	; 2
    17ec:	9f 93       	push	r25
    17ee:	8f 93       	push	r24
    17f0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
					}
					
					if (pulsos_anu != 0)		// Si la posición actual es distinta de la deseada
    17fc:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pulsos_anu>
    1800:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <pulsos_anu+0x1>
    1804:	89 2b       	or	r24, r25
    1806:	a1 f1       	breq	.+104    	; 0x1870 <main+0xd62>
					{
						pulsos_anu = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1808:	80 ed       	ldi	r24, 0xD0	; 208
    180a:	97 e0       	ldi	r25, 0x07	; 7
    180c:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <pulsos_anu+0x1>
    1810:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <pulsos_anu>
						ActivarPWM_Anu(pwm_anu, onoff_anu);
    1814:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
    1818:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
    181c:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						while(ADC_GetData(FSRpin_anu) < 50)		// Mientras los sensores no toquen la palma
    1820:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    182a:	c2 97       	sbiw	r24, 0x32	; 50
    182c:	cc f3       	brlt	.-14     	; 0x1820 <main+0xd12>
						{
						}
						ActivarPWM_Anu(0,0);
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						count_enc_anu = 0;
    1836:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <count_enc_anu+0x1>
    183a:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <count_enc_anu>
						onoff_anu = 0;
    183e:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <onoff_anu>
						pwm_anu = 0;
    1842:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <pwm_anu>
						anu_ready = 1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <anu_ready>
						printf("Anu come \n");
    184c:	8e e1       	ldi	r24, 0x1E	; 30
    184e:	93 e0       	ldi	r25, 0x03	; 3
    1850:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						
						abs_anular = 0; // abs_menique + (signo_men * rel_menique);
    1854:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <abs_anular+0x1>
    1858:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <abs_anular>
						printf("Anu en pos: %d \n", abs_anular);
    185c:	1f 92       	push	r1
    185e:	1f 92       	push	r1
    1860:	3f 92       	push	r3
    1862:	2f 92       	push	r2
    1864:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
					}
					
					printf("IMA listo \n");
    1870:	8d e5       	ldi	r24, 0x5D	; 93
    1872:	92 e0       	ldi	r25, 0x02	; 2
    1874:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
    1878:	b6 c1       	rjmp	.+876    	; 0x1be6 <main+0x10d8>
					//PORTC |= (1<<pin_ima_listo);	// Avisar a Micro PLM que Micro IMA está en posición deseada
					//ima_listo = 1;					// Bandera: Indica que Micro IMA está en posición deseada
				}
				
				/////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 6)			// Rutina para movimiento de esfera (palma fuera)
    187a:	86 30       	cpi	r24, 0x06	; 6
    187c:	09 f0       	breq	.+2      	; 0x1880 <main+0xd72>
    187e:	f4 c0       	rjmp	.+488    	; 0x1a68 <main+0xf5a>
				{
					printf("In 6 \n");
    1880:	88 e2       	ldi	r24, 0x28	; 40
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
    1888:	8f e1       	ldi	r24, 0x1F	; 31
    188a:	9e e4       	ldi	r25, 0x4E	; 78
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <main+0xd7e>
    1890:	00 c0       	rjmp	.+0      	; 0x1892 <main+0xd84>
    1892:	00 00       	nop
					_delay_ms(5);
					if (pulsos_ind != 0)
    1894:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pulsos_ind>
    1898:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pulsos_ind+0x1>
    189c:	89 2b       	or	r24, r25
    189e:	09 f4       	brne	.+2      	; 0x18a2 <main+0xd94>
    18a0:	46 c0       	rjmp	.+140    	; 0x192e <main+0xe20>
					{
						printf("If ind \n");
    18a2:	8e e2       	ldi	r24, 0x2E	; 46
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						ActivarPWM_Ind(pwm_ind, onoff_ind);
    18aa:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
    18ae:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
    18b2:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
						while(ind_ready != 1)
    18b6:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	69 f0       	breq	.+26     	; 0x18d8 <main+0xdca>
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	29 ef       	ldi	r18, 0xF9	; 249
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	91 50       	subi	r25, 0x01	; 1
    18c6:	20 40       	sbci	r18, 0x00	; 0
    18c8:	80 40       	sbci	r24, 0x00	; 0
    18ca:	e1 f7       	brne	.-8      	; 0x18c4 <main+0xdb6>
    18cc:	00 c0       	rjmp	.+0      	; 0x18ce <main+0xdc0>
    18ce:	00 00       	nop
    18d0:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	99 f7       	brne	.-26     	; 0x18be <main+0xdb0>
						{		// Espera indicación de motor listo para salir del loop
							//printf("I: %d \n", ind_ready);
							_delay_ms(20);
						}
						abs_indice = abs_indice + (signo_ind * rel_indice);
    18d8:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <signo_ind>
    18dc:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <signo_ind+0x1>
    18e0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <rel_indice>
    18e4:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <rel_indice+0x1>
    18e8:	48 9f       	mul	r20, r24
    18ea:	90 01       	movw	r18, r0
    18ec:	49 9f       	mul	r20, r25
    18ee:	30 0d       	add	r19, r0
    18f0:	58 9f       	mul	r21, r24
    18f2:	30 0d       	add	r19, r0
    18f4:	11 24       	eor	r1, r1
    18f6:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <abs_indice>
    18fa:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <abs_indice+0x1>
    18fe:	82 0f       	add	r24, r18
    1900:	93 1f       	adc	r25, r19
    1902:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <abs_indice+0x1>
    1906:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <abs_indice>
						printf("Ind en pos: %d \n", abs_indice);
    190a:	9f 93       	push	r25
    190c:	8f 93       	push	r24
    190e:	87 ed       	ldi	r24, 0xD7	; 215
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	9f 93       	push	r25
    1914:	8f 93       	push	r24
    1916:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    191a:	8f e1       	ldi	r24, 0x1F	; 31
    191c:	9e e4       	ldi	r25, 0x4E	; 78
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <main+0xe10>
    1922:	00 c0       	rjmp	.+0      	; 0x1924 <main+0xe16>
    1924:	00 00       	nop
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
						_delay_ms(5);
					}
					
					if (pulsos_med != 0)
    192e:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pulsos_med>
    1932:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pulsos_med+0x1>
    1936:	89 2b       	or	r24, r25
    1938:	09 f4       	brne	.+2      	; 0x193c <main+0xe2e>
    193a:	46 c0       	rjmp	.+140    	; 0x19c8 <main+0xeba>
					{
						printf("If med \n");
    193c:	86 e3       	ldi	r24, 0x36	; 54
    193e:	93 e0       	ldi	r25, 0x03	; 3
    1940:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						ActivarPWM_Med(pwm_med, onoff_med);
    1944:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
    1948:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
    194c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						while(med_ready != 1)
    1950:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <med_ready>
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	69 f0       	breq	.+26     	; 0x1972 <main+0xe64>
    1958:	9f ef       	ldi	r25, 0xFF	; 255
    195a:	29 ef       	ldi	r18, 0xF9	; 249
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	91 50       	subi	r25, 0x01	; 1
    1960:	20 40       	sbci	r18, 0x00	; 0
    1962:	80 40       	sbci	r24, 0x00	; 0
    1964:	e1 f7       	brne	.-8      	; 0x195e <main+0xe50>
    1966:	00 c0       	rjmp	.+0      	; 0x1968 <main+0xe5a>
    1968:	00 00       	nop
    196a:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <med_ready>
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	99 f7       	brne	.-26     	; 0x1958 <main+0xe4a>
						{		// Espera indicación de motor listo para salir del loop
							//printf("M: %d \n", med_ready);
							_delay_ms(20);
						}
						abs_medio = abs_medio + (signo_med * rel_medio);
    1972:	40 91 21 04 	lds	r20, 0x0421	; 0x800421 <signo_med>
    1976:	50 91 22 04 	lds	r21, 0x0422	; 0x800422 <signo_med+0x1>
    197a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <rel_medio>
    197e:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <rel_medio+0x1>
    1982:	48 9f       	mul	r20, r24
    1984:	90 01       	movw	r18, r0
    1986:	49 9f       	mul	r20, r25
    1988:	30 0d       	add	r19, r0
    198a:	58 9f       	mul	r21, r24
    198c:	30 0d       	add	r19, r0
    198e:	11 24       	eor	r1, r1
    1990:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <abs_medio>
    1994:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <abs_medio+0x1>
    1998:	82 0f       	add	r24, r18
    199a:	93 1f       	adc	r25, r19
    199c:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <abs_medio+0x1>
    19a0:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <abs_medio>
						printf("Med en pos: %d \n", abs_medio);
    19a4:	9f 93       	push	r25
    19a6:	8f 93       	push	r24
    19a8:	88 ee       	ldi	r24, 0xE8	; 232
    19aa:	92 e0       	ldi	r25, 0x02	; 2
    19ac:	9f 93       	push	r25
    19ae:	8f 93       	push	r24
    19b0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    19b4:	8f e1       	ldi	r24, 0x1F	; 31
    19b6:	9e e4       	ldi	r25, 0x4E	; 78
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <main+0xeaa>
    19bc:	00 c0       	rjmp	.+0      	; 0x19be <main+0xeb0>
    19be:	00 00       	nop
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
						_delay_ms(5);
					}
					
					if (pulsos_anu != 0)
    19c8:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pulsos_anu>
    19cc:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <pulsos_anu+0x1>
    19d0:	89 2b       	or	r24, r25
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <main+0xec8>
    19d4:	44 c0       	rjmp	.+136    	; 0x1a5e <main+0xf50>
					{
						printf("If anu \n");
    19d6:	8e e3       	ldi	r24, 0x3E	; 62
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						ActivarPWM_Anu(pwm_anu, onoff_anu);
    19de:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
    19e2:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
    19e6:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						while(anu_ready != 1)
    19ea:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <anu_ready>
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	69 f0       	breq	.+26     	; 0x1a0c <main+0xefe>
    19f2:	9f ef       	ldi	r25, 0xFF	; 255
    19f4:	29 ef       	ldi	r18, 0xF9	; 249
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	91 50       	subi	r25, 0x01	; 1
    19fa:	20 40       	sbci	r18, 0x00	; 0
    19fc:	80 40       	sbci	r24, 0x00	; 0
    19fe:	e1 f7       	brne	.-8      	; 0x19f8 <main+0xeea>
    1a00:	00 c0       	rjmp	.+0      	; 0x1a02 <main+0xef4>
    1a02:	00 00       	nop
    1a04:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <anu_ready>
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	99 f7       	brne	.-26     	; 0x19f2 <main+0xee4>
						{		// Espera indicación de motor listo para salir del loop
							//printf("A: %d \n", anu_ready);
							_delay_ms(20);
						}
						abs_anular = abs_anular + (signo_anu * rel_anular);
    1a0c:	40 91 1f 04 	lds	r20, 0x041F	; 0x80041f <signo_anu>
    1a10:	50 91 20 04 	lds	r21, 0x0420	; 0x800420 <signo_anu+0x1>
    1a14:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <rel_anular>
    1a18:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <rel_anular+0x1>
    1a1c:	48 9f       	mul	r20, r24
    1a1e:	90 01       	movw	r18, r0
    1a20:	49 9f       	mul	r20, r25
    1a22:	30 0d       	add	r19, r0
    1a24:	58 9f       	mul	r21, r24
    1a26:	30 0d       	add	r19, r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <abs_anular>
    1a2e:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <abs_anular+0x1>
    1a32:	82 0f       	add	r24, r18
    1a34:	93 1f       	adc	r25, r19
    1a36:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <abs_anular+0x1>
    1a3a:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <abs_anular>
						printf("Anu en pos: %d \n", abs_anular);
    1a3e:	9f 93       	push	r25
    1a40:	8f 93       	push	r24
    1a42:	3f 92       	push	r3
    1a44:	2f 92       	push	r2
    1a46:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    1a4a:	8f e1       	ldi	r24, 0x1F	; 31
    1a4c:	9e e4       	ldi	r25, 0x4E	; 78
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <main+0xf40>
    1a52:	00 c0       	rjmp	.+0      	; 0x1a54 <main+0xf46>
    1a54:	00 00       	nop
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
						_delay_ms(5);
					}
					
					printf("IMA listo \n");
    1a5e:	8d e5       	ldi	r24, 0x5D	; 93
    1a60:	92 e0       	ldi	r25, 0x02	; 2
    1a62:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
    1a66:	bf c0       	rjmp	.+382    	; 0x1be6 <main+0x10d8>
					//_delay_ms(100);
					//ima_listo = 1;					// Bandera: Indica que Micro IMA está en posición deseada
				}
				
				/////////////////////////////////////////////////////////////////////////////////////////
				else if (id_mov == 7)			// Rutina para movimiento de pistola
    1a68:	87 30       	cpi	r24, 0x07	; 7
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <main+0xf60>
    1a6c:	bc c0       	rjmp	.+376    	; 0x1be6 <main+0x10d8>
				{
					if (pulsos_ind != 0)
    1a6e:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pulsos_ind>
    1a72:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pulsos_ind+0x1>
    1a76:	89 2b       	or	r24, r25
    1a78:	e1 f1       	breq	.+120    	; 0x1af2 <main+0xfe4>
					{
						ActivarPWM_Ind(pwm_ind, onoff_ind);
    1a7a:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
    1a7e:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
    1a82:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
						while(ind_ready != 1)
    1a86:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	69 f0       	breq	.+26     	; 0x1aa8 <main+0xf9a>
    1a8e:	9f ef       	ldi	r25, 0xFF	; 255
    1a90:	29 ef       	ldi	r18, 0xF9	; 249
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	91 50       	subi	r25, 0x01	; 1
    1a96:	20 40       	sbci	r18, 0x00	; 0
    1a98:	80 40       	sbci	r24, 0x00	; 0
    1a9a:	e1 f7       	brne	.-8      	; 0x1a94 <main+0xf86>
    1a9c:	00 c0       	rjmp	.+0      	; 0x1a9e <main+0xf90>
    1a9e:	00 00       	nop
    1aa0:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <ind_ready>
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	99 f7       	brne	.-26     	; 0x1a8e <main+0xf80>
						{		// Espera indicación de motor listo para salir del loop
							_delay_ms(20);
						}
						abs_indice = abs_indice + (signo_ind * rel_indice);
    1aa8:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <signo_ind>
    1aac:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <signo_ind+0x1>
    1ab0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <rel_indice>
    1ab4:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <rel_indice+0x1>
    1ab8:	48 9f       	mul	r20, r24
    1aba:	90 01       	movw	r18, r0
    1abc:	49 9f       	mul	r20, r25
    1abe:	30 0d       	add	r19, r0
    1ac0:	58 9f       	mul	r21, r24
    1ac2:	30 0d       	add	r19, r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <abs_indice>
    1aca:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <abs_indice+0x1>
    1ace:	82 0f       	add	r24, r18
    1ad0:	93 1f       	adc	r25, r19
    1ad2:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <abs_indice+0x1>
    1ad6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <abs_indice>
						printf("Ind en pos: %d \n", abs_indice);
    1ada:	9f 93       	push	r25
    1adc:	8f 93       	push	r24
    1ade:	87 ed       	ldi	r24, 0xD7	; 215
    1ae0:	92 e0       	ldi	r25, 0x02	; 2
    1ae2:	9f 93       	push	r25
    1ae4:	8f 93       	push	r24
    1ae6:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
					}
					
					if (pulsos_med != 0)		// Si la posición actual es distinta de la deseada
    1af2:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pulsos_med>
    1af6:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pulsos_med+0x1>
    1afa:	89 2b       	or	r24, r25
    1afc:	b1 f1       	breq	.+108    	; 0x1b6a <main+0x105c>
					{
						pulsos_med = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1afe:	80 ed       	ldi	r24, 0xD0	; 208
    1b00:	97 e0       	ldi	r25, 0x07	; 7
    1b02:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <pulsos_med+0x1>
    1b06:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <pulsos_med>
						ActivarPWM_Med(pwm_med, onoff_med);
    1b0a:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
    1b0e:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
    1b12:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						while(ADC_GetData(FSRpin_med) < 40)		// Mientras los sensores no toquen la palma
    1b16:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1b20:	88 97       	sbiw	r24, 0x28	; 40
    1b22:	cc f3       	brlt	.-14     	; 0x1b16 <main+0x1008>
						{
						}
						ActivarPWM_Med(0,0);
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
						count_enc_med = 0;
    1b2c:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <count_enc_med+0x1>
    1b30:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <count_enc_med>
						onoff_med = 0;
    1b34:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <onoff_med>
						pwm_med = 0;
    1b38:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <pwm_med>
						med_ready = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <med_ready>
						printf("Med come \n");
    1b42:	84 e1       	ldi	r24, 0x14	; 20
    1b44:	93 e0       	ldi	r25, 0x03	; 3
    1b46:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						
						abs_medio = 0; // abs_menique + (signo_men * rel_menique);
    1b4a:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <abs_medio+0x1>
    1b4e:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <abs_medio>
						printf("Med en pos: %d \n", abs_medio);
    1b52:	1f 92       	push	r1
    1b54:	1f 92       	push	r1
    1b56:	88 ee       	ldi	r24, 0xE8	; 232
    1b58:	92 e0       	ldi	r25, 0x02	; 2
    1b5a:	9f 93       	push	r25
    1b5c:	8f 93       	push	r24
    1b5e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
					}
					
					if (pulsos_anu != 0)		// Si la posición actual es distinta de la deseada
    1b6a:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pulsos_anu>
    1b6e:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <pulsos_anu+0x1>
    1b72:	89 2b       	or	r24, r25
    1b74:	a1 f1       	breq	.+104    	; 0x1bde <main+0x10d0>
					{
						pulsos_anu = 2000;	// Para evitar que interrupción de encoder apague motor antes de llegar a 0
    1b76:	80 ed       	ldi	r24, 0xD0	; 208
    1b78:	97 e0       	ldi	r25, 0x07	; 7
    1b7a:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <pulsos_anu+0x1>
    1b7e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <pulsos_anu>
						ActivarPWM_Anu(pwm_anu, onoff_anu);
    1b82:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
    1b86:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
    1b8a:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						while(ADC_GetData(FSRpin_anu) < 50)		// Mientras los sensores no toquen la palma
    1b8e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1b98:	c2 97       	sbiw	r24, 0x32	; 50
    1b9a:	cc f3       	brlt	.-14     	; 0x1b8e <main+0x1080>
						{
						}
						ActivarPWM_Anu(0,0);
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
						count_enc_anu = 0;
    1ba4:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <count_enc_anu+0x1>
    1ba8:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <count_enc_anu>
						onoff_anu = 0;
    1bac:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <onoff_anu>
						pwm_anu = 0;
    1bb0:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <pwm_anu>
						anu_ready = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <anu_ready>
						printf("Anu come \n");
    1bba:	8e e1       	ldi	r24, 0x1E	; 30
    1bbc:	93 e0       	ldi	r25, 0x03	; 3
    1bbe:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
						
						abs_anular = 0; // abs_menique + (signo_men * rel_menique);
    1bc2:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <abs_anular+0x1>
    1bc6:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <abs_anular>
						printf("Anu en pos: %d \n", abs_anular);
    1bca:	1f 92       	push	r1
    1bcc:	1f 92       	push	r1
    1bce:	3f 92       	push	r3
    1bd0:	2f 92       	push	r2
    1bd2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
					}
					
					printf("IMA listo \n");
    1bde:	8d e5       	ldi	r24, 0x5D	; 93
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				
				
				//////////////////// Checar que IMA y PLM estén en posición deseada ///////////////////////////////
				//_delay_ms(200);					// Esperar
				//PORTC &= ~(1<<pin_ima_listo);  // Poner en bajo señal enviada
				pulsos_anu = 0;
    1be6:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <pulsos_anu+0x1>
    1bea:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <pulsos_anu>
				pulsos_med = 0;
    1bee:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <pulsos_med+0x1>
    1bf2:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <pulsos_med>
				pulsos_ind = 0;
    1bf6:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <pulsos_ind+0x1>
    1bfa:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <pulsos_ind>
				ima_listo = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <ima_listo>
				
				//////////////////// Sección en prueba ///////////////////////////////
				////////// Reporte de posición de motores y fuerza aplicada //////////
				
				printf("Indice: %d \n", abs_indice);
    1c04:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <abs_indice+0x1>
    1c08:	8f 93       	push	r24
    1c0a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <abs_indice>
    1c0e:	8f 93       	push	r24
    1c10:	bf 92       	push	r11
    1c12:	af 92       	push	r10
    1c14:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
				printf("Medio: %d \n", abs_medio);
    1c18:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <abs_medio+0x1>
    1c1c:	8f 93       	push	r24
    1c1e:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <abs_medio>
    1c22:	8f 93       	push	r24
    1c24:	9f 92       	push	r9
    1c26:	8f 92       	push	r8
    1c28:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
				printf("Anular: %d \n", abs_anular);
    1c2c:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <abs_anular+0x1>
    1c30:	8f 93       	push	r24
    1c32:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <abs_anular>
    1c36:	8f 93       	push	r24
    1c38:	7f 92       	push	r7
    1c3a:	6f 92       	push	r6
    1c3c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
				
				printf("Fuerza Ind: %d \n", ADC_GetData(FSRpin_ind));
    1c40:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <FSRpin_ind>
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1c4a:	9f 93       	push	r25
    1c4c:	8f 93       	push	r24
    1c4e:	5f 92       	push	r5
    1c50:	4f 92       	push	r4
    1c52:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
				printf("Fuerza Med: %d \n", ADC_GetData(FSRpin_med));
    1c56:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FSRpin_med>
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1c60:	9f 93       	push	r25
    1c62:	8f 93       	push	r24
    1c64:	df 92       	push	r13
    1c66:	cf 92       	push	r12
    1c68:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
				printf("Fuerza Anu: %d \n", ADC_GetData(FSRpin_anu));
    1c6c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FSRpin_anu>
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetData>
    1c76:	9f 93       	push	r25
    1c78:	8f 93       	push	r24
    1c7a:	ff 92       	push	r15
    1c7c:	ef 92       	push	r14
    1c7e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
				
				////////////////////// Fin de reporte ////////////////////////////////
				//////////////////////////////////////////////////////////////////////
				
				
				while (count_event != 4)		// Mientras PLM no esté en posición, no hacer nada
    1c82:	8d b7       	in	r24, 0x3d	; 61
    1c84:	9e b7       	in	r25, 0x3e	; 62
    1c86:	48 96       	adiw	r24, 0x18	; 24
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	9e bf       	out	0x3e, r25	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	8d bf       	out	0x3d, r24	; 61
    1c92:	12 c0       	rjmp	.+36     	; 0x1cb8 <main+0x11aa>
				{
					if ( ((PINC & (1 << pin_pul_listo)) == 0) && ((PINC & (1 << pin_ima_listo)) == 0) )
    1c94:	86 b1       	in	r24, 0x06	; 6
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	82 23       	and	r24, r18
    1c9a:	93 23       	and	r25, r19
    1c9c:	89 2b       	or	r24, r25
    1c9e:	f1 f4       	brne	.+60     	; 0x1cdc <main+0x11ce>
    1ca0:	86 b1       	in	r24, 0x06	; 6
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	84 23       	and	r24, r20
    1ca6:	95 23       	and	r25, r21
    1ca8:	89 2b       	or	r24, r25
    1caa:	c1 f4       	brne	.+48     	; 0x1cdc <main+0x11ce>
					{
						PORTC |= (1<<pin_ima_listo);
    1cac:	88 b1       	in	r24, 0x08	; 8
    1cae:	48 2b       	or	r20, r24
    1cb0:	48 b9       	out	0x08, r20	; 8
						count_event = 4;
    1cb2:	94 e0       	ldi	r25, 0x04	; 4
    1cb4:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <count_event>
				
				////////////////////// Fin de reporte ////////////////////////////////
				//////////////////////////////////////////////////////////////////////
				
				
				while (count_event != 4)		// Mientras PLM no esté en posición, no hacer nada
    1cb8:	60 91 4a 04 	lds	r22, 0x044A	; 0x80044a <count_event>
    1cbc:	98 01       	movw	r18, r16
    1cbe:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <pin_pul_listo>
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <main+0x11ba>
    1cc4:	22 0f       	add	r18, r18
    1cc6:	33 1f       	adc	r19, r19
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <main+0x11b6>
    1ccc:	a8 01       	movw	r20, r16
    1cce:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <pin_ima_listo>
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <main+0x11ca>
    1cd4:	44 0f       	add	r20, r20
    1cd6:	55 1f       	adc	r21, r21
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <main+0x11c6>
    1cdc:	64 30       	cpi	r22, 0x04	; 4
    1cde:	d1 f6       	brne	.-76     	; 0x1c94 <main+0x1186>
						PORTC |= (1<<pin_ima_listo);
						count_event = 4;
					}
				}
				
				plm_listo = 1;					// Cuando PLM esté en posición (count_event = 4), poner bandera en 1
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <plm_listo>
				printf("Listos \n");
    1ce6:	8f e9       	ldi	r24, 0x9F	; 159
    1ce8:	93 e0       	ldi	r25, 0x03	; 3
    1cea:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
    1cee:	8f e1       	ldi	r24, 0x1F	; 31
    1cf0:	9e e4       	ldi	r25, 0x4E	; 78
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <main+0x11e4>
    1cf6:	00 c0       	rjmp	.+0      	; 0x1cf8 <main+0x11ea>
    1cf8:	00 00       	nop
				_delay_ms(5);
				
				if (plm_listo == 1 && ima_listo == 1)	// Si IMA y PLM están en posición, hacer count_event=1
    1cfa:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <plm_listo>
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	11 f5       	brne	.+68     	; 0x1d46 <main+0x1238>
    1d02:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <ima_listo>
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	f1 f4       	brne	.+60     	; 0x1d46 <main+0x1238>
				{										// para que pueda volver a leer señales de control
					PORTC |= (1 << raspB_pin);	// Poner pin C5 en alto, enviar indicación de nuevo movimiento a Raspberry
    1d0a:	28 b1       	in	r18, 0x08	; 8
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <raspB_pin>
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <main+0x120a>
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	0a 94       	dec	r0
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <main+0x1206>
    1d1c:	82 2b       	or	r24, r18
    1d1e:	88 b9       	out	0x08, r24	; 8
    1d20:	8f e1       	ldi	r24, 0x1F	; 31
    1d22:	9e e4       	ldi	r25, 0x4E	; 78
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <main+0x1216>
    1d28:	00 c0       	rjmp	.+0      	; 0x1d2a <main+0x121c>
    1d2a:	00 00       	nop
					_delay_ms(5);
					count_event = 2;
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <count_event>
					anu_ready = 0;
    1d32:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <anu_ready>
					med_ready = 0;
    1d36:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <med_ready>
					ind_ready = 0;
    1d3a:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <ind_ready>
					plm_listo = 0;
    1d3e:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <plm_listo>
					ima_listo = 0;
    1d42:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <ima_listo>
				}
				
			}
			
			printf("Wait new \n");
    1d46:	87 ea       	ldi	r24, 0xA7	; 167
    1d48:	93 e0       	ldi	r25, 0x03	; 3
    1d4a:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
		
		// Fin de paso 1
		
		// Paso 2: Detección de movimientos
		// if(count_event == 2)
		while(count_event == 2)
    1d4e:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <count_event>
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	11 f4       	brne	.+4      	; 0x1d5a <main+0x124c>
    1d56:	0c 94 73 06 	jmp	0xce6	; 0xce6 <main+0x1d8>
		}
		
		// Fin de paso 2
		
		
		if(serial_ind == 1)
    1d5a:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <serial_ind>
    1d5e:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <serial_ind+0x1>
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <main+0x125a>
    1d66:	58 c0       	rjmp	.+176    	; 0x1e18 <main+0x130a>
		{
			if (serialCode == 0)
    1d68:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	29 c0       	rjmp	.+82     	; 0x1dc2 <main+0x12b4>
			{
				pwm_ind = 100;
    1d70:	84 e6       	ldi	r24, 0x64	; 100
    1d72:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <pwm_ind>
				onoff_ind = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <onoff_ind>
				//dir_ind = 1;
				PORTD |= (1<<dirpin_ind);
    1d7c:	2b b1       	in	r18, 0x0b	; 11
    1d7e:	c8 01       	movw	r24, r16
    1d80:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_ind>
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <main+0x127c>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <main+0x1278>
    1d8e:	82 2b       	or	r24, r18
    1d90:	8b b9       	out	0x0b, r24	; 11
				//PORTC &= ~(1 << 2);
				printf("Abrir indice \n");
    1d92:	81 eb       	ldi	r24, 0xB1	; 177
    1d94:	93 e0       	ldi	r25, 0x03	; 3
    1d96:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				serial_ind = 0;
    1d9a:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <serial_ind+0x1>
    1d9e:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <serial_ind>
				ActivarPWM_Ind(pwm_ind, onoff_ind);
    1da2:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
    1da6:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
    1daa:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
    1dae:	9f ef       	ldi	r25, 0xFF	; 255
    1db0:	23 ec       	ldi	r18, 0xC3	; 195
    1db2:	89 e0       	ldi	r24, 0x09	; 9
    1db4:	91 50       	subi	r25, 0x01	; 1
    1db6:	20 40       	sbci	r18, 0x00	; 0
    1db8:	80 40       	sbci	r24, 0x00	; 0
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <main+0x12a6>
    1dbc:	00 c0       	rjmp	.+0      	; 0x1dbe <main+0x12b0>
    1dbe:	00 00       	nop
    1dc0:	2b c0       	rjmp	.+86     	; 0x1e18 <main+0x130a>
				_delay_ms(200);
			}
			else if (serialCode == 1)
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	49 f5       	brne	.+82     	; 0x1e18 <main+0x130a>
			{
				pwm_ind = 100;
    1dc6:	84 e6       	ldi	r24, 0x64	; 100
    1dc8:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <pwm_ind>
				onoff_ind = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <onoff_ind>
				//dir_ind = 1;
				//PORTD |= (1<<pwmpin_ind);
				PORTD &= ~(1 << dirpin_ind);
    1dd2:	8b b1       	in	r24, 0x0b	; 11
    1dd4:	98 01       	movw	r18, r16
    1dd6:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <dirpin_ind>
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <main+0x12d2>
    1ddc:	22 0f       	add	r18, r18
    1dde:	33 1f       	adc	r19, r19
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <main+0x12ce>
    1de4:	20 95       	com	r18
    1de6:	82 23       	and	r24, r18
    1de8:	8b b9       	out	0x0b, r24	; 11
				printf("Cerrar indice \n");
    1dea:	8f eb       	ldi	r24, 0xBF	; 191
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				serial_ind = 0;
    1df2:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <serial_ind+0x1>
    1df6:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <serial_ind>
				ActivarPWM_Ind(pwm_ind, onoff_ind);
    1dfa:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <onoff_ind>
    1dfe:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <pwm_ind>
    1e02:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
    1e06:	9f ef       	ldi	r25, 0xFF	; 255
    1e08:	23 ec       	ldi	r18, 0xC3	; 195
    1e0a:	89 e0       	ldi	r24, 0x09	; 9
    1e0c:	91 50       	subi	r25, 0x01	; 1
    1e0e:	20 40       	sbci	r18, 0x00	; 0
    1e10:	80 40       	sbci	r24, 0x00	; 0
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <main+0x12fe>
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <main+0x1308>
    1e16:	00 00       	nop
				_delay_ms(200);
			}
			
		}

		if(serial_med == 1)
    1e18:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <serial_med>
    1e1c:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <serial_med+0x1>
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <main+0x1318>
    1e24:	58 c0       	rjmp	.+176    	; 0x1ed6 <main+0x13c8>
		{
			if (serialCode == 2)
    1e26:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	49 f5       	brne	.+82     	; 0x1e80 <main+0x1372>
			{
				pwm_med = 120;
    1e2e:	88 e7       	ldi	r24, 0x78	; 120
    1e30:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <pwm_med>
				onoff_med = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <onoff_med>
				//dir_med = 1;
				PORTB |= (1<<dirpin_med);
    1e3a:	25 b1       	in	r18, 0x05	; 5
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	00 90 3a 04 	lds	r0, 0x043A	; 0x80043a <dirpin_med>
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <main+0x133a>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <main+0x1336>
    1e4c:	82 2b       	or	r24, r18
    1e4e:	85 b9       	out	0x05, r24	; 5
				printf("Abrir med \n");
    1e50:	8e ec       	ldi	r24, 0xCE	; 206
    1e52:	93 e0       	ldi	r25, 0x03	; 3
    1e54:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				serial_med = 0;
    1e58:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <serial_med+0x1>
    1e5c:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <serial_med>
				ActivarPWM_Med(pwm_med, onoff_med);
    1e60:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
    1e64:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
    1e68:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
    1e6c:	9f ef       	ldi	r25, 0xFF	; 255
    1e6e:	23 ec       	ldi	r18, 0xC3	; 195
    1e70:	89 e0       	ldi	r24, 0x09	; 9
    1e72:	91 50       	subi	r25, 0x01	; 1
    1e74:	20 40       	sbci	r18, 0x00	; 0
    1e76:	80 40       	sbci	r24, 0x00	; 0
    1e78:	e1 f7       	brne	.-8      	; 0x1e72 <main+0x1364>
    1e7a:	00 c0       	rjmp	.+0      	; 0x1e7c <main+0x136e>
    1e7c:	00 00       	nop
    1e7e:	2b c0       	rjmp	.+86     	; 0x1ed6 <main+0x13c8>
				_delay_ms(200);
			}
			else if (serialCode == 3)
    1e80:	83 30       	cpi	r24, 0x03	; 3
    1e82:	49 f5       	brne	.+82     	; 0x1ed6 <main+0x13c8>
			{
				pwm_med = 100;
    1e84:	84 e6       	ldi	r24, 0x64	; 100
    1e86:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <pwm_med>
				onoff_med = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <onoff_med>
				//dir_med = 0;
				//PORTB |= (1<<pwmpin_med);
				PORTB &= ~(1 << dirpin_med);
    1e90:	85 b1       	in	r24, 0x05	; 5
    1e92:	98 01       	movw	r18, r16
    1e94:	00 90 3a 04 	lds	r0, 0x043A	; 0x80043a <dirpin_med>
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <main+0x1390>
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <main+0x138c>
    1ea2:	20 95       	com	r18
    1ea4:	82 23       	and	r24, r18
    1ea6:	85 b9       	out	0x05, r24	; 5
				printf("Cerrar med \n");
    1ea8:	89 ed       	ldi	r24, 0xD9	; 217
    1eaa:	93 e0       	ldi	r25, 0x03	; 3
    1eac:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				serial_med = 0;
    1eb0:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <serial_med+0x1>
    1eb4:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <serial_med>
				ActivarPWM_Med(pwm_med, onoff_med);
    1eb8:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <onoff_med>
    1ebc:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <pwm_med>
    1ec0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
    1ec4:	9f ef       	ldi	r25, 0xFF	; 255
    1ec6:	23 ec       	ldi	r18, 0xC3	; 195
    1ec8:	89 e0       	ldi	r24, 0x09	; 9
    1eca:	91 50       	subi	r25, 0x01	; 1
    1ecc:	20 40       	sbci	r18, 0x00	; 0
    1ece:	80 40       	sbci	r24, 0x00	; 0
    1ed0:	e1 f7       	brne	.-8      	; 0x1eca <main+0x13bc>
    1ed2:	00 c0       	rjmp	.+0      	; 0x1ed4 <main+0x13c6>
    1ed4:	00 00       	nop
				_delay_ms(200);
			}
		}
		
		if(serial_anu == 1)
    1ed6:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <serial_anu>
    1eda:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <serial_anu+0x1>
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <main+0x13d6>
    1ee2:	58 c0       	rjmp	.+176    	; 0x1f94 <main+0x1486>
		{
			if (serialCode == 4)
    1ee4:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <serialCode>
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	49 f5       	brne	.+82     	; 0x1f3e <main+0x1430>
			{
				pwm_anu = 100;
    1eec:	84 e6       	ldi	r24, 0x64	; 100
    1eee:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <pwm_anu>
				onoff_anu = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <onoff_anu>
				//dir_anu = 1;
				PORTB |= (1<<dirpin_anu);
    1ef8:	25 b1       	in	r18, 0x05	; 5
    1efa:	c8 01       	movw	r24, r16
    1efc:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <dirpin_anu>
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <main+0x13f8>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <main+0x13f4>
    1f0a:	82 2b       	or	r24, r18
    1f0c:	85 b9       	out	0x05, r24	; 5
				printf("Abrir anul \n");
    1f0e:	85 ee       	ldi	r24, 0xE5	; 229
    1f10:	93 e0       	ldi	r25, 0x03	; 3
    1f12:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				serial_anu = 0;
    1f16:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <serial_anu+0x1>
    1f1a:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <serial_anu>
				ActivarPWM_Anu(pwm_anu, onoff_anu);
    1f1e:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
    1f22:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
    1f26:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
    1f2a:	9f ef       	ldi	r25, 0xFF	; 255
    1f2c:	23 ec       	ldi	r18, 0xC3	; 195
    1f2e:	89 e0       	ldi	r24, 0x09	; 9
    1f30:	91 50       	subi	r25, 0x01	; 1
    1f32:	20 40       	sbci	r18, 0x00	; 0
    1f34:	80 40       	sbci	r24, 0x00	; 0
    1f36:	e1 f7       	brne	.-8      	; 0x1f30 <main+0x1422>
    1f38:	00 c0       	rjmp	.+0      	; 0x1f3a <main+0x142c>
    1f3a:	00 00       	nop
    1f3c:	2b c0       	rjmp	.+86     	; 0x1f94 <main+0x1486>
				_delay_ms(200);
			}
			else if (serialCode == 5)
    1f3e:	85 30       	cpi	r24, 0x05	; 5
    1f40:	49 f5       	brne	.+82     	; 0x1f94 <main+0x1486>
			{
				pwm_anu = 100;
    1f42:	84 e6       	ldi	r24, 0x64	; 100
    1f44:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <pwm_anu>
				onoff_anu = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <onoff_anu>
				//dir_anu = 0;
				//PORTB |= (1<<pwmpin_anu);
				PORTB &= ~(1 << dirpin_anu);
    1f4e:	85 b1       	in	r24, 0x05	; 5
    1f50:	98 01       	movw	r18, r16
    1f52:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <dirpin_anu>
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <main+0x144e>
    1f58:	22 0f       	add	r18, r18
    1f5a:	33 1f       	adc	r19, r19
    1f5c:	0a 94       	dec	r0
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <main+0x144a>
    1f60:	20 95       	com	r18
    1f62:	82 23       	and	r24, r18
    1f64:	85 b9       	out	0x05, r24	; 5
				printf("Cerrar anul \n");
    1f66:	81 ef       	ldi	r24, 0xF1	; 241
    1f68:	93 e0       	ldi	r25, 0x03	; 3
    1f6a:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
				serial_anu = 0;
    1f6e:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <serial_anu+0x1>
    1f72:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <serial_anu>
				ActivarPWM_Anu(pwm_anu, onoff_anu);
    1f76:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <onoff_anu>
    1f7a:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <pwm_anu>
    1f7e:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
    1f82:	9f ef       	ldi	r25, 0xFF	; 255
    1f84:	23 ec       	ldi	r18, 0xC3	; 195
    1f86:	89 e0       	ldi	r24, 0x09	; 9
    1f88:	91 50       	subi	r25, 0x01	; 1
    1f8a:	20 40       	sbci	r18, 0x00	; 0
    1f8c:	80 40       	sbci	r24, 0x00	; 0
    1f8e:	e1 f7       	brne	.-8      	; 0x1f88 <main+0x147a>
    1f90:	00 c0       	rjmp	.+0      	; 0x1f92 <main+0x1484>
    1f92:	00 00       	nop
    1f94:	9f ef       	ldi	r25, 0xFF	; 255
    1f96:	27 eb       	ldi	r18, 0xB7	; 183
    1f98:	8b e0       	ldi	r24, 0x0B	; 11
    1f9a:	91 50       	subi	r25, 0x01	; 1
    1f9c:	20 40       	sbci	r18, 0x00	; 0
    1f9e:	80 40       	sbci	r24, 0x00	; 0
    1fa0:	e1 f7       	brne	.-8      	; 0x1f9a <main+0x148c>
    1fa2:	00 c0       	rjmp	.+0      	; 0x1fa4 <main+0x1496>
    1fa4:	00 00       	nop
    1fa6:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <main+0x76>
			}
			else if((lectura[0] != lectura[1]) && (lectura[0] == lectura[2]))
			{
				moda = lectura[0];
			}
			else if((lectura[1] == lectura[2]) && (lectura[0] != lectura[1]))
    1faa:	82 13       	cpse	r24, r18
    1fac:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <main+0x228>
    1fb0:	0c 94 98 06 	jmp	0xd30	; 0xd30 <main+0x222>

00001fb4 <__vector_1>:
	anu_ready = 0;
}


ISR(INT0_vect)
{
    1fb4:	1f 92       	push	r1
    1fb6:	0f 92       	push	r0
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	0f 92       	push	r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	2f 93       	push	r18
    1fc0:	3f 93       	push	r19
    1fc2:	4f 93       	push	r20
    1fc4:	5f 93       	push	r21
    1fc6:	6f 93       	push	r22
    1fc8:	7f 93       	push	r23
    1fca:	8f 93       	push	r24
    1fcc:	9f 93       	push	r25
    1fce:	af 93       	push	r26
    1fd0:	bf 93       	push	r27
    1fd2:	ef 93       	push	r30
    1fd4:	ff 93       	push	r31
	if (count_enc_ind <= pulsos_ind)
    1fd6:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <count_enc_ind>
    1fda:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <count_enc_ind+0x1>
    1fde:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <pulsos_ind>
    1fe2:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <pulsos_ind+0x1>
    1fe6:	28 17       	cp	r18, r24
    1fe8:	39 07       	cpc	r19, r25
    1fea:	34 f0       	brlt	.+12     	; 0x1ff8 <__vector_1+0x44>
	{
		count_enc_ind ++;
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <count_enc_ind+0x1>
    1ff2:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <count_enc_ind>
    1ff6:	1b c0       	rjmp	.+54     	; 0x202e <__vector_1+0x7a>
	}
	else
	{
		ActivarPWM_Ind(0, 0);
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	0e 94 03 01 	call	0x206	; 0x206 <ActivarPWM_Ind>
		count_enc_ind = 0;
    2000:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <count_enc_ind+0x1>
    2004:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <count_enc_ind>
		onoff_ind = 0;
    2008:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <onoff_ind>
		pwm_ind = 0;
    200c:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <pwm_ind>
		ind_ready = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <ind_ready>
		printf("Ind come: %d \n", ind_ready);
    2016:	1f 92       	push	r1
    2018:	8f 93       	push	r24
    201a:	8e ef       	ldi	r24, 0xFE	; 254
    201c:	93 e0       	ldi	r25, 0x03	; 3
    201e:	9f 93       	push	r25
    2020:	8f 93       	push	r24
    2022:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <printf>
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
	}
	
}
    202e:	ff 91       	pop	r31
    2030:	ef 91       	pop	r30
    2032:	bf 91       	pop	r27
    2034:	af 91       	pop	r26
    2036:	9f 91       	pop	r25
    2038:	8f 91       	pop	r24
    203a:	7f 91       	pop	r23
    203c:	6f 91       	pop	r22
    203e:	5f 91       	pop	r21
    2040:	4f 91       	pop	r20
    2042:	3f 91       	pop	r19
    2044:	2f 91       	pop	r18
    2046:	0f 90       	pop	r0
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	0f 90       	pop	r0
    204c:	1f 90       	pop	r1
    204e:	18 95       	reti

00002050 <__vector_2>:

ISR(INT1_vect)
{
    2050:	1f 92       	push	r1
    2052:	0f 92       	push	r0
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	0f 92       	push	r0
    2058:	11 24       	eor	r1, r1
    205a:	2f 93       	push	r18
    205c:	3f 93       	push	r19
    205e:	4f 93       	push	r20
    2060:	5f 93       	push	r21
    2062:	6f 93       	push	r22
    2064:	7f 93       	push	r23
    2066:	8f 93       	push	r24
    2068:	9f 93       	push	r25
    206a:	af 93       	push	r26
    206c:	bf 93       	push	r27
    206e:	ef 93       	push	r30
    2070:	ff 93       	push	r31
	if (count_enc_med <= pulsos_med)
    2072:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <count_enc_med>
    2076:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <count_enc_med+0x1>
    207a:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <pulsos_med>
    207e:	30 91 15 04 	lds	r19, 0x0415	; 0x800415 <pulsos_med+0x1>
    2082:	28 17       	cp	r18, r24
    2084:	39 07       	cpc	r19, r25
    2086:	34 f0       	brlt	.+12     	; 0x2094 <__vector_2+0x44>
	{
		count_enc_med ++;
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <count_enc_med+0x1>
    208e:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <count_enc_med>
    2092:	13 c0       	rjmp	.+38     	; 0x20ba <__vector_2+0x6a>
	}
	else
	{
		ActivarPWM_Med(0, 0);
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ActivarPWM_Med>
		count_enc_med = 0;
    209c:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <count_enc_med+0x1>
    20a0:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <count_enc_med>
		onoff_med = 0;
    20a4:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <onoff_med>
		pwm_med = 0;
    20a8:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <pwm_med>
		med_ready = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <med_ready>
		printf("Med come \n");
    20b2:	84 e1       	ldi	r24, 0x14	; 20
    20b4:	93 e0       	ldi	r25, 0x03	; 3
    20b6:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
		
	}
}
    20ba:	ff 91       	pop	r31
    20bc:	ef 91       	pop	r30
    20be:	bf 91       	pop	r27
    20c0:	af 91       	pop	r26
    20c2:	9f 91       	pop	r25
    20c4:	8f 91       	pop	r24
    20c6:	7f 91       	pop	r23
    20c8:	6f 91       	pop	r22
    20ca:	5f 91       	pop	r21
    20cc:	4f 91       	pop	r20
    20ce:	3f 91       	pop	r19
    20d0:	2f 91       	pop	r18
    20d2:	0f 90       	pop	r0
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	0f 90       	pop	r0
    20d8:	1f 90       	pop	r1
    20da:	18 95       	reti

000020dc <__vector_5>:



ISR (PCINT2_vect)
{
    20dc:	1f 92       	push	r1
    20de:	0f 92       	push	r0
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	0f 92       	push	r0
    20e4:	11 24       	eor	r1, r1
    20e6:	2f 93       	push	r18
    20e8:	3f 93       	push	r19
    20ea:	4f 93       	push	r20
    20ec:	5f 93       	push	r21
    20ee:	6f 93       	push	r22
    20f0:	7f 93       	push	r23
    20f2:	8f 93       	push	r24
    20f4:	9f 93       	push	r25
    20f6:	af 93       	push	r26
    20f8:	bf 93       	push	r27
    20fa:	ef 93       	push	r30
    20fc:	ff 93       	push	r31
	uint8_t changedbits;

	changedbits = PIND ^ portdhistory;
    20fe:	99 b1       	in	r25, 0x09	; 9
    2100:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <portdhistory>
	portdhistory = PIND;
    2104:	29 b1       	in	r18, 0x09	; 9
    2106:	20 93 39 01 	sts	0x0139, r18	; 0x800139 <portdhistory>

	if(changedbits & (1 << PIND4))
    210a:	89 27       	eor	r24, r25
    210c:	84 ff       	sbrs	r24, 4
    210e:	24 c0       	rjmp	.+72     	; 0x2158 <__vector_5+0x7c>
	{
		if (count_enc_anu <= pulsos_anu)
    2110:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <count_enc_anu>
    2114:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <count_enc_anu+0x1>
    2118:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <pulsos_anu>
    211c:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <pulsos_anu+0x1>
    2120:	28 17       	cp	r18, r24
    2122:	39 07       	cpc	r19, r25
    2124:	34 f0       	brlt	.+12     	; 0x2132 <__vector_5+0x56>
		{
			count_enc_anu ++;
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <count_enc_anu+0x1>
    212c:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <count_enc_anu>
    2130:	13 c0       	rjmp	.+38     	; 0x2158 <__vector_5+0x7c>
		}
		else
		{
			ActivarPWM_Anu(0, 0);
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	0e 94 22 01 	call	0x244	; 0x244 <ActivarPWM_Anu>
			count_enc_anu = 0;
    213a:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <count_enc_anu+0x1>
    213e:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <count_enc_anu>
			onoff_anu = 0;
    2142:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <onoff_anu>
			pwm_anu = 0;
    2146:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <pwm_anu>
			anu_ready = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <anu_ready>
			printf("Anu come \n");
    2150:	8e e1       	ldi	r24, 0x1E	; 30
    2152:	93 e0       	ldi	r25, 0x03	; 3
    2154:	0e 94 0f 11 	call	0x221e	; 0x221e <puts>
			
		}
	}
	
}
    2158:	ff 91       	pop	r31
    215a:	ef 91       	pop	r30
    215c:	bf 91       	pop	r27
    215e:	af 91       	pop	r26
    2160:	9f 91       	pop	r25
    2162:	8f 91       	pop	r24
    2164:	7f 91       	pop	r23
    2166:	6f 91       	pop	r22
    2168:	5f 91       	pop	r21
    216a:	4f 91       	pop	r20
    216c:	3f 91       	pop	r19
    216e:	2f 91       	pop	r18
    2170:	0f 90       	pop	r0
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	0f 90       	pop	r0
    2176:	1f 90       	pop	r1
    2178:	18 95       	reti

0000217a <atol>:
    217a:	1f 93       	push	r17
    217c:	fc 01       	movw	r30, r24
    217e:	99 27       	eor	r25, r25
    2180:	88 27       	eor	r24, r24
    2182:	bc 01       	movw	r22, r24
    2184:	e8 94       	clt
    2186:	11 91       	ld	r17, Z+
    2188:	10 32       	cpi	r17, 0x20	; 32
    218a:	e9 f3       	breq	.-6      	; 0x2186 <atol+0xc>
    218c:	19 30       	cpi	r17, 0x09	; 9
    218e:	10 f0       	brcs	.+4      	; 0x2194 <atol+0x1a>
    2190:	1e 30       	cpi	r17, 0x0E	; 14
    2192:	c8 f3       	brcs	.-14     	; 0x2186 <atol+0xc>
    2194:	1b 32       	cpi	r17, 0x2B	; 43
    2196:	51 f0       	breq	.+20     	; 0x21ac <atol+0x32>
    2198:	1d 32       	cpi	r17, 0x2D	; 45
    219a:	49 f4       	brne	.+18     	; 0x21ae <atol+0x34>
    219c:	68 94       	set
    219e:	06 c0       	rjmp	.+12     	; 0x21ac <atol+0x32>
    21a0:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsi_const_10>
    21a4:	61 0f       	add	r22, r17
    21a6:	71 1d       	adc	r23, r1
    21a8:	81 1d       	adc	r24, r1
    21aa:	91 1d       	adc	r25, r1
    21ac:	11 91       	ld	r17, Z+
    21ae:	10 53       	subi	r17, 0x30	; 48
    21b0:	1a 30       	cpi	r17, 0x0A	; 10
    21b2:	b0 f3       	brcs	.-20     	; 0x21a0 <atol+0x26>
    21b4:	3e f4       	brtc	.+14     	; 0x21c4 <atol+0x4a>
    21b6:	90 95       	com	r25
    21b8:	80 95       	com	r24
    21ba:	70 95       	com	r23
    21bc:	61 95       	neg	r22
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	8f 4f       	sbci	r24, 0xFF	; 255
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	1f 91       	pop	r17
    21c6:	08 95       	ret

000021c8 <__mulsi_const_10>:
    21c8:	59 2f       	mov	r21, r25
    21ca:	48 2f       	mov	r20, r24
    21cc:	37 2f       	mov	r19, r23
    21ce:	26 2f       	mov	r18, r22
    21d0:	66 0f       	add	r22, r22
    21d2:	77 1f       	adc	r23, r23
    21d4:	88 1f       	adc	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	66 0f       	add	r22, r22
    21da:	77 1f       	adc	r23, r23
    21dc:	88 1f       	adc	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	62 0f       	add	r22, r18
    21e2:	73 1f       	adc	r23, r19
    21e4:	84 1f       	adc	r24, r20
    21e6:	95 1f       	adc	r25, r21
    21e8:	66 0f       	add	r22, r22
    21ea:	77 1f       	adc	r23, r23
    21ec:	88 1f       	adc	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	08 95       	ret

000021f2 <printf>:
    21f2:	a0 e0       	ldi	r26, 0x00	; 0
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ef ef       	ldi	r30, 0xFF	; 255
    21f8:	f0 e1       	ldi	r31, 0x10	; 16
    21fa:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__prologue_saves__+0x20>
    21fe:	ae 01       	movw	r20, r28
    2200:	4b 5f       	subi	r20, 0xFB	; 251
    2202:	5f 4f       	sbci	r21, 0xFF	; 255
    2204:	fa 01       	movw	r30, r20
    2206:	61 91       	ld	r22, Z+
    2208:	71 91       	ld	r23, Z+
    220a:	af 01       	movw	r20, r30
    220c:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <__iob+0x2>
    2210:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <__iob+0x3>
    2214:	0e 94 3f 11 	call	0x227e	; 0x227e <vfprintf>
    2218:	e2 e0       	ldi	r30, 0x02	; 2
    221a:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__epilogue_restores__+0x20>

0000221e <puts>:
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <__iob+0x2>
    222a:	f0 91 7c 04 	lds	r31, 0x047C	; 0x80047c <__iob+0x3>
    222e:	23 81       	ldd	r18, Z+3	; 0x03
    2230:	21 ff       	sbrs	r18, 1
    2232:	1b c0       	rjmp	.+54     	; 0x226a <puts+0x4c>
    2234:	8c 01       	movw	r16, r24
    2236:	d0 e0       	ldi	r29, 0x00	; 0
    2238:	c0 e0       	ldi	r28, 0x00	; 0
    223a:	f8 01       	movw	r30, r16
    223c:	81 91       	ld	r24, Z+
    223e:	8f 01       	movw	r16, r30
    2240:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <__iob+0x2>
    2244:	70 91 7c 04 	lds	r23, 0x047C	; 0x80047c <__iob+0x3>
    2248:	db 01       	movw	r26, r22
    224a:	18 96       	adiw	r26, 0x08	; 8
    224c:	ed 91       	ld	r30, X+
    224e:	fc 91       	ld	r31, X
    2250:	19 97       	sbiw	r26, 0x09	; 9
    2252:	88 23       	and	r24, r24
    2254:	31 f0       	breq	.+12     	; 0x2262 <puts+0x44>
    2256:	09 95       	icall
    2258:	89 2b       	or	r24, r25
    225a:	79 f3       	breq	.-34     	; 0x223a <puts+0x1c>
    225c:	df ef       	ldi	r29, 0xFF	; 255
    225e:	cf ef       	ldi	r28, 0xFF	; 255
    2260:	ec cf       	rjmp	.-40     	; 0x223a <puts+0x1c>
    2262:	8a e0       	ldi	r24, 0x0A	; 10
    2264:	09 95       	icall
    2266:	89 2b       	or	r24, r25
    2268:	19 f0       	breq	.+6      	; 0x2270 <puts+0x52>
    226a:	8f ef       	ldi	r24, 0xFF	; 255
    226c:	9f ef       	ldi	r25, 0xFF	; 255
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <puts+0x56>
    2270:	8d 2f       	mov	r24, r29
    2272:	9c 2f       	mov	r25, r28
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	08 95       	ret

0000227e <vfprintf>:
    227e:	ab e0       	ldi	r26, 0x0B	; 11
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e5 e4       	ldi	r30, 0x45	; 69
    2284:	f1 e1       	ldi	r31, 0x11	; 17
    2286:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__prologue_saves__>
    228a:	6c 01       	movw	r12, r24
    228c:	7b 01       	movw	r14, r22
    228e:	8a 01       	movw	r16, r20
    2290:	fc 01       	movw	r30, r24
    2292:	17 82       	std	Z+7, r1	; 0x07
    2294:	16 82       	std	Z+6, r1	; 0x06
    2296:	83 81       	ldd	r24, Z+3	; 0x03
    2298:	81 ff       	sbrs	r24, 1
    229a:	cc c1       	rjmp	.+920    	; 0x2634 <vfprintf+0x3b6>
    229c:	ce 01       	movw	r24, r28
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	3c 01       	movw	r6, r24
    22a2:	f6 01       	movw	r30, r12
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	f7 01       	movw	r30, r14
    22a8:	93 fd       	sbrc	r25, 3
    22aa:	85 91       	lpm	r24, Z+
    22ac:	93 ff       	sbrs	r25, 3
    22ae:	81 91       	ld	r24, Z+
    22b0:	7f 01       	movw	r14, r30
    22b2:	88 23       	and	r24, r24
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <vfprintf+0x3a>
    22b6:	ba c1       	rjmp	.+884    	; 0x262c <vfprintf+0x3ae>
    22b8:	85 32       	cpi	r24, 0x25	; 37
    22ba:	39 f4       	brne	.+14     	; 0x22ca <vfprintf+0x4c>
    22bc:	93 fd       	sbrc	r25, 3
    22be:	85 91       	lpm	r24, Z+
    22c0:	93 ff       	sbrs	r25, 3
    22c2:	81 91       	ld	r24, Z+
    22c4:	7f 01       	movw	r14, r30
    22c6:	85 32       	cpi	r24, 0x25	; 37
    22c8:	29 f4       	brne	.+10     	; 0x22d4 <vfprintf+0x56>
    22ca:	b6 01       	movw	r22, r12
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 36 13 	call	0x266c	; 0x266c <fputc>
    22d2:	e7 cf       	rjmp	.-50     	; 0x22a2 <vfprintf+0x24>
    22d4:	91 2c       	mov	r9, r1
    22d6:	21 2c       	mov	r2, r1
    22d8:	31 2c       	mov	r3, r1
    22da:	ff e1       	ldi	r31, 0x1F	; 31
    22dc:	f3 15       	cp	r31, r3
    22de:	d8 f0       	brcs	.+54     	; 0x2316 <vfprintf+0x98>
    22e0:	8b 32       	cpi	r24, 0x2B	; 43
    22e2:	79 f0       	breq	.+30     	; 0x2302 <vfprintf+0x84>
    22e4:	38 f4       	brcc	.+14     	; 0x22f4 <vfprintf+0x76>
    22e6:	80 32       	cpi	r24, 0x20	; 32
    22e8:	79 f0       	breq	.+30     	; 0x2308 <vfprintf+0x8a>
    22ea:	83 32       	cpi	r24, 0x23	; 35
    22ec:	a1 f4       	brne	.+40     	; 0x2316 <vfprintf+0x98>
    22ee:	23 2d       	mov	r18, r3
    22f0:	20 61       	ori	r18, 0x10	; 16
    22f2:	1d c0       	rjmp	.+58     	; 0x232e <vfprintf+0xb0>
    22f4:	8d 32       	cpi	r24, 0x2D	; 45
    22f6:	61 f0       	breq	.+24     	; 0x2310 <vfprintf+0x92>
    22f8:	80 33       	cpi	r24, 0x30	; 48
    22fa:	69 f4       	brne	.+26     	; 0x2316 <vfprintf+0x98>
    22fc:	23 2d       	mov	r18, r3
    22fe:	21 60       	ori	r18, 0x01	; 1
    2300:	16 c0       	rjmp	.+44     	; 0x232e <vfprintf+0xb0>
    2302:	83 2d       	mov	r24, r3
    2304:	82 60       	ori	r24, 0x02	; 2
    2306:	38 2e       	mov	r3, r24
    2308:	e3 2d       	mov	r30, r3
    230a:	e4 60       	ori	r30, 0x04	; 4
    230c:	3e 2e       	mov	r3, r30
    230e:	2a c0       	rjmp	.+84     	; 0x2364 <vfprintf+0xe6>
    2310:	f3 2d       	mov	r31, r3
    2312:	f8 60       	ori	r31, 0x08	; 8
    2314:	1d c0       	rjmp	.+58     	; 0x2350 <vfprintf+0xd2>
    2316:	37 fc       	sbrc	r3, 7
    2318:	2d c0       	rjmp	.+90     	; 0x2374 <vfprintf+0xf6>
    231a:	20 ed       	ldi	r18, 0xD0	; 208
    231c:	28 0f       	add	r18, r24
    231e:	2a 30       	cpi	r18, 0x0A	; 10
    2320:	40 f0       	brcs	.+16     	; 0x2332 <vfprintf+0xb4>
    2322:	8e 32       	cpi	r24, 0x2E	; 46
    2324:	b9 f4       	brne	.+46     	; 0x2354 <vfprintf+0xd6>
    2326:	36 fc       	sbrc	r3, 6
    2328:	81 c1       	rjmp	.+770    	; 0x262c <vfprintf+0x3ae>
    232a:	23 2d       	mov	r18, r3
    232c:	20 64       	ori	r18, 0x40	; 64
    232e:	32 2e       	mov	r3, r18
    2330:	19 c0       	rjmp	.+50     	; 0x2364 <vfprintf+0xe6>
    2332:	36 fe       	sbrs	r3, 6
    2334:	06 c0       	rjmp	.+12     	; 0x2342 <vfprintf+0xc4>
    2336:	8a e0       	ldi	r24, 0x0A	; 10
    2338:	98 9e       	mul	r9, r24
    233a:	20 0d       	add	r18, r0
    233c:	11 24       	eor	r1, r1
    233e:	92 2e       	mov	r9, r18
    2340:	11 c0       	rjmp	.+34     	; 0x2364 <vfprintf+0xe6>
    2342:	ea e0       	ldi	r30, 0x0A	; 10
    2344:	2e 9e       	mul	r2, r30
    2346:	20 0d       	add	r18, r0
    2348:	11 24       	eor	r1, r1
    234a:	22 2e       	mov	r2, r18
    234c:	f3 2d       	mov	r31, r3
    234e:	f0 62       	ori	r31, 0x20	; 32
    2350:	3f 2e       	mov	r3, r31
    2352:	08 c0       	rjmp	.+16     	; 0x2364 <vfprintf+0xe6>
    2354:	8c 36       	cpi	r24, 0x6C	; 108
    2356:	21 f4       	brne	.+8      	; 0x2360 <vfprintf+0xe2>
    2358:	83 2d       	mov	r24, r3
    235a:	80 68       	ori	r24, 0x80	; 128
    235c:	38 2e       	mov	r3, r24
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <vfprintf+0xe6>
    2360:	88 36       	cpi	r24, 0x68	; 104
    2362:	41 f4       	brne	.+16     	; 0x2374 <vfprintf+0xf6>
    2364:	f7 01       	movw	r30, r14
    2366:	93 fd       	sbrc	r25, 3
    2368:	85 91       	lpm	r24, Z+
    236a:	93 ff       	sbrs	r25, 3
    236c:	81 91       	ld	r24, Z+
    236e:	7f 01       	movw	r14, r30
    2370:	81 11       	cpse	r24, r1
    2372:	b3 cf       	rjmp	.-154    	; 0x22da <vfprintf+0x5c>
    2374:	98 2f       	mov	r25, r24
    2376:	9f 7d       	andi	r25, 0xDF	; 223
    2378:	95 54       	subi	r25, 0x45	; 69
    237a:	93 30       	cpi	r25, 0x03	; 3
    237c:	28 f4       	brcc	.+10     	; 0x2388 <vfprintf+0x10a>
    237e:	0c 5f       	subi	r16, 0xFC	; 252
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	9f e3       	ldi	r25, 0x3F	; 63
    2384:	99 83       	std	Y+1, r25	; 0x01
    2386:	0d c0       	rjmp	.+26     	; 0x23a2 <vfprintf+0x124>
    2388:	83 36       	cpi	r24, 0x63	; 99
    238a:	31 f0       	breq	.+12     	; 0x2398 <vfprintf+0x11a>
    238c:	83 37       	cpi	r24, 0x73	; 115
    238e:	71 f0       	breq	.+28     	; 0x23ac <vfprintf+0x12e>
    2390:	83 35       	cpi	r24, 0x53	; 83
    2392:	09 f0       	breq	.+2      	; 0x2396 <vfprintf+0x118>
    2394:	59 c0       	rjmp	.+178    	; 0x2448 <vfprintf+0x1ca>
    2396:	21 c0       	rjmp	.+66     	; 0x23da <vfprintf+0x15c>
    2398:	f8 01       	movw	r30, r16
    239a:	80 81       	ld	r24, Z
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	0e 5f       	subi	r16, 0xFE	; 254
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	88 24       	eor	r8, r8
    23a4:	83 94       	inc	r8
    23a6:	91 2c       	mov	r9, r1
    23a8:	53 01       	movw	r10, r6
    23aa:	13 c0       	rjmp	.+38     	; 0x23d2 <vfprintf+0x154>
    23ac:	28 01       	movw	r4, r16
    23ae:	f2 e0       	ldi	r31, 0x02	; 2
    23b0:	4f 0e       	add	r4, r31
    23b2:	51 1c       	adc	r5, r1
    23b4:	f8 01       	movw	r30, r16
    23b6:	a0 80       	ld	r10, Z
    23b8:	b1 80       	ldd	r11, Z+1	; 0x01
    23ba:	36 fe       	sbrs	r3, 6
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <vfprintf+0x146>
    23be:	69 2d       	mov	r22, r9
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <vfprintf+0x14a>
    23c4:	6f ef       	ldi	r22, 0xFF	; 255
    23c6:	7f ef       	ldi	r23, 0xFF	; 255
    23c8:	c5 01       	movw	r24, r10
    23ca:	0e 94 2b 13 	call	0x2656	; 0x2656 <strnlen>
    23ce:	4c 01       	movw	r8, r24
    23d0:	82 01       	movw	r16, r4
    23d2:	f3 2d       	mov	r31, r3
    23d4:	ff 77       	andi	r31, 0x7F	; 127
    23d6:	3f 2e       	mov	r3, r31
    23d8:	16 c0       	rjmp	.+44     	; 0x2406 <vfprintf+0x188>
    23da:	28 01       	movw	r4, r16
    23dc:	22 e0       	ldi	r18, 0x02	; 2
    23de:	42 0e       	add	r4, r18
    23e0:	51 1c       	adc	r5, r1
    23e2:	f8 01       	movw	r30, r16
    23e4:	a0 80       	ld	r10, Z
    23e6:	b1 80       	ldd	r11, Z+1	; 0x01
    23e8:	36 fe       	sbrs	r3, 6
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <vfprintf+0x174>
    23ec:	69 2d       	mov	r22, r9
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <vfprintf+0x178>
    23f2:	6f ef       	ldi	r22, 0xFF	; 255
    23f4:	7f ef       	ldi	r23, 0xFF	; 255
    23f6:	c5 01       	movw	r24, r10
    23f8:	0e 94 20 13 	call	0x2640	; 0x2640 <strnlen_P>
    23fc:	4c 01       	movw	r8, r24
    23fe:	f3 2d       	mov	r31, r3
    2400:	f0 68       	ori	r31, 0x80	; 128
    2402:	3f 2e       	mov	r3, r31
    2404:	82 01       	movw	r16, r4
    2406:	33 fc       	sbrc	r3, 3
    2408:	1b c0       	rjmp	.+54     	; 0x2440 <vfprintf+0x1c2>
    240a:	82 2d       	mov	r24, r2
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	88 16       	cp	r8, r24
    2410:	99 06       	cpc	r9, r25
    2412:	b0 f4       	brcc	.+44     	; 0x2440 <vfprintf+0x1c2>
    2414:	b6 01       	movw	r22, r12
    2416:	80 e2       	ldi	r24, 0x20	; 32
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0e 94 36 13 	call	0x266c	; 0x266c <fputc>
    241e:	2a 94       	dec	r2
    2420:	f4 cf       	rjmp	.-24     	; 0x240a <vfprintf+0x18c>
    2422:	f5 01       	movw	r30, r10
    2424:	37 fc       	sbrc	r3, 7
    2426:	85 91       	lpm	r24, Z+
    2428:	37 fe       	sbrs	r3, 7
    242a:	81 91       	ld	r24, Z+
    242c:	5f 01       	movw	r10, r30
    242e:	b6 01       	movw	r22, r12
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 36 13 	call	0x266c	; 0x266c <fputc>
    2436:	21 10       	cpse	r2, r1
    2438:	2a 94       	dec	r2
    243a:	21 e0       	ldi	r18, 0x01	; 1
    243c:	82 1a       	sub	r8, r18
    243e:	91 08       	sbc	r9, r1
    2440:	81 14       	cp	r8, r1
    2442:	91 04       	cpc	r9, r1
    2444:	71 f7       	brne	.-36     	; 0x2422 <vfprintf+0x1a4>
    2446:	e8 c0       	rjmp	.+464    	; 0x2618 <vfprintf+0x39a>
    2448:	84 36       	cpi	r24, 0x64	; 100
    244a:	11 f0       	breq	.+4      	; 0x2450 <vfprintf+0x1d2>
    244c:	89 36       	cpi	r24, 0x69	; 105
    244e:	41 f5       	brne	.+80     	; 0x24a0 <vfprintf+0x222>
    2450:	f8 01       	movw	r30, r16
    2452:	37 fe       	sbrs	r3, 7
    2454:	07 c0       	rjmp	.+14     	; 0x2464 <vfprintf+0x1e6>
    2456:	60 81       	ld	r22, Z
    2458:	71 81       	ldd	r23, Z+1	; 0x01
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	0c 5f       	subi	r16, 0xFC	; 252
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	08 c0       	rjmp	.+16     	; 0x2474 <vfprintf+0x1f6>
    2464:	60 81       	ld	r22, Z
    2466:	71 81       	ldd	r23, Z+1	; 0x01
    2468:	07 2e       	mov	r0, r23
    246a:	00 0c       	add	r0, r0
    246c:	88 0b       	sbc	r24, r24
    246e:	99 0b       	sbc	r25, r25
    2470:	0e 5f       	subi	r16, 0xFE	; 254
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	f3 2d       	mov	r31, r3
    2476:	ff 76       	andi	r31, 0x6F	; 111
    2478:	3f 2e       	mov	r3, r31
    247a:	97 ff       	sbrs	r25, 7
    247c:	09 c0       	rjmp	.+18     	; 0x2490 <vfprintf+0x212>
    247e:	90 95       	com	r25
    2480:	80 95       	com	r24
    2482:	70 95       	com	r23
    2484:	61 95       	neg	r22
    2486:	7f 4f       	sbci	r23, 0xFF	; 255
    2488:	8f 4f       	sbci	r24, 0xFF	; 255
    248a:	9f 4f       	sbci	r25, 0xFF	; 255
    248c:	f0 68       	ori	r31, 0x80	; 128
    248e:	3f 2e       	mov	r3, r31
    2490:	2a e0       	ldi	r18, 0x0A	; 10
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	a3 01       	movw	r20, r6
    2496:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__ultoa_invert>
    249a:	88 2e       	mov	r8, r24
    249c:	86 18       	sub	r8, r6
    249e:	45 c0       	rjmp	.+138    	; 0x252a <vfprintf+0x2ac>
    24a0:	85 37       	cpi	r24, 0x75	; 117
    24a2:	31 f4       	brne	.+12     	; 0x24b0 <vfprintf+0x232>
    24a4:	23 2d       	mov	r18, r3
    24a6:	2f 7e       	andi	r18, 0xEF	; 239
    24a8:	b2 2e       	mov	r11, r18
    24aa:	2a e0       	ldi	r18, 0x0A	; 10
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	25 c0       	rjmp	.+74     	; 0x24fa <vfprintf+0x27c>
    24b0:	93 2d       	mov	r25, r3
    24b2:	99 7f       	andi	r25, 0xF9	; 249
    24b4:	b9 2e       	mov	r11, r25
    24b6:	8f 36       	cpi	r24, 0x6F	; 111
    24b8:	c1 f0       	breq	.+48     	; 0x24ea <vfprintf+0x26c>
    24ba:	18 f4       	brcc	.+6      	; 0x24c2 <vfprintf+0x244>
    24bc:	88 35       	cpi	r24, 0x58	; 88
    24be:	79 f0       	breq	.+30     	; 0x24de <vfprintf+0x260>
    24c0:	b5 c0       	rjmp	.+362    	; 0x262c <vfprintf+0x3ae>
    24c2:	80 37       	cpi	r24, 0x70	; 112
    24c4:	19 f0       	breq	.+6      	; 0x24cc <vfprintf+0x24e>
    24c6:	88 37       	cpi	r24, 0x78	; 120
    24c8:	21 f0       	breq	.+8      	; 0x24d2 <vfprintf+0x254>
    24ca:	b0 c0       	rjmp	.+352    	; 0x262c <vfprintf+0x3ae>
    24cc:	e9 2f       	mov	r30, r25
    24ce:	e0 61       	ori	r30, 0x10	; 16
    24d0:	be 2e       	mov	r11, r30
    24d2:	b4 fe       	sbrs	r11, 4
    24d4:	0d c0       	rjmp	.+26     	; 0x24f0 <vfprintf+0x272>
    24d6:	fb 2d       	mov	r31, r11
    24d8:	f4 60       	ori	r31, 0x04	; 4
    24da:	bf 2e       	mov	r11, r31
    24dc:	09 c0       	rjmp	.+18     	; 0x24f0 <vfprintf+0x272>
    24de:	34 fe       	sbrs	r3, 4
    24e0:	0a c0       	rjmp	.+20     	; 0x24f6 <vfprintf+0x278>
    24e2:	29 2f       	mov	r18, r25
    24e4:	26 60       	ori	r18, 0x06	; 6
    24e6:	b2 2e       	mov	r11, r18
    24e8:	06 c0       	rjmp	.+12     	; 0x24f6 <vfprintf+0x278>
    24ea:	28 e0       	ldi	r18, 0x08	; 8
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	05 c0       	rjmp	.+10     	; 0x24fa <vfprintf+0x27c>
    24f0:	20 e1       	ldi	r18, 0x10	; 16
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <vfprintf+0x27c>
    24f6:	20 e1       	ldi	r18, 0x10	; 16
    24f8:	32 e0       	ldi	r19, 0x02	; 2
    24fa:	f8 01       	movw	r30, r16
    24fc:	b7 fe       	sbrs	r11, 7
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <vfprintf+0x290>
    2500:	60 81       	ld	r22, Z
    2502:	71 81       	ldd	r23, Z+1	; 0x01
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	0c 5f       	subi	r16, 0xFC	; 252
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	06 c0       	rjmp	.+12     	; 0x251a <vfprintf+0x29c>
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	0e 5f       	subi	r16, 0xFE	; 254
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	a3 01       	movw	r20, r6
    251c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__ultoa_invert>
    2520:	88 2e       	mov	r8, r24
    2522:	86 18       	sub	r8, r6
    2524:	fb 2d       	mov	r31, r11
    2526:	ff 77       	andi	r31, 0x7F	; 127
    2528:	3f 2e       	mov	r3, r31
    252a:	36 fe       	sbrs	r3, 6
    252c:	0d c0       	rjmp	.+26     	; 0x2548 <vfprintf+0x2ca>
    252e:	23 2d       	mov	r18, r3
    2530:	2e 7f       	andi	r18, 0xFE	; 254
    2532:	a2 2e       	mov	r10, r18
    2534:	89 14       	cp	r8, r9
    2536:	58 f4       	brcc	.+22     	; 0x254e <vfprintf+0x2d0>
    2538:	34 fe       	sbrs	r3, 4
    253a:	0b c0       	rjmp	.+22     	; 0x2552 <vfprintf+0x2d4>
    253c:	32 fc       	sbrc	r3, 2
    253e:	09 c0       	rjmp	.+18     	; 0x2552 <vfprintf+0x2d4>
    2540:	83 2d       	mov	r24, r3
    2542:	8e 7e       	andi	r24, 0xEE	; 238
    2544:	a8 2e       	mov	r10, r24
    2546:	05 c0       	rjmp	.+10     	; 0x2552 <vfprintf+0x2d4>
    2548:	b8 2c       	mov	r11, r8
    254a:	a3 2c       	mov	r10, r3
    254c:	03 c0       	rjmp	.+6      	; 0x2554 <vfprintf+0x2d6>
    254e:	b8 2c       	mov	r11, r8
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <vfprintf+0x2d6>
    2552:	b9 2c       	mov	r11, r9
    2554:	a4 fe       	sbrs	r10, 4
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <vfprintf+0x2f8>
    2558:	fe 01       	movw	r30, r28
    255a:	e8 0d       	add	r30, r8
    255c:	f1 1d       	adc	r31, r1
    255e:	80 81       	ld	r24, Z
    2560:	80 33       	cpi	r24, 0x30	; 48
    2562:	21 f4       	brne	.+8      	; 0x256c <vfprintf+0x2ee>
    2564:	9a 2d       	mov	r25, r10
    2566:	99 7e       	andi	r25, 0xE9	; 233
    2568:	a9 2e       	mov	r10, r25
    256a:	09 c0       	rjmp	.+18     	; 0x257e <vfprintf+0x300>
    256c:	a2 fe       	sbrs	r10, 2
    256e:	06 c0       	rjmp	.+12     	; 0x257c <vfprintf+0x2fe>
    2570:	b3 94       	inc	r11
    2572:	b3 94       	inc	r11
    2574:	04 c0       	rjmp	.+8      	; 0x257e <vfprintf+0x300>
    2576:	8a 2d       	mov	r24, r10
    2578:	86 78       	andi	r24, 0x86	; 134
    257a:	09 f0       	breq	.+2      	; 0x257e <vfprintf+0x300>
    257c:	b3 94       	inc	r11
    257e:	a3 fc       	sbrc	r10, 3
    2580:	11 c0       	rjmp	.+34     	; 0x25a4 <vfprintf+0x326>
    2582:	a0 fe       	sbrs	r10, 0
    2584:	06 c0       	rjmp	.+12     	; 0x2592 <vfprintf+0x314>
    2586:	b2 14       	cp	r11, r2
    2588:	88 f4       	brcc	.+34     	; 0x25ac <vfprintf+0x32e>
    258a:	28 0c       	add	r2, r8
    258c:	92 2c       	mov	r9, r2
    258e:	9b 18       	sub	r9, r11
    2590:	0e c0       	rjmp	.+28     	; 0x25ae <vfprintf+0x330>
    2592:	b2 14       	cp	r11, r2
    2594:	60 f4       	brcc	.+24     	; 0x25ae <vfprintf+0x330>
    2596:	b6 01       	movw	r22, r12
    2598:	80 e2       	ldi	r24, 0x20	; 32
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 36 13 	call	0x266c	; 0x266c <fputc>
    25a0:	b3 94       	inc	r11
    25a2:	f7 cf       	rjmp	.-18     	; 0x2592 <vfprintf+0x314>
    25a4:	b2 14       	cp	r11, r2
    25a6:	18 f4       	brcc	.+6      	; 0x25ae <vfprintf+0x330>
    25a8:	2b 18       	sub	r2, r11
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <vfprintf+0x332>
    25ac:	98 2c       	mov	r9, r8
    25ae:	21 2c       	mov	r2, r1
    25b0:	a4 fe       	sbrs	r10, 4
    25b2:	10 c0       	rjmp	.+32     	; 0x25d4 <vfprintf+0x356>
    25b4:	b6 01       	movw	r22, r12
    25b6:	80 e3       	ldi	r24, 0x30	; 48
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 36 13 	call	0x266c	; 0x266c <fputc>
    25be:	a2 fe       	sbrs	r10, 2
    25c0:	17 c0       	rjmp	.+46     	; 0x25f0 <vfprintf+0x372>
    25c2:	a1 fc       	sbrc	r10, 1
    25c4:	03 c0       	rjmp	.+6      	; 0x25cc <vfprintf+0x34e>
    25c6:	88 e7       	ldi	r24, 0x78	; 120
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <vfprintf+0x352>
    25cc:	88 e5       	ldi	r24, 0x58	; 88
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	b6 01       	movw	r22, r12
    25d2:	0c c0       	rjmp	.+24     	; 0x25ec <vfprintf+0x36e>
    25d4:	8a 2d       	mov	r24, r10
    25d6:	86 78       	andi	r24, 0x86	; 134
    25d8:	59 f0       	breq	.+22     	; 0x25f0 <vfprintf+0x372>
    25da:	a1 fe       	sbrs	r10, 1
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <vfprintf+0x364>
    25de:	8b e2       	ldi	r24, 0x2B	; 43
    25e0:	01 c0       	rjmp	.+2      	; 0x25e4 <vfprintf+0x366>
    25e2:	80 e2       	ldi	r24, 0x20	; 32
    25e4:	a7 fc       	sbrc	r10, 7
    25e6:	8d e2       	ldi	r24, 0x2D	; 45
    25e8:	b6 01       	movw	r22, r12
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 36 13 	call	0x266c	; 0x266c <fputc>
    25f0:	89 14       	cp	r8, r9
    25f2:	38 f4       	brcc	.+14     	; 0x2602 <vfprintf+0x384>
    25f4:	b6 01       	movw	r22, r12
    25f6:	80 e3       	ldi	r24, 0x30	; 48
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 36 13 	call	0x266c	; 0x266c <fputc>
    25fe:	9a 94       	dec	r9
    2600:	f7 cf       	rjmp	.-18     	; 0x25f0 <vfprintf+0x372>
    2602:	8a 94       	dec	r8
    2604:	f3 01       	movw	r30, r6
    2606:	e8 0d       	add	r30, r8
    2608:	f1 1d       	adc	r31, r1
    260a:	80 81       	ld	r24, Z
    260c:	b6 01       	movw	r22, r12
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 36 13 	call	0x266c	; 0x266c <fputc>
    2614:	81 10       	cpse	r8, r1
    2616:	f5 cf       	rjmp	.-22     	; 0x2602 <vfprintf+0x384>
    2618:	22 20       	and	r2, r2
    261a:	09 f4       	brne	.+2      	; 0x261e <vfprintf+0x3a0>
    261c:	42 ce       	rjmp	.-892    	; 0x22a2 <vfprintf+0x24>
    261e:	b6 01       	movw	r22, r12
    2620:	80 e2       	ldi	r24, 0x20	; 32
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 36 13 	call	0x266c	; 0x266c <fputc>
    2628:	2a 94       	dec	r2
    262a:	f6 cf       	rjmp	.-20     	; 0x2618 <vfprintf+0x39a>
    262c:	f6 01       	movw	r30, r12
    262e:	86 81       	ldd	r24, Z+6	; 0x06
    2630:	97 81       	ldd	r25, Z+7	; 0x07
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <vfprintf+0x3ba>
    2634:	8f ef       	ldi	r24, 0xFF	; 255
    2636:	9f ef       	ldi	r25, 0xFF	; 255
    2638:	2b 96       	adiw	r28, 0x0b	; 11
    263a:	e2 e1       	ldi	r30, 0x12	; 18
    263c:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__epilogue_restores__>

00002640 <strnlen_P>:
    2640:	fc 01       	movw	r30, r24
    2642:	05 90       	lpm	r0, Z+
    2644:	61 50       	subi	r22, 0x01	; 1
    2646:	70 40       	sbci	r23, 0x00	; 0
    2648:	01 10       	cpse	r0, r1
    264a:	d8 f7       	brcc	.-10     	; 0x2642 <strnlen_P+0x2>
    264c:	80 95       	com	r24
    264e:	90 95       	com	r25
    2650:	8e 0f       	add	r24, r30
    2652:	9f 1f       	adc	r25, r31
    2654:	08 95       	ret

00002656 <strnlen>:
    2656:	fc 01       	movw	r30, r24
    2658:	61 50       	subi	r22, 0x01	; 1
    265a:	70 40       	sbci	r23, 0x00	; 0
    265c:	01 90       	ld	r0, Z+
    265e:	01 10       	cpse	r0, r1
    2660:	d8 f7       	brcc	.-10     	; 0x2658 <strnlen+0x2>
    2662:	80 95       	com	r24
    2664:	90 95       	com	r25
    2666:	8e 0f       	add	r24, r30
    2668:	9f 1f       	adc	r25, r31
    266a:	08 95       	ret

0000266c <fputc>:
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	fb 01       	movw	r30, r22
    2676:	23 81       	ldd	r18, Z+3	; 0x03
    2678:	21 fd       	sbrc	r18, 1
    267a:	03 c0       	rjmp	.+6      	; 0x2682 <fputc+0x16>
    267c:	8f ef       	ldi	r24, 0xFF	; 255
    267e:	9f ef       	ldi	r25, 0xFF	; 255
    2680:	2c c0       	rjmp	.+88     	; 0x26da <fputc+0x6e>
    2682:	22 ff       	sbrs	r18, 2
    2684:	16 c0       	rjmp	.+44     	; 0x26b2 <fputc+0x46>
    2686:	46 81       	ldd	r20, Z+6	; 0x06
    2688:	57 81       	ldd	r21, Z+7	; 0x07
    268a:	24 81       	ldd	r18, Z+4	; 0x04
    268c:	35 81       	ldd	r19, Z+5	; 0x05
    268e:	42 17       	cp	r20, r18
    2690:	53 07       	cpc	r21, r19
    2692:	44 f4       	brge	.+16     	; 0x26a4 <fputc+0x38>
    2694:	a0 81       	ld	r26, Z
    2696:	b1 81       	ldd	r27, Z+1	; 0x01
    2698:	9d 01       	movw	r18, r26
    269a:	2f 5f       	subi	r18, 0xFF	; 255
    269c:	3f 4f       	sbci	r19, 0xFF	; 255
    269e:	31 83       	std	Z+1, r19	; 0x01
    26a0:	20 83       	st	Z, r18
    26a2:	8c 93       	st	X, r24
    26a4:	26 81       	ldd	r18, Z+6	; 0x06
    26a6:	37 81       	ldd	r19, Z+7	; 0x07
    26a8:	2f 5f       	subi	r18, 0xFF	; 255
    26aa:	3f 4f       	sbci	r19, 0xFF	; 255
    26ac:	37 83       	std	Z+7, r19	; 0x07
    26ae:	26 83       	std	Z+6, r18	; 0x06
    26b0:	14 c0       	rjmp	.+40     	; 0x26da <fputc+0x6e>
    26b2:	8b 01       	movw	r16, r22
    26b4:	ec 01       	movw	r28, r24
    26b6:	fb 01       	movw	r30, r22
    26b8:	00 84       	ldd	r0, Z+8	; 0x08
    26ba:	f1 85       	ldd	r31, Z+9	; 0x09
    26bc:	e0 2d       	mov	r30, r0
    26be:	09 95       	icall
    26c0:	89 2b       	or	r24, r25
    26c2:	e1 f6       	brne	.-72     	; 0x267c <fputc+0x10>
    26c4:	d8 01       	movw	r26, r16
    26c6:	16 96       	adiw	r26, 0x06	; 6
    26c8:	8d 91       	ld	r24, X+
    26ca:	9c 91       	ld	r25, X
    26cc:	17 97       	sbiw	r26, 0x07	; 7
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	17 96       	adiw	r26, 0x07	; 7
    26d2:	9c 93       	st	X, r25
    26d4:	8e 93       	st	-X, r24
    26d6:	16 97       	sbiw	r26, 0x06	; 6
    26d8:	ce 01       	movw	r24, r28
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	08 95       	ret

000026e4 <__ultoa_invert>:
    26e4:	fa 01       	movw	r30, r20
    26e6:	aa 27       	eor	r26, r26
    26e8:	28 30       	cpi	r18, 0x08	; 8
    26ea:	51 f1       	breq	.+84     	; 0x2740 <__ultoa_invert+0x5c>
    26ec:	20 31       	cpi	r18, 0x10	; 16
    26ee:	81 f1       	breq	.+96     	; 0x2750 <__ultoa_invert+0x6c>
    26f0:	e8 94       	clt
    26f2:	6f 93       	push	r22
    26f4:	6e 7f       	andi	r22, 0xFE	; 254
    26f6:	6e 5f       	subi	r22, 0xFE	; 254
    26f8:	7f 4f       	sbci	r23, 0xFF	; 255
    26fa:	8f 4f       	sbci	r24, 0xFF	; 255
    26fc:	9f 4f       	sbci	r25, 0xFF	; 255
    26fe:	af 4f       	sbci	r26, 0xFF	; 255
    2700:	b1 e0       	ldi	r27, 0x01	; 1
    2702:	3e d0       	rcall	.+124    	; 0x2780 <__ultoa_invert+0x9c>
    2704:	b4 e0       	ldi	r27, 0x04	; 4
    2706:	3c d0       	rcall	.+120    	; 0x2780 <__ultoa_invert+0x9c>
    2708:	67 0f       	add	r22, r23
    270a:	78 1f       	adc	r23, r24
    270c:	89 1f       	adc	r24, r25
    270e:	9a 1f       	adc	r25, r26
    2710:	a1 1d       	adc	r26, r1
    2712:	68 0f       	add	r22, r24
    2714:	79 1f       	adc	r23, r25
    2716:	8a 1f       	adc	r24, r26
    2718:	91 1d       	adc	r25, r1
    271a:	a1 1d       	adc	r26, r1
    271c:	6a 0f       	add	r22, r26
    271e:	71 1d       	adc	r23, r1
    2720:	81 1d       	adc	r24, r1
    2722:	91 1d       	adc	r25, r1
    2724:	a1 1d       	adc	r26, r1
    2726:	20 d0       	rcall	.+64     	; 0x2768 <__ultoa_invert+0x84>
    2728:	09 f4       	brne	.+2      	; 0x272c <__ultoa_invert+0x48>
    272a:	68 94       	set
    272c:	3f 91       	pop	r19
    272e:	2a e0       	ldi	r18, 0x0A	; 10
    2730:	26 9f       	mul	r18, r22
    2732:	11 24       	eor	r1, r1
    2734:	30 19       	sub	r19, r0
    2736:	30 5d       	subi	r19, 0xD0	; 208
    2738:	31 93       	st	Z+, r19
    273a:	de f6       	brtc	.-74     	; 0x26f2 <__ultoa_invert+0xe>
    273c:	cf 01       	movw	r24, r30
    273e:	08 95       	ret
    2740:	46 2f       	mov	r20, r22
    2742:	47 70       	andi	r20, 0x07	; 7
    2744:	40 5d       	subi	r20, 0xD0	; 208
    2746:	41 93       	st	Z+, r20
    2748:	b3 e0       	ldi	r27, 0x03	; 3
    274a:	0f d0       	rcall	.+30     	; 0x276a <__ultoa_invert+0x86>
    274c:	c9 f7       	brne	.-14     	; 0x2740 <__ultoa_invert+0x5c>
    274e:	f6 cf       	rjmp	.-20     	; 0x273c <__ultoa_invert+0x58>
    2750:	46 2f       	mov	r20, r22
    2752:	4f 70       	andi	r20, 0x0F	; 15
    2754:	40 5d       	subi	r20, 0xD0	; 208
    2756:	4a 33       	cpi	r20, 0x3A	; 58
    2758:	18 f0       	brcs	.+6      	; 0x2760 <__ultoa_invert+0x7c>
    275a:	49 5d       	subi	r20, 0xD9	; 217
    275c:	31 fd       	sbrc	r19, 1
    275e:	40 52       	subi	r20, 0x20	; 32
    2760:	41 93       	st	Z+, r20
    2762:	02 d0       	rcall	.+4      	; 0x2768 <__ultoa_invert+0x84>
    2764:	a9 f7       	brne	.-22     	; 0x2750 <__ultoa_invert+0x6c>
    2766:	ea cf       	rjmp	.-44     	; 0x273c <__ultoa_invert+0x58>
    2768:	b4 e0       	ldi	r27, 0x04	; 4
    276a:	a6 95       	lsr	r26
    276c:	97 95       	ror	r25
    276e:	87 95       	ror	r24
    2770:	77 95       	ror	r23
    2772:	67 95       	ror	r22
    2774:	ba 95       	dec	r27
    2776:	c9 f7       	brne	.-14     	; 0x276a <__ultoa_invert+0x86>
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	61 05       	cpc	r22, r1
    277c:	71 05       	cpc	r23, r1
    277e:	08 95       	ret
    2780:	9b 01       	movw	r18, r22
    2782:	ac 01       	movw	r20, r24
    2784:	0a 2e       	mov	r0, r26
    2786:	06 94       	lsr	r0
    2788:	57 95       	ror	r21
    278a:	47 95       	ror	r20
    278c:	37 95       	ror	r19
    278e:	27 95       	ror	r18
    2790:	ba 95       	dec	r27
    2792:	c9 f7       	brne	.-14     	; 0x2786 <__ultoa_invert+0xa2>
    2794:	62 0f       	add	r22, r18
    2796:	73 1f       	adc	r23, r19
    2798:	84 1f       	adc	r24, r20
    279a:	95 1f       	adc	r25, r21
    279c:	a0 1d       	adc	r26, r0
    279e:	08 95       	ret

000027a0 <__prologue_saves__>:
    27a0:	2f 92       	push	r2
    27a2:	3f 92       	push	r3
    27a4:	4f 92       	push	r4
    27a6:	5f 92       	push	r5
    27a8:	6f 92       	push	r6
    27aa:	7f 92       	push	r7
    27ac:	8f 92       	push	r8
    27ae:	9f 92       	push	r9
    27b0:	af 92       	push	r10
    27b2:	bf 92       	push	r11
    27b4:	cf 92       	push	r12
    27b6:	df 92       	push	r13
    27b8:	ef 92       	push	r14
    27ba:	ff 92       	push	r15
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	ca 1b       	sub	r28, r26
    27ca:	db 0b       	sbc	r29, r27
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	09 94       	ijmp

000027d8 <__epilogue_restores__>:
    27d8:	2a 88       	ldd	r2, Y+18	; 0x12
    27da:	39 88       	ldd	r3, Y+17	; 0x11
    27dc:	48 88       	ldd	r4, Y+16	; 0x10
    27de:	5f 84       	ldd	r5, Y+15	; 0x0f
    27e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    27e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    27e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    27e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    27e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ea:	b9 84       	ldd	r11, Y+9	; 0x09
    27ec:	c8 84       	ldd	r12, Y+8	; 0x08
    27ee:	df 80       	ldd	r13, Y+7	; 0x07
    27f0:	ee 80       	ldd	r14, Y+6	; 0x06
    27f2:	fd 80       	ldd	r15, Y+5	; 0x05
    27f4:	0c 81       	ldd	r16, Y+4	; 0x04
    27f6:	1b 81       	ldd	r17, Y+3	; 0x03
    27f8:	aa 81       	ldd	r26, Y+2	; 0x02
    27fa:	b9 81       	ldd	r27, Y+1	; 0x01
    27fc:	ce 0f       	add	r28, r30
    27fe:	d1 1d       	adc	r29, r1
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	ed 01       	movw	r28, r26
    280c:	08 95       	ret

0000280e <_exit>:
    280e:	f8 94       	cli

00002810 <__stop_program>:
    2810:	ff cf       	rjmp	.-2      	; 0x2810 <__stop_program>
