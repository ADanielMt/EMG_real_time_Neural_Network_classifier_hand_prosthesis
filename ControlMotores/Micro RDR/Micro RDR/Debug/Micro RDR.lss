
Micro RDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bb  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e4  00000000  00000000  00000dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b6  00000000  00000000  0000148f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001f25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 01 	call	0x314	; 0x314 <main>
  9e:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <getIDMov>:
	uint8_t id_mov = 0;
	
	// Obtiene los estados de los pines de control
	if (((PINC & (1 << PINC2)) >> PINC2) == 1)
	{
		clave_mov[0] = 1;
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	32 9b       	sbis	0x06, 2	; 6
  aa:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		clave_mov[0] = 0;
	}
	
	if (((PINC & (1 << PINC3)) >> PINC3) == 1)
  ac:	33 99       	sbic	0x06, 3	; 6
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <getIDMov+0xe>
	{
		clave_mov[1] = 2;
	}
	else
	{
		clave_mov[1] = 0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <getIDMov+0x10>
		clave_mov[0] = 0;
	}
	
	if (((PINC & (1 << PINC3)) >> PINC3) == 1)
	{
		clave_mov[1] = 2;
  b4:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		clave_mov[1] = 0;
	}
	
	if (((PINC & (1 << PINC4)) >> PINC4) == 1)
  b6:	34 99       	sbic	0x06, 4	; 6
  b8:	02 c0       	rjmp	.+4      	; 0xbe <getIDMov+0x18>
	{
		clave_mov[2] = 4;
	}
	else
	{
		clave_mov[2] = 0;
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <getIDMov+0x1a>
		clave_mov[1] = 0;
	}
	
	if (((PINC & (1 << PINC4)) >> PINC4) == 1)
	{
		clave_mov[2] = 4;
  be:	24 e0       	ldi	r18, 0x04	; 4
		clave_mov[2] = 0;
	}
	
	id_mov = clave_mov[0] + clave_mov[1] + clave_mov[2];

	return(id_mov);
  c0:	98 0f       	add	r25, r24
  c2:	89 2f       	mov	r24, r25
  c4:	82 0f       	add	r24, r18
}
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	08 95       	ret

000000ca <enviarMov>:


void enviarMov(int mode)
{

	if(mode == 0)
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	01 f5       	brne	.+64     	; 0x10e <enviarMov+0x44>
	{
		PORTB &= ~((1<<pin_out2) | (1<<pin_out1) | (1<<pin_out0));
  ce:	25 b1       	in	r18, 0x05	; 5
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	bc 01       	movw	r22, r24
  d6:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
  da:	02 c0       	rjmp	.+4      	; 0xe0 <enviarMov+0x16>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <enviarMov+0x12>
  e4:	ac 01       	movw	r20, r24
  e6:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <pin_out1>
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <enviarMov+0x26>
  ec:	44 0f       	add	r20, r20
  ee:	55 1f       	adc	r21, r21
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <enviarMov+0x22>
  f4:	46 2b       	or	r20, r22
  f6:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <pin_out0>
  fa:	02 c0       	rjmp	.+4      	; 0x100 <enviarMov+0x36>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <enviarMov+0x32>
 104:	84 2b       	or	r24, r20
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	08 95       	ret
	}
	else if(mode == 1)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 05       	cpc	r25, r1
 112:	11 f5       	brne	.+68     	; 0x158 <enviarMov+0x8e>
	{
		PORTB &= ~((1<<pin_out2) | (1<<pin_out1));
 114:	45 b1       	in	r20, 0x05	; 5
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	bc 01       	movw	r22, r24
 11c:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 120:	02 c0       	rjmp	.+4      	; 0x126 <enviarMov+0x5c>
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <enviarMov+0x58>
 12a:	9c 01       	movw	r18, r24
 12c:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <pin_out1>
 130:	02 c0       	rjmp	.+4      	; 0x136 <enviarMov+0x6c>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <enviarMov+0x68>
 13a:	26 2b       	or	r18, r22
 13c:	20 95       	com	r18
 13e:	24 23       	and	r18, r20
 140:	25 b9       	out	0x05, r18	; 5
		PORTB |= (1<<pin_out0);
 142:	25 b1       	in	r18, 0x05	; 5
 144:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <pin_out0>
 148:	02 c0       	rjmp	.+4      	; 0x14e <enviarMov+0x84>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <enviarMov+0x80>
 152:	82 2b       	or	r24, r18
 154:	85 b9       	out	0x05, r24	; 5
 156:	08 95       	ret
	}
	else if(mode == 2)
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	91 05       	cpc	r25, r1
 15c:	11 f5       	brne	.+68     	; 0x1a2 <enviarMov+0xd8>
	{
		PORTB &= ~((1<<pin_out2) | (1<<pin_out0));
 15e:	45 b1       	in	r20, 0x05	; 5
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	bc 01       	movw	r22, r24
 166:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 16a:	02 c0       	rjmp	.+4      	; 0x170 <enviarMov+0xa6>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <enviarMov+0xa2>
 174:	9c 01       	movw	r18, r24
 176:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <pin_out0>
 17a:	02 c0       	rjmp	.+4      	; 0x180 <enviarMov+0xb6>
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <enviarMov+0xb2>
 184:	26 2b       	or	r18, r22
 186:	20 95       	com	r18
 188:	24 23       	and	r18, r20
 18a:	25 b9       	out	0x05, r18	; 5
		PORTB |= (1<<pin_out1);
 18c:	25 b1       	in	r18, 0x05	; 5
 18e:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <pin_out1>
 192:	02 c0       	rjmp	.+4      	; 0x198 <enviarMov+0xce>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <enviarMov+0xca>
 19c:	82 2b       	or	r24, r18
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	08 95       	ret
	}
	else if(mode == 3)
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	91 05       	cpc	r25, r1
 1a6:	19 f5       	brne	.+70     	; 0x1ee <enviarMov+0x124>
	{
		PORTB &= ~(1<<pin_out2);
 1a8:	35 b1       	in	r19, 0x05	; 5
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	ac 01       	movw	r20, r24
 1b0:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <enviarMov+0xf0>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <enviarMov+0xec>
 1be:	24 2f       	mov	r18, r20
 1c0:	20 95       	com	r18
 1c2:	23 23       	and	r18, r19
 1c4:	25 b9       	out	0x05, r18	; 5
		PORTB |= ((1<<pin_out1) | (1<<pin_out0));
 1c6:	25 b1       	in	r18, 0x05	; 5
 1c8:	ac 01       	movw	r20, r24
 1ca:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <pin_out1>
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <enviarMov+0x10a>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <enviarMov+0x106>
 1d8:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <pin_out0>
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <enviarMov+0x118>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <enviarMov+0x114>
 1e6:	84 2b       	or	r24, r20
 1e8:	82 2b       	or	r24, r18
 1ea:	85 b9       	out	0x05, r24	; 5
 1ec:	08 95       	ret
	}
	else if(mode == 4)
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	91 05       	cpc	r25, r1
 1f2:	11 f5       	brne	.+68     	; 0x238 <enviarMov+0x16e>
	{
		PORTB &= ~((1<<pin_out1) | (1<<pin_out0));
 1f4:	45 b1       	in	r20, 0x05	; 5
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	bc 01       	movw	r22, r24
 1fc:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <pin_out1>
 200:	02 c0       	rjmp	.+4      	; 0x206 <enviarMov+0x13c>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <enviarMov+0x138>
 20a:	9c 01       	movw	r18, r24
 20c:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <pin_out0>
 210:	02 c0       	rjmp	.+4      	; 0x216 <enviarMov+0x14c>
 212:	22 0f       	add	r18, r18
 214:	33 1f       	adc	r19, r19
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <enviarMov+0x148>
 21a:	26 2b       	or	r18, r22
 21c:	20 95       	com	r18
 21e:	24 23       	and	r18, r20
 220:	25 b9       	out	0x05, r18	; 5
		PORTB |= (1<<pin_out2);
 222:	25 b1       	in	r18, 0x05	; 5
 224:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 228:	02 c0       	rjmp	.+4      	; 0x22e <enviarMov+0x164>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <enviarMov+0x160>
 232:	82 2b       	or	r24, r18
 234:	85 b9       	out	0x05, r24	; 5
 236:	08 95       	ret
	}
	else if(mode == 5)
 238:	85 30       	cpi	r24, 0x05	; 5
 23a:	91 05       	cpc	r25, r1
 23c:	19 f5       	brne	.+70     	; 0x284 <enviarMov+0x1ba>
	{
		PORTB &= ~(1<<pin_out1);
 23e:	35 b1       	in	r19, 0x05	; 5
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ac 01       	movw	r20, r24
 246:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <pin_out1>
 24a:	02 c0       	rjmp	.+4      	; 0x250 <enviarMov+0x186>
 24c:	44 0f       	add	r20, r20
 24e:	55 1f       	adc	r21, r21
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <enviarMov+0x182>
 254:	24 2f       	mov	r18, r20
 256:	20 95       	com	r18
 258:	23 23       	and	r18, r19
 25a:	25 b9       	out	0x05, r18	; 5
		PORTB |= ((1<<pin_out2) | (1<<pin_out0));
 25c:	25 b1       	in	r18, 0x05	; 5
 25e:	ac 01       	movw	r20, r24
 260:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 264:	02 c0       	rjmp	.+4      	; 0x26a <enviarMov+0x1a0>
 266:	44 0f       	add	r20, r20
 268:	55 1f       	adc	r21, r21
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <enviarMov+0x19c>
 26e:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <pin_out0>
 272:	02 c0       	rjmp	.+4      	; 0x278 <enviarMov+0x1ae>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <enviarMov+0x1aa>
 27c:	84 2b       	or	r24, r20
 27e:	82 2b       	or	r24, r18
 280:	85 b9       	out	0x05, r24	; 5
 282:	08 95       	ret
	}
	else if(mode == 6)
 284:	86 30       	cpi	r24, 0x06	; 6
 286:	91 05       	cpc	r25, r1
 288:	19 f5       	brne	.+70     	; 0x2d0 <enviarMov+0x206>
	{
		PORTB &= ~(1<<pin_out0);
 28a:	35 b1       	in	r19, 0x05	; 5
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ac 01       	movw	r20, r24
 292:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <pin_out0>
 296:	02 c0       	rjmp	.+4      	; 0x29c <enviarMov+0x1d2>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <enviarMov+0x1ce>
 2a0:	24 2f       	mov	r18, r20
 2a2:	20 95       	com	r18
 2a4:	23 23       	and	r18, r19
 2a6:	25 b9       	out	0x05, r18	; 5
		PORTB |= ((1<<pin_out2) | (1<<pin_out1));
 2a8:	25 b1       	in	r18, 0x05	; 5
 2aa:	ac 01       	movw	r20, r24
 2ac:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <enviarMov+0x1ec>
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <enviarMov+0x1e8>
 2ba:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <pin_out1>
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <enviarMov+0x1fa>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <enviarMov+0x1f6>
 2c8:	84 2b       	or	r24, r20
 2ca:	82 2b       	or	r24, r18
 2cc:	85 b9       	out	0x05, r24	; 5
 2ce:	08 95       	ret
	}
	else if(mode == 7)
 2d0:	07 97       	sbiw	r24, 0x07	; 7
 2d2:	f9 f4       	brne	.+62     	; 0x312 <enviarMov+0x248>
	{
		PORTB |= ((1<<pin_out2) | (1<<pin_out1) | (1<<pin_out0));
 2d4:	35 b1       	in	r19, 0x05	; 5
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	bc 01       	movw	r22, r24
 2dc:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <enviarMov+0x21c>
 2e2:	66 0f       	add	r22, r22
 2e4:	77 1f       	adc	r23, r23
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <enviarMov+0x218>
 2ea:	ac 01       	movw	r20, r24
 2ec:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <pin_out1>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <enviarMov+0x22c>
 2f2:	44 0f       	add	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <enviarMov+0x228>
 2fa:	26 2f       	mov	r18, r22
 2fc:	24 2b       	or	r18, r20
 2fe:	23 2b       	or	r18, r19
 300:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <pin_out0>
 304:	02 c0       	rjmp	.+4      	; 0x30a <enviarMov+0x240>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <enviarMov+0x23c>
 30e:	82 2b       	or	r24, r18
 310:	85 b9       	out	0x05, r24	; 5
 312:	08 95       	ret

00000314 <main>:


int main(void)
{
 
	cli();   
 314:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	2f ef       	ldi	r18, 0xFF	; 255
 318:	83 ec       	ldi	r24, 0xC3	; 195
 31a:	99 e0       	ldi	r25, 0x09	; 9
 31c:	21 50       	subi	r18, 0x01	; 1
 31e:	80 40       	sbci	r24, 0x00	; 0
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x8>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0x12>
 326:	00 00       	nop
	_delay_ms(200);
	
	DDRC = 0x00;   // 0000 0000 (PC2, PC3, PC4 como entradas de control)
 328:	17 b8       	out	0x07, r1	; 7
	DDRB = 0x38;   // 0011 1000 (PB3, PB4, PB5 como salidas hacia microPLM y microIMA)
 32a:	88 e3       	ldi	r24, 0x38	; 56
 32c:	84 b9       	out	0x04, r24	; 4

	PORTC |= ((1<<2) | (1<<3) | (1<<4));  // Activar resistencia pull-up para PC2, PC3 y PC4
 32e:	88 b1       	in	r24, 0x08	; 8
 330:	8c 61       	ori	r24, 0x1C	; 28
 332:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~((1<<3) | (1<<4) | (1<<5));  // Poner en bajo PB3, PB4, PB5
 334:	85 b1       	in	r24, 0x05	; 5
 336:	87 7c       	andi	r24, 0xC7	; 199
 338:	85 b9       	out	0x05, r24	; 5
	
	sei();
 33a:	78 94       	sei
	
    while (1) 
    {
		
		_delay_ms(250);
		lectura[0] = getIDMov();
 33c:	c5 e0       	ldi	r28, 0x05	; 5
 33e:	d1 e0       	ldi	r29, 0x01	; 1
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	84 e3       	ldi	r24, 0x34	; 52
 344:	9c e0       	ldi	r25, 0x0C	; 12
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x32>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x3c>
 350:	00 00       	nop
 352:	0e 94 53 00 	call	0xa6	; 0xa6 <getIDMov>
 356:	88 83       	st	Y, r24
		lectura[1] = getIDMov();
 358:	0e 94 53 00 	call	0xa6	; 0xa6 <getIDMov>
 35c:	89 83       	std	Y+1, r24	; 0x01
		lectura[2] = getIDMov();
 35e:	0e 94 53 00 	call	0xa6	; 0xa6 <getIDMov>
 362:	8a 83       	std	Y+2, r24	; 0x02


		if((lectura[0] == lectura[1]) && (lectura[0] == lectura[2]))
 364:	98 81       	ld	r25, Y
 366:	29 81       	ldd	r18, Y+1	; 0x01
 368:	92 13       	cpse	r25, r18
 36a:	08 c0       	rjmp	.+16     	; 0x37c <main+0x68>
 36c:	89 13       	cpse	r24, r25
 36e:	03 c0       	rjmp	.+6      	; 0x376 <main+0x62>
		{
			moda = lectura[0];
 370:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 374:	0d c0       	rjmp	.+26     	; 0x390 <main+0x7c>
		}
		else if((lectura[0] == lectura[1]) && (lectura[0] != lectura[2]))
		{
			moda = lectura[0];
 376:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__data_end>
 37a:	0a c0       	rjmp	.+20     	; 0x390 <main+0x7c>
		}
		else if((lectura[0] != lectura[1]) && (lectura[0] == lectura[2]))
 37c:	89 13       	cpse	r24, r25
 37e:	17 c0       	rjmp	.+46     	; 0x3ae <main+0x9a>
		{
			moda = lectura[0];
 380:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 384:	05 c0       	rjmp	.+10     	; 0x390 <main+0x7c>
		}
		else if((lectura[1] == lectura[2]) && (lectura[0] != lectura[1]))
		{
			moda = lectura[1];
 386:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 38a:	02 c0       	rjmp	.+4      	; 0x390 <main+0x7c>
		}
		else
		{
			moda = lectura[1];
 38c:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
		}

		enviarMov(moda);
 390:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 65 00 	call	0xca	; 0xca <enviarMov>
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	85 ea       	ldi	r24, 0xA5	; 165
 39e:	9e e0       	ldi	r25, 0x0E	; 14
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0x8c>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0x96>
 3aa:	00 00       	nop
 3ac:	c9 cf       	rjmp	.-110    	; 0x340 <main+0x2c>
		}
		else if((lectura[0] != lectura[1]) && (lectura[0] == lectura[2]))
		{
			moda = lectura[0];
		}
		else if((lectura[1] == lectura[2]) && (lectura[0] != lectura[1]))
 3ae:	82 13       	cpse	r24, r18
 3b0:	ed cf       	rjmp	.-38     	; 0x38c <main+0x78>
 3b2:	e9 cf       	rjmp	.-46     	; 0x386 <main+0x72>

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
